{
    "name": "hcloud",
    "description": "A Pulumi package for creating and managing hcloud cloud resources.",
    "keywords": [
        "pulumi",
        "hcloud"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`hcloud` Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud).",
    "repository": "https://github.com/pulumi/pulumi-hcloud",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "hcloud": "HCloud"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-hcloud/sdk/go/hcloud",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing hcloud cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-hcloud` repo](https://github.com/pulumi/pulumi-hcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-hcloud` repo](https://github.com/hetznercloud/terraform-provider-hcloud/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-hcloud` repo](https://github.com/pulumi/pulumi-hcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-hcloud` repo](https://github.com/hetznercloud/terraform-provider-hcloud/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string",
                "description": "The Hetzner Cloud API endpoint, can be used to override the default API Endpoint https://api.hetzner.cloud/v1.\n"
            },
            "pollFunction": {
                "type": "string",
                "description": "The type of function to be used during the polling.\n"
            },
            "pollInterval": {
                "type": "string",
                "description": "The interval at which actions are polled by the client. Default `500ms`. Increase this interval if you run into rate\nlimiting errors.\n"
            },
            "token": {
                "type": "string",
                "description": "The Hetzner Cloud API token, can also be specified with the HCLOUD_TOKEN environment variable.\n",
                "secret": true
            }
        }
    },
    "types": {
        "hcloud:index/FirewallApplyTo:FirewallApplyTo": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "description": "Label Selector to select servers the firewall should be applied to (only one\nof `server` and `label_selector`can be applied in one block)\n"
                },
                "server": {
                    "type": "integer",
                    "description": "ID of the server you want to apply the firewall to (only one of `server`\nand `label_selector`can be applied in one block)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelector",
                        "server"
                    ]
                }
            }
        },
        "hcloud:index/FirewallRule:FirewallRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the firewall rule\n"
                },
                "destinationIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction`\nis `out`)\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of the Firewall Rule. `in`\n"
                },
                "port": {
                    "type": "string",
                    "description": "Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`\nto allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and\n85.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`\n"
                },
                "sourceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CIDRs that are allowed within this Firewall Rule\n"
                }
            },
            "type": "object",
            "required": [
                "direction",
                "protocol"
            ]
        },
        "hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the Load Balancer Algorithm. `round_robin` or `least_connections`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck": {
            "properties": {
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheckHttp:LoadBalancerServiceHealthCheckHttp",
                    "description": "HTTP configuration. Required if `protocol` is `http`.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Interval how often the health check will be performed, in seconds.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol the health check uses. `http` or `tcp`\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of tries a health check will be performed until a target will be listed as `unhealthy`.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Timeout when a health check try will be canceled if there is no response, in seconds.\n"
                }
            },
            "type": "object",
            "required": [
                "interval",
                "port",
                "protocol",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "http",
                        "interval",
                        "port",
                        "protocol",
                        "retries",
                        "timeout"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerServiceHealthCheckHttp:LoadBalancerServiceHealthCheckHttp": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Domain we try to access when performing the Health Check.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path we try to access when performing the Health Check.\n"
                },
                "response": {
                    "type": "string",
                    "description": "Response we expect to be included in the Target response when a Health Check was performed.\n"
                },
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS certificate checking.\n"
                }
            },
            "type": "object"
        },
        "hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of IDs from certificates which the Load Balancer has.\n"
                },
                "cookieLifetime": {
                    "type": "integer",
                    "description": "Lifetime of the cookie for sticky session (in seconds). Default: `300`\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "Name of the cookie for sticky session. Default: `HCLBSTICKY`\n"
                },
                "redirectHttp": {
                    "type": "boolean",
                    "description": "Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.\n"
                },
                "stickySessions": {
                    "type": "boolean",
                    "description": "Enable sticky sessions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificates",
                        "cookieLifetime",
                        "cookieName",
                        "redirectHttp",
                        "stickySessions"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerTarget:LoadBalancerTarget": {
            "properties": {
                "serverId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Load Balancer Algorithm. `round_robin` or `least_connections`\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "deprecationMessage": "Does not work. Use the hcloud_load_balancer_target resource instead."
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "hcloud:index/ServerNetwork:ServerNetwork": {
            "properties": {
                "aliasIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Specify the IP the server should get in the network\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "(Optional, string) The MAC address the private interface of the server has\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network\n"
                }
            },
            "type": "object",
            "required": [
                "networkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aliasIps",
                        "ip",
                        "macAddress",
                        "networkId"
                    ]
                }
            }
        },
        "hcloud:index/ServerPublicNet:ServerPublicNet": {
            "properties": {
                "ipv4": {
                    "type": "integer"
                },
                "ipv4Enabled": {
                    "type": "boolean"
                },
                "ipv6": {
                    "type": "integer"
                },
                "ipv6Enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipv4",
                        "ipv6"
                    ]
                }
            }
        },
        "hcloud:index/getCertificatesCertificate:getCertificatesCertificate": {
            "properties": {
                "certificate": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "notValidAfter": {
                    "type": "string"
                },
                "notValidBefore": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "id",
                "labels",
                "notValidAfter",
                "notValidBefore",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getDatacentersDatacenter:getDatacentersDatacenter": {
            "properties": {
                "availableServerTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "supportedServerTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "type": "object",
            "required": [
                "availableServerTypeIds",
                "description",
                "id",
                "location",
                "name",
                "supportedServerTypeIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFirewallApplyTo:getFirewallApplyTo": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "description": "(string) Label Selector to select servers the firewall is applied to. Empty if a server is directly\nreferenced\n"
                },
                "server": {
                    "type": "integer",
                    "description": "(int) ID of a server where the firewall is applied to. `0` if applied to a label_selector\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFirewallRule:getFirewallRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(Optional, string) Description of the firewall rule\n"
                },
                "destinationIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)\n"
                },
                "direction": {
                    "type": "string",
                    "description": "(Required, string) Direction of the Firewall Rule. `in`, `out`\n"
                },
                "port": {
                    "type": "string",
                    "description": "(Required, string) Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "(Required, string) Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`\n"
                },
                "sourceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)\n"
                }
            },
            "type": "object",
            "required": [
                "direction"
            ]
        },
        "hcloud:index/getFirewallsFirewall:getFirewallsFirewall": {
            "properties": {
                "applyTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getFirewallsFirewallApplyTo:getFirewallsFirewallApplyTo"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getFirewallsFirewallRule:getFirewallsFirewallRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFirewallsFirewallApplyTo:getFirewallsFirewallApplyTo": {
            "properties": {
                "labelSelector": {
                    "type": "string"
                },
                "server": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFirewallsFirewallRule:getFirewallsFirewallRule": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "destinationIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "direction": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "sourceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "direction"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFloatingIpsFloatingIp:getFloatingIpsFloatingIp": {
            "properties": {
                "deleteProtection": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "homeLocation": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipNetwork": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "serverId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deleteProtection",
                "description",
                "homeLocation",
                "id",
                "ipAddress",
                "ipNetwork",
                "labels",
                "serverId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getImagesImage:getImagesImage": {
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "deprecated": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "osFlavor": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "rapidDeploy": {
                    "type": "boolean"
                },
                "selector": {
                    "type": "string",
                    "deprecationMessage": "Please use the with_selector property instead."
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "architecture",
                "created",
                "deprecated",
                "description",
                "id",
                "labels",
                "name",
                "osFlavor",
                "osVersion",
                "rapidDeploy",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerAlgorithm:getLoadBalancerAlgorithm": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "(string) Type of the target. `server` or `label_selector`\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerService:getLoadBalancerService": {
            "properties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "(int) Port the service connects to the targets on. Can be everything between `1` and `65535`.\n"
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancerServiceHealthCheck:getLoadBalancerServiceHealthCheck"
                    },
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n"
                },
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancerServiceHttp:getLoadBalancerServiceHttp"
                    },
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n"
                },
                "listenPort": {
                    "type": "integer",
                    "description": "(int) Port the service listen on`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "(string) Protocol the health check uses. `http`, `https` or `tcp`\n"
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "(bool) Enable proxyprotocol.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationPort",
                "healthChecks",
                "https",
                "listenPort",
                "protocol",
                "proxyprotocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHealthCheck:getLoadBalancerServiceHealthCheck": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancerServiceHealthCheckHttp:getLoadBalancerServiceHealthCheckHttp"
                    },
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "(int) Interval how often the health check will be performed, in seconds.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "(int) Port the health check tries to connect to. Can be everything between `1` and `65535`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "(string) Protocol the health check uses. `http`, `https` or `tcp`\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "(int) Number of tries a health check will be performed until a target will be listed as `unhealthy`.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "(int) Timeout when a health check try will be canceled if there is no response, in seconds.\n"
                }
            },
            "type": "object",
            "required": [
                "https",
                "interval",
                "port",
                "protocol",
                "retries",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHealthCheckHttp:getLoadBalancerServiceHealthCheckHttp": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "string) Domain we try to access when performing the Health Check.\n"
                },
                "path": {
                    "type": "string",
                    "description": "(string) Path we try to access when performing the Health Check.\n"
                },
                "response": {
                    "type": "string",
                    "description": "(string) Response we expect to be included in the Target response when a Health Check was performed.\n"
                },
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(list[int]) We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "(bool) Enable TLS certificate checking.\n"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "path",
                "response",
                "statusCodes",
                "tls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHttp:getLoadBalancerServiceHttp": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list[int]) List of IDs from certificates which the Load Balancer has.\n"
                },
                "cookieLifetime": {
                    "type": "integer",
                    "description": "(int) Lifetime of the cookie for sticky session (in seconds).\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "(string) Name of the cookie for sticky session.\n"
                },
                "redirectHttp": {
                    "type": "boolean",
                    "description": "(string) Determine if all requests from port 80 should be redirected to port 443.\n"
                },
                "stickySessions": {
                    "type": "boolean",
                    "description": "(string) Determine if sticky sessions are enabled or not.\n"
                }
            },
            "type": "object",
            "required": [
                "certificates",
                "cookieLifetime",
                "cookieName",
                "redirectHttp",
                "stickySessions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerTarget:getLoadBalancerTarget": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "description": "(string) Label Selector to add a group of resources based on the label.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "(int) ID of the server which should be a target for this Load Balancer.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(string) Type of the target. `server` or `label_selector`\n"
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "serverId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancer:getLoadBalancersLoadBalancer": {
            "properties": {
                "algorithms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerAlgorithm:getLoadBalancersLoadBalancerAlgorithm"
                    }
                },
                "deleteProtection": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "ipv4": {
                    "type": "string"
                },
                "ipv6": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "loadBalancerType": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "networkId": {
                    "type": "integer"
                },
                "networkIp": {
                    "type": "string"
                },
                "networkZone": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerService:getLoadBalancersLoadBalancerService"
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerTarget:getLoadBalancersLoadBalancerTarget"
                    }
                }
            },
            "type": "object",
            "required": [
                "algorithms",
                "deleteProtection",
                "id",
                "ipv4",
                "ipv6",
                "labels",
                "loadBalancerType",
                "location",
                "networkId",
                "networkIp",
                "networkZone",
                "services",
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerAlgorithm:getLoadBalancersLoadBalancerAlgorithm": {
            "properties": {
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerService:getLoadBalancersLoadBalancerService": {
            "properties": {
                "destinationPort": {
                    "type": "integer"
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerServiceHealthCheck:getLoadBalancersLoadBalancerServiceHealthCheck"
                    }
                },
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerServiceHttp:getLoadBalancersLoadBalancerServiceHttp"
                    }
                },
                "listenPort": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "proxyprotocol": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "destinationPort",
                "healthChecks",
                "https",
                "listenPort",
                "protocol",
                "proxyprotocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerServiceHealthCheck:getLoadBalancersLoadBalancerServiceHealthCheck": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerServiceHealthCheckHttp:getLoadBalancersLoadBalancerServiceHealthCheckHttp"
                    }
                },
                "interval": {
                    "type": "integer"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "https",
                "interval",
                "port",
                "protocol",
                "retries",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerServiceHealthCheckHttp:getLoadBalancersLoadBalancerServiceHealthCheckHttp": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tls": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "path",
                "response",
                "statusCodes",
                "tls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerServiceHttp:getLoadBalancersLoadBalancerServiceHttp": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cookieLifetime": {
                    "type": "integer"
                },
                "cookieName": {
                    "type": "string"
                },
                "redirectHttp": {
                    "type": "boolean"
                },
                "stickySessions": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "certificates",
                "cookieLifetime",
                "cookieName",
                "redirectHttp",
                "stickySessions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerTarget:getLoadBalancersLoadBalancerTarget": {
            "properties": {
                "labelSelector": {
                    "type": "string"
                },
                "serverId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "serverId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLocationsLocation:getLocationsLocation": {
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "networkZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "city",
                "country",
                "description",
                "id",
                "latitude",
                "longitude",
                "name",
                "networkZone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getNetworksNetwork:getNetworksNetwork": {
            "properties": {
                "deleteProtection": {
                    "type": "boolean"
                },
                "exposeRoutesToVswitch": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "ipRange": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deleteProtection",
                "exposeRoutesToVswitch",
                "id",
                "ipRange",
                "labels",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getPlacementGroupsPlacementGroup:getPlacementGroupsPlacementGroup": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "labels",
                "name",
                "servers",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getPrimaryIpsPrimaryIp:getPrimaryIpsPrimaryIp": {
            "properties": {
                "assigneeId": {
                    "type": "integer"
                },
                "assigneeType": {
                    "type": "string"
                },
                "autoDelete": {
                    "type": "boolean"
                },
                "datacenter": {
                    "type": "string"
                },
                "deleteProtection": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipNetwork": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "assigneeId",
                "assigneeType",
                "autoDelete",
                "datacenter",
                "deleteProtection",
                "id",
                "ipAddress",
                "ipNetwork",
                "labels",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getServerTypesServerType:getServerTypesServerType": {
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "cores": {
                    "type": "integer"
                },
                "cpuType": {
                    "type": "string"
                },
                "deprecationAnnounced": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "disk": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "includedTraffic": {
                    "type": "integer"
                },
                "isDeprecated": {
                    "type": "boolean"
                },
                "memory": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "storageType": {
                    "type": "string"
                },
                "unavailableAfter": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "architecture",
                "cores",
                "cpuType",
                "deprecationAnnounced",
                "description",
                "disk",
                "id",
                "includedTraffic",
                "isDeprecated",
                "memory",
                "name",
                "storageType",
                "unavailableAfter"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getServersServer:getServersServer": {
            "properties": {
                "backupWindow": {
                    "type": "string"
                },
                "backups": {
                    "type": "boolean"
                },
                "datacenter": {
                    "type": "string"
                },
                "deleteProtection": {
                    "type": "boolean"
                },
                "firewallIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string"
                },
                "ipv6Address": {
                    "type": "string"
                },
                "ipv6Network": {
                    "type": "string"
                },
                "iso": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "placementGroupId": {
                    "type": "integer"
                },
                "primaryDiskSize": {
                    "type": "integer"
                },
                "rebuildProtection": {
                    "type": "boolean"
                },
                "rescue": {
                    "type": "string"
                },
                "serverType": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "backupWindow",
                "backups",
                "datacenter",
                "deleteProtection",
                "firewallIds",
                "id",
                "image",
                "ipv4Address",
                "ipv6Address",
                "ipv6Network",
                "iso",
                "labels",
                "location",
                "name",
                "primaryDiskSize",
                "rebuildProtection",
                "rescue",
                "serverType",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getSshKeysSshKey:getSshKeysSshKey": {
            "properties": {
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "fingerprint",
                "id",
                "labels",
                "name",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getVolumesVolume:getVolumesVolume": {
            "properties": {
                "deleteProtection": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "linuxDevice": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serverId": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "deleteProtection",
                "id",
                "labels",
                "linuxDevice",
                "name",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the hcloud package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "endpoint": {
                "type": "string",
                "description": "The Hetzner Cloud API endpoint, can be used to override the default API Endpoint https://api.hetzner.cloud/v1.\n"
            },
            "pollFunction": {
                "type": "string",
                "description": "The type of function to be used during the polling.\n"
            },
            "pollInterval": {
                "type": "string",
                "description": "The interval at which actions are polled by the client. Default `500ms`. Increase this interval if you run into rate\nlimiting errors.\n"
            },
            "token": {
                "type": "string",
                "description": "The Hetzner Cloud API token, can also be specified with the HCLOUD_TOKEN environment variable.\n",
                "secret": true
            }
        },
        "inputProperties": {
            "endpoint": {
                "type": "string",
                "description": "The Hetzner Cloud API endpoint, can be used to override the default API Endpoint https://api.hetzner.cloud/v1.\n"
            },
            "pollFunction": {
                "type": "string",
                "description": "The type of function to be used during the polling.\n"
            },
            "pollInterval": {
                "type": "string",
                "description": "The interval at which actions are polled by the client. Default `500ms`. Increase this interval if you run into rate\nlimiting errors.\n"
            },
            "token": {
                "type": "string",
                "description": "The Hetzner Cloud API token, can also be specified with the HCLOUD_TOKEN environment variable.\n",
                "secret": true
            }
        }
    },
    "resources": {
        "hcloud:index/certificate:Certificate": {
            "description": "Alias for `hcloud.UploadedCertificate` to remain backwards compatible.\nDeprecated.\n",
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "csharp": {
                            "name": "CertificateContents"
                        }
                    }
                },
                "created": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fingerprint": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "notValidAfter": {
                    "type": "string"
                },
                "notValidBefore": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string",
                    "secret": true
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "name",
                "notValidAfter",
                "notValidBefore",
                "privateKey",
                "type"
            ],
            "inputProperties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "csharp": {
                            "name": "CertificateContents"
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string",
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "certificate",
                "privateKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "language": {
                            "csharp": {
                                "name": "CertificateContents"
                            }
                        },
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "notValidAfter": {
                        "type": "string"
                    },
                    "notValidBefore": {
                        "type": "string"
                    },
                    "privateKey": {
                        "type": "string",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/firewall:Firewall": {
            "description": "Provides a Hetzner Cloud Firewall to represent a Firewall in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst myfirewall = new hcloud.Firewall(\"myfirewall\", {rules: [\n    {\n        direction: \"in\",\n        protocol: \"icmp\",\n        sourceIps: [\n            \"0.0.0.0/0\",\n            \"::/0\",\n        ],\n    },\n    {\n        direction: \"in\",\n        protocol: \"tcp\",\n        port: \"80-85\",\n        sourceIps: [\n            \"0.0.0.0/0\",\n            \"::/0\",\n        ],\n    },\n]});\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n    firewallIds: [myfirewall.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmyfirewall = hcloud.Firewall(\"myfirewall\", rules=[\n    hcloud.FirewallRuleArgs(\n        direction=\"in\",\n        protocol=\"icmp\",\n        source_ips=[\n            \"0.0.0.0/0\",\n            \"::/0\",\n        ],\n    ),\n    hcloud.FirewallRuleArgs(\n        direction=\"in\",\n        protocol=\"tcp\",\n        port=\"80-85\",\n        source_ips=[\n            \"0.0.0.0/0\",\n            \"::/0\",\n        ],\n    ),\n])\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\",\n    firewall_ids=[myfirewall.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myfirewall = new HCloud.Firewall(\"myfirewall\", new()\n    {\n        Rules = new[]\n        {\n            new HCloud.Inputs.FirewallRuleArgs\n            {\n                Direction = \"in\",\n                Protocol = \"icmp\",\n                SourceIps = new[]\n                {\n                    \"0.0.0.0/0\",\n                    \"::/0\",\n                },\n            },\n            new HCloud.Inputs.FirewallRuleArgs\n            {\n                Direction = \"in\",\n                Protocol = \"tcp\",\n                Port = \"80-85\",\n                SourceIps = new[]\n                {\n                    \"0.0.0.0/0\",\n                    \"::/0\",\n                },\n            },\n        },\n    });\n\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n        FirewallIds = new[]\n        {\n            myfirewall.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyfirewall, err := hcloud.NewFirewall(ctx, \"myfirewall\", \u0026hcloud.FirewallArgs{\n\t\t\tRules: hcloud.FirewallRuleArray{\n\t\t\t\t\u0026hcloud.FirewallRuleArgs{\n\t\t\t\t\tDirection: pulumi.String(\"in\"),\n\t\t\t\t\tProtocol:  pulumi.String(\"icmp\"),\n\t\t\t\t\tSourceIps: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026hcloud.FirewallRuleArgs{\n\t\t\t\t\tDirection: pulumi.String(\"in\"),\n\t\t\t\t\tProtocol:  pulumi.String(\"tcp\"),\n\t\t\t\t\tPort:      pulumi.String(\"80-85\"),\n\t\t\t\t\tSourceIps: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t\tpulumi.String(\"::/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-11\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tFirewallIds: pulumi.IntArray{\n\t\t\t\tmyfirewall.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Firewall;\nimport com.pulumi.hcloud.FirewallArgs;\nimport com.pulumi.hcloud.inputs.FirewallRuleArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myfirewall = new Firewall(\"myfirewall\", FirewallArgs.builder()        \n            .rules(            \n                FirewallRuleArgs.builder()\n                    .direction(\"in\")\n                    .protocol(\"icmp\")\n                    .sourceIps(                    \n                        \"0.0.0.0/0\",\n                        \"::/0\")\n                    .build(),\n                FirewallRuleArgs.builder()\n                    .direction(\"in\")\n                    .protocol(\"tcp\")\n                    .port(\"80-85\")\n                    .sourceIps(                    \n                        \"0.0.0.0/0\",\n                        \"::/0\")\n                    .build())\n            .build());\n\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .firewallIds(myfirewall.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myfirewall:\n    type: hcloud:Firewall\n    properties:\n      rules:\n        - direction: in\n          protocol: icmp\n          sourceIps:\n            - 0.0.0.0/0\n            - ::/0\n        - direction: in\n          protocol: tcp\n          port: 80-85\n          sourceIps:\n            - 0.0.0.0/0\n            - ::/0\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n      firewallIds:\n        - ${myfirewall.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nFirewalls can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/firewall:Firewall myfirewall id\n```\n\n ",
            "properties": {
                "applyTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/FirewallApplyTo:FirewallApplyTo"
                    },
                    "description": "Resources the firewall should be assigned to\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/FirewallRule:FirewallRule"
                    },
                    "description": "Configuration of a Rule from this Firewall.\n"
                }
            },
            "required": [
                "applyTos",
                "labels",
                "name"
            ],
            "inputProperties": {
                "applyTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/FirewallApplyTo:FirewallApplyTo"
                    },
                    "description": "Resources the firewall should be assigned to\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/FirewallRule:FirewallRule"
                    },
                    "description": "Configuration of a Rule from this Firewall.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Firewall resources.\n",
                "properties": {
                    "applyTos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/FirewallApplyTo:FirewallApplyTo"
                        },
                        "description": "Resources the firewall should be assigned to\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Firewall.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/FirewallRule:FirewallRule"
                        },
                        "description": "Configuration of a Rule from this Firewall.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/firewallAttachment:FirewallAttachment": {
            "description": "Attaches resource to a Hetzner Cloud Firewall.\n\n*Note*: only one `hcloud.FirewallAttachment` per Firewall is allowed.\nAny resources that should be attached to that Firewall need to be\nspecified in that `hcloud.FirewallAttachment`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Attach Servers\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst testServer = new hcloud.Server(\"testServer\", {\n    serverType: \"cx11\",\n    image: \"ubuntu-20.04\",\n});\nconst basicFirewall = new hcloud.Firewall(\"basicFirewall\", {});\nconst fwRef = new hcloud.FirewallAttachment(\"fwRef\", {\n    firewallId: basicFirewall.id,\n    serverIds: [testServer.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\ntest_server = hcloud.Server(\"testServer\",\n    server_type=\"cx11\",\n    image=\"ubuntu-20.04\")\nbasic_firewall = hcloud.Firewall(\"basicFirewall\")\nfw_ref = hcloud.FirewallAttachment(\"fwRef\",\n    firewall_id=basic_firewall.id,\n    server_ids=[test_server.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testServer = new HCloud.Server(\"testServer\", new()\n    {\n        ServerType = \"cx11\",\n        Image = \"ubuntu-20.04\",\n    });\n\n    var basicFirewall = new HCloud.Firewall(\"basicFirewall\");\n\n    var fwRef = new HCloud.FirewallAttachment(\"fwRef\", new()\n    {\n        FirewallId = basicFirewall.Id,\n        ServerIds = new[]\n        {\n            testServer.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestServer, err := hcloud.NewServer(ctx, \"testServer\", \u0026hcloud.ServerArgs{\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tImage:      pulumi.String(\"ubuntu-20.04\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbasicFirewall, err := hcloud.NewFirewall(ctx, \"basicFirewall\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewFirewallAttachment(ctx, \"fwRef\", \u0026hcloud.FirewallAttachmentArgs{\n\t\t\tFirewallId: basicFirewall.ID(),\n\t\t\tServerIds: pulumi.IntArray{\n\t\t\t\ttestServer.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.Firewall;\nimport com.pulumi.hcloud.FirewallAttachment;\nimport com.pulumi.hcloud.FirewallAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testServer = new Server(\"testServer\", ServerArgs.builder()        \n            .serverType(\"cx11\")\n            .image(\"ubuntu-20.04\")\n            .build());\n\n        var basicFirewall = new Firewall(\"basicFirewall\");\n\n        var fwRef = new FirewallAttachment(\"fwRef\", FirewallAttachmentArgs.builder()        \n            .firewallId(basicFirewall.id())\n            .serverIds(testServer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testServer:\n    type: hcloud:Server\n    properties:\n      serverType: cx11\n      image: ubuntu-20.04\n  basicFirewall:\n    type: hcloud:Firewall\n  fwRef:\n    type: hcloud:FirewallAttachment\n    properties:\n      firewallId: ${basicFirewall.id}\n      serverIds:\n        - ${testServer.id}\n```\n{{% /example %}}\n{{% example %}}\n### Attach Label Selectors\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst testServer = new hcloud.Server(\"testServer\", {\n    serverType: \"cx11\",\n    image: \"ubuntu-20.04\",\n    labels: {\n        \"firewall-attachment\": \"test-server\",\n    },\n});\nconst basicFirewall = new hcloud.Firewall(\"basicFirewall\", {});\nconst fwRef = new hcloud.FirewallAttachment(\"fwRef\", {\n    firewallId: basicFirewall.id,\n    labelSelectors: [\"firewall-attachment=test-server\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\ntest_server = hcloud.Server(\"testServer\",\n    server_type=\"cx11\",\n    image=\"ubuntu-20.04\",\n    labels={\n        \"firewall-attachment\": \"test-server\",\n    })\nbasic_firewall = hcloud.Firewall(\"basicFirewall\")\nfw_ref = hcloud.FirewallAttachment(\"fwRef\",\n    firewall_id=basic_firewall.id,\n    label_selectors=[\"firewall-attachment=test-server\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testServer = new HCloud.Server(\"testServer\", new()\n    {\n        ServerType = \"cx11\",\n        Image = \"ubuntu-20.04\",\n        Labels = \n        {\n            { \"firewall-attachment\", \"test-server\" },\n        },\n    });\n\n    var basicFirewall = new HCloud.Firewall(\"basicFirewall\");\n\n    var fwRef = new HCloud.FirewallAttachment(\"fwRef\", new()\n    {\n        FirewallId = basicFirewall.Id,\n        LabelSelectors = new[]\n        {\n            \"firewall-attachment=test-server\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.NewServer(ctx, \"testServer\", \u0026hcloud.ServerArgs{\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tImage:      pulumi.String(\"ubuntu-20.04\"),\n\t\t\tLabels: pulumi.Map{\n\t\t\t\t\"firewall-attachment\": pulumi.Any(\"test-server\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbasicFirewall, err := hcloud.NewFirewall(ctx, \"basicFirewall\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewFirewallAttachment(ctx, \"fwRef\", \u0026hcloud.FirewallAttachmentArgs{\n\t\t\tFirewallId: basicFirewall.ID(),\n\t\t\tLabelSelectors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"firewall-attachment=test-server\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.Firewall;\nimport com.pulumi.hcloud.FirewallAttachment;\nimport com.pulumi.hcloud.FirewallAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testServer = new Server(\"testServer\", ServerArgs.builder()        \n            .serverType(\"cx11\")\n            .image(\"ubuntu-20.04\")\n            .labels(Map.of(\"firewall-attachment\", \"test-server\"))\n            .build());\n\n        var basicFirewall = new Firewall(\"basicFirewall\");\n\n        var fwRef = new FirewallAttachment(\"fwRef\", FirewallAttachmentArgs.builder()        \n            .firewallId(basicFirewall.id())\n            .labelSelectors(\"firewall-attachment=test-server\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testServer:\n    type: hcloud:Server\n    properties:\n      serverType: cx11\n      image: ubuntu-20.04\n      labels:\n        firewall-attachment: test-server\n  basicFirewall:\n    type: hcloud:Firewall\n  fwRef:\n    type: hcloud:FirewallAttachment\n    properties:\n      firewallId: ${basicFirewall.id}\n      labelSelectors:\n        - firewall-attachment=test-server\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "firewallId": {
                    "type": "integer",
                    "description": "ID of the firewall the resources\nshould be attached to.\n"
                },
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label selectors used to\nselect resources to attach to the firewall.\n"
                },
                "serverIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of Server IDs to attach to the\nfirewall.\n"
                }
            },
            "required": [
                "firewallId"
            ],
            "inputProperties": {
                "firewallId": {
                    "type": "integer",
                    "description": "ID of the firewall the resources\nshould be attached to.\n",
                    "willReplaceOnChanges": true
                },
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label selectors used to\nselect resources to attach to the firewall.\n"
                },
                "serverIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of Server IDs to attach to the\nfirewall.\n"
                }
            },
            "requiredInputs": [
                "firewallId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallAttachment resources.\n",
                "properties": {
                    "firewallId": {
                        "type": "integer",
                        "description": "ID of the firewall the resources\nshould be attached to.\n",
                        "willReplaceOnChanges": true
                    },
                    "labelSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of label selectors used to\nselect resources to attach to the firewall.\n"
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of Server IDs to attach to the\nfirewall.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/floatingIp:FloatingIp": {
            "description": "Provides a Hetzner Cloud Floating IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n});\nconst master = new hcloud.FloatingIp(\"master\", {\n    type: \"ipv4\",\n    serverId: node1.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\")\nmaster = hcloud.FloatingIp(\"master\",\n    type=\"ipv4\",\n    server_id=node1.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n    });\n\n    var master = new HCloud.FloatingIp(\"master\", new()\n    {\n        Type = \"ipv4\",\n        ServerId = node1.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-11\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewFloatingIp(ctx, \"master\", \u0026hcloud.FloatingIpArgs{\n\t\t\tType:     pulumi.String(\"ipv4\"),\n\t\t\tServerId: node1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.FloatingIp;\nimport com.pulumi.hcloud.FloatingIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .build());\n\n        var master = new FloatingIp(\"master\", FloatingIpArgs.builder()        \n            .type(\"ipv4\")\n            .serverId(node1.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n  master:\n    type: hcloud:FloatingIp\n    properties:\n      type: ipv4\n      serverId: ${node1.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nFloating IPs can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/floatingIp:FloatingIp myip id\n```\n\n ",
            "properties": {
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Floating IP.\n"
                },
                "homeLocation": {
                    "type": "string",
                    "description": "Name of home location (routing is optimized for that location). Optional if server_id argument is passed.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "(string) IP Address of the Floating IP.\n"
                },
                "ipNetwork": {
                    "type": "string",
                    "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Floating IP. `ipv4` `ipv6`\n"
                }
            },
            "required": [
                "homeLocation",
                "ipAddress",
                "ipNetwork",
                "name",
                "serverId",
                "type"
            ],
            "inputProperties": {
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Floating IP.\n"
                },
                "homeLocation": {
                    "type": "string",
                    "description": "Name of home location (routing is optimized for that location). Optional if server_id argument is passed.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Floating IP. `ipv4` `ipv6`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FloatingIp resources.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Floating IP.\n"
                    },
                    "homeLocation": {
                        "type": "string",
                        "description": "Name of home location (routing is optimized for that location). Optional if server_id argument is passed.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(string) IP Address of the Floating IP.\n"
                    },
                    "ipNetwork": {
                        "type": "string",
                        "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Floating IP.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to assign the Floating IP to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Floating IP. `ipv4` `ipv6`\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/floatingIpAssignment:FloatingIpAssignment": {
            "description": "Provides a Hetzner Cloud Floating IP Assignment to assign a Floating IP to a Hetzner Cloud Server. Deleting a Floating IP Assignment will unassign the Floating IP from the Server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n    datacenter: \"fsn1-dc8\",\n});\nconst master = new hcloud.FloatingIp(\"master\", {\n    type: \"ipv4\",\n    homeLocation: \"nbg1\",\n});\nconst main = new hcloud.FloatingIpAssignment(\"main\", {\n    floatingIpId: master.id,\n    serverId: node1.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\",\n    datacenter=\"fsn1-dc8\")\nmaster = hcloud.FloatingIp(\"master\",\n    type=\"ipv4\",\n    home_location=\"nbg1\")\nmain = hcloud.FloatingIpAssignment(\"main\",\n    floating_ip_id=master.id,\n    server_id=node1.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n        Datacenter = \"fsn1-dc8\",\n    });\n\n    var master = new HCloud.FloatingIp(\"master\", new()\n    {\n        Type = \"ipv4\",\n        HomeLocation = \"nbg1\",\n    });\n\n    var main = new HCloud.FloatingIpAssignment(\"main\", new()\n    {\n        FloatingIpId = master.Id,\n        ServerId = node1.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-11\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tDatacenter: pulumi.String(\"fsn1-dc8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmaster, err := hcloud.NewFloatingIp(ctx, \"master\", \u0026hcloud.FloatingIpArgs{\n\t\t\tType:         pulumi.String(\"ipv4\"),\n\t\t\tHomeLocation: pulumi.String(\"nbg1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewFloatingIpAssignment(ctx, \"main\", \u0026hcloud.FloatingIpAssignmentArgs{\n\t\t\tFloatingIpId: master.ID(),\n\t\t\tServerId:     node1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.FloatingIp;\nimport com.pulumi.hcloud.FloatingIpArgs;\nimport com.pulumi.hcloud.FloatingIpAssignment;\nimport com.pulumi.hcloud.FloatingIpAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .datacenter(\"fsn1-dc8\")\n            .build());\n\n        var master = new FloatingIp(\"master\", FloatingIpArgs.builder()        \n            .type(\"ipv4\")\n            .homeLocation(\"nbg1\")\n            .build());\n\n        var main = new FloatingIpAssignment(\"main\", FloatingIpAssignmentArgs.builder()        \n            .floatingIpId(master.id())\n            .serverId(node1.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: hcloud:FloatingIpAssignment\n    properties:\n      floatingIpId: ${master.id}\n      serverId: ${node1.id}\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n      datacenter: fsn1-dc8\n  master:\n    type: hcloud:FloatingIp\n    properties:\n      type: ipv4\n      homeLocation: nbg1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nFloating IP Assignments can be imported using the `floating_ip_id`\n\n```sh\n $ pulumi import hcloud:index/floatingIpAssignment:FloatingIpAssignment myfloatingipassignment \u003cfloating_ip_id\u003e\n```\n\n ",
            "properties": {
                "floatingIpId": {
                    "type": "integer",
                    "description": "ID of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                }
            },
            "required": [
                "floatingIpId",
                "serverId"
            ],
            "inputProperties": {
                "floatingIpId": {
                    "type": "integer",
                    "description": "ID of the Floating IP.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                }
            },
            "requiredInputs": [
                "floatingIpId",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FloatingIpAssignment resources.\n",
                "properties": {
                    "floatingIpId": {
                        "type": "integer",
                        "description": "ID of the Floating IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to assign the Floating IP to.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancer:LoadBalancer": {
            "description": "Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst myserver = new hcloud.Server(\"myserver\", {\n    serverType: \"cx11\",\n    image: \"ubuntu-18.04\",\n});\nconst loadBalancer = new hcloud.LoadBalancer(\"loadBalancer\", {\n    loadBalancerType: \"lb11\",\n    location: \"nbg1\",\n    targets: [{\n        type: \"server\",\n        serverId: myserver.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmyserver = hcloud.Server(\"myserver\",\n    server_type=\"cx11\",\n    image=\"ubuntu-18.04\")\nload_balancer = hcloud.LoadBalancer(\"loadBalancer\",\n    load_balancer_type=\"lb11\",\n    location=\"nbg1\",\n    targets=[hcloud.LoadBalancerTargetArgs(\n        type=\"server\",\n        server_id=myserver.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myserver = new HCloud.Server(\"myserver\", new()\n    {\n        ServerType = \"cx11\",\n        Image = \"ubuntu-18.04\",\n    });\n\n    var loadBalancer = new HCloud.LoadBalancer(\"loadBalancer\", new()\n    {\n        LoadBalancerType = \"lb11\",\n        Location = \"nbg1\",\n        Targets = new[]\n        {\n            new HCloud.Inputs.LoadBalancerTargetArgs\n            {\n                Type = \"server\",\n                ServerId = myserver.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyserver, err := hcloud.NewServer(ctx, \"myserver\", \u0026hcloud.ServerArgs{\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tImage:      pulumi.String(\"ubuntu-18.04\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewLoadBalancer(ctx, \"loadBalancer\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tLocation:         pulumi.String(\"nbg1\"),\n\t\t\tTargets: hcloud.LoadBalancerTargetTypeArray{\n\t\t\t\t\u0026hcloud.LoadBalancerTargetTypeArgs{\n\t\t\t\t\tType:     pulumi.String(\"server\"),\n\t\t\t\t\tServerId: myserver.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.LoadBalancer;\nimport com.pulumi.hcloud.LoadBalancerArgs;\nimport com.pulumi.hcloud.inputs.LoadBalancerTargetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myserver = new Server(\"myserver\", ServerArgs.builder()        \n            .serverType(\"cx11\")\n            .image(\"ubuntu-18.04\")\n            .build());\n\n        var loadBalancer = new LoadBalancer(\"loadBalancer\", LoadBalancerArgs.builder()        \n            .loadBalancerType(\"lb11\")\n            .location(\"nbg1\")\n            .targets(LoadBalancerTargetArgs.builder()\n                .type(\"server\")\n                .serverId(myserver.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myserver:\n    type: hcloud:Server\n    properties:\n      serverType: cx11\n      image: ubuntu-18.04\n  loadBalancer:\n    type: hcloud:LoadBalancer\n    properties:\n      loadBalancerType: lb11\n      location: nbg1\n      targets:\n        - type: server\n          serverId: ${myserver.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLoad Balancers can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/loadBalancer:LoadBalancer my_load_balancer id\n```\n\n ",
            "properties": {
                "algorithm": {
                    "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                    "description": "Configuration of the algorithm the Load Balancer use.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "(string) IPv4 Address of the Load Balancer.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "(string) IPv6 Address of the Load Balancer.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "loadBalancerType": {
                    "type": "string",
                    "description": "Type of the Load Balancer.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name of the Load Balancer. Require when no network_zone is set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Load Balancer.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "(int) ID of the first private network that this Load Balancer is connected to.\n"
                },
                "networkIp": {
                    "type": "string",
                    "description": "(string) IP of the Load Balancer in the first private network that it is connected to.\n"
                },
                "networkZone": {
                    "type": "string",
                    "description": "The Network Zone of the Load Balancer. Require when no location is set.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                    },
                    "deprecationMessage": "Use hcloud_load_balancer_target resource instead. This allows the full control over the selected targets."
                }
            },
            "required": [
                "algorithm",
                "ipv4",
                "ipv6",
                "labels",
                "loadBalancerType",
                "location",
                "name",
                "networkId",
                "networkIp",
                "networkZone",
                "targets"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                    "description": "Configuration of the algorithm the Load Balancer use.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "loadBalancerType": {
                    "type": "string",
                    "description": "Type of the Load Balancer.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name of the Load Balancer. Require when no network_zone is set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Load Balancer.\n"
                },
                "networkZone": {
                    "type": "string",
                    "description": "The Network Zone of the Load Balancer. Require when no location is set.\n",
                    "willReplaceOnChanges": true
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                    },
                    "deprecationMessage": "Use hcloud_load_balancer_target resource instead. This allows the full control over the selected targets."
                }
            },
            "requiredInputs": [
                "loadBalancerType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancer resources.\n",
                "properties": {
                    "algorithm": {
                        "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                        "description": "Configuration of the algorithm the Load Balancer use.\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "(string) IPv6 Address of the Load Balancer.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "loadBalancerType": {
                        "type": "string",
                        "description": "Type of the Load Balancer.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location name of the Load Balancer. Require when no network_zone is set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Load Balancer.\n"
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "(int) ID of the first private network that this Load Balancer is connected to.\n"
                    },
                    "networkIp": {
                        "type": "string",
                        "description": "(string) IP of the Load Balancer in the first private network that it is connected to.\n"
                    },
                    "networkZone": {
                        "type": "string",
                        "description": "The Network Zone of the Load Balancer. Require when no location is set.\n",
                        "willReplaceOnChanges": true
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                        },
                        "deprecationMessage": "Use hcloud_load_balancer_target resource instead. This allows the full control over the selected targets."
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerNetwork:LoadBalancerNetwork": {
            "description": "Provides a Hetzner Cloud Load Balancer Network to represent a private network on a Load Balancer in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst lb1 = new hcloud.LoadBalancer(\"lb1\", {\n    loadBalancerType: \"lb11\",\n    networkZone: \"eu-central\",\n});\nconst mynet = new hcloud.Network(\"mynet\", {ipRange: \"10.0.0.0/8\"});\nconst foonet = new hcloud.NetworkSubnet(\"foonet\", {\n    networkId: mynet.id,\n    type: \"cloud\",\n    networkZone: \"eu-central\",\n    ipRange: \"10.0.1.0/24\",\n});\nconst srvnetwork = new hcloud.LoadBalancerNetwork(\"srvnetwork\", {\n    loadBalancerId: lb1.id,\n    networkId: mynet.id,\n    ip: \"10.0.1.5\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nlb1 = hcloud.LoadBalancer(\"lb1\",\n    load_balancer_type=\"lb11\",\n    network_zone=\"eu-central\")\nmynet = hcloud.Network(\"mynet\", ip_range=\"10.0.0.0/8\")\nfoonet = hcloud.NetworkSubnet(\"foonet\",\n    network_id=mynet.id,\n    type=\"cloud\",\n    network_zone=\"eu-central\",\n    ip_range=\"10.0.1.0/24\")\nsrvnetwork = hcloud.LoadBalancerNetwork(\"srvnetwork\",\n    load_balancer_id=lb1.id,\n    network_id=mynet.id,\n    ip=\"10.0.1.5\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lb1 = new HCloud.LoadBalancer(\"lb1\", new()\n    {\n        LoadBalancerType = \"lb11\",\n        NetworkZone = \"eu-central\",\n    });\n\n    var mynet = new HCloud.Network(\"mynet\", new()\n    {\n        IpRange = \"10.0.0.0/8\",\n    });\n\n    var foonet = new HCloud.NetworkSubnet(\"foonet\", new()\n    {\n        NetworkId = mynet.Id,\n        Type = \"cloud\",\n        NetworkZone = \"eu-central\",\n        IpRange = \"10.0.1.0/24\",\n    });\n\n    var srvnetwork = new HCloud.LoadBalancerNetwork(\"srvnetwork\", new()\n    {\n        LoadBalancerId = lb1.Id,\n        NetworkId = mynet.Id,\n        Ip = \"10.0.1.5\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlb1, err := hcloud.NewLoadBalancer(ctx, \"lb1\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tNetworkZone:      pulumi.String(\"eu-central\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmynet, err := hcloud.NewNetwork(ctx, \"mynet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkSubnet(ctx, \"foonet\", \u0026hcloud.NetworkSubnetArgs{\n\t\t\tNetworkId:   mynet.ID(),\n\t\t\tType:        pulumi.String(\"cloud\"),\n\t\t\tNetworkZone: pulumi.String(\"eu-central\"),\n\t\t\tIpRange:     pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewLoadBalancerNetwork(ctx, \"srvnetwork\", \u0026hcloud.LoadBalancerNetworkArgs{\n\t\t\tLoadBalancerId: lb1.ID(),\n\t\t\tNetworkId:      mynet.ID(),\n\t\t\tIp:             pulumi.String(\"10.0.1.5\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.LoadBalancer;\nimport com.pulumi.hcloud.LoadBalancerArgs;\nimport com.pulumi.hcloud.Network;\nimport com.pulumi.hcloud.NetworkArgs;\nimport com.pulumi.hcloud.NetworkSubnet;\nimport com.pulumi.hcloud.NetworkSubnetArgs;\nimport com.pulumi.hcloud.LoadBalancerNetwork;\nimport com.pulumi.hcloud.LoadBalancerNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var lb1 = new LoadBalancer(\"lb1\", LoadBalancerArgs.builder()        \n            .loadBalancerType(\"lb11\")\n            .networkZone(\"eu-central\")\n            .build());\n\n        var mynet = new Network(\"mynet\", NetworkArgs.builder()        \n            .ipRange(\"10.0.0.0/8\")\n            .build());\n\n        var foonet = new NetworkSubnet(\"foonet\", NetworkSubnetArgs.builder()        \n            .networkId(mynet.id())\n            .type(\"cloud\")\n            .networkZone(\"eu-central\")\n            .ipRange(\"10.0.1.0/24\")\n            .build());\n\n        var srvnetwork = new LoadBalancerNetwork(\"srvnetwork\", LoadBalancerNetworkArgs.builder()        \n            .loadBalancerId(lb1.id())\n            .networkId(mynet.id())\n            .ip(\"10.0.1.5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lb1:\n    type: hcloud:LoadBalancer\n    properties:\n      loadBalancerType: lb11\n      networkZone: eu-central\n  mynet:\n    type: hcloud:Network\n    properties:\n      ipRange: 10.0.0.0/8\n  foonet:\n    type: hcloud:NetworkSubnet\n    properties:\n      networkId: ${mynet.id}\n      type: cloud\n      networkZone: eu-central\n      ipRange: 10.0.1.0/24\n  srvnetwork:\n    type: hcloud:LoadBalancerNetwork\n    properties:\n      loadBalancerId: ${lb1.id}\n      networkId: ${mynet.id}\n      ip: 10.0.1.5\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLoad Balancer Network entries can be imported using a compound ID with the following format`\u003cload-balancer-id\u003e-\u003cnetwork-id\u003e`\n\n```sh\n $ pulumi import hcloud:index/loadBalancerNetwork:LoadBalancerNetwork myloadbalancernetwork 123-654\n```\n\n ",
            "properties": {
                "enablePublicInterface": {
                    "type": "boolean",
                    "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n"
                }
            },
            "required": [
                "ip",
                "loadBalancerId"
            ],
            "inputProperties": {
                "enablePublicInterface": {
                    "type": "boolean",
                    "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer.\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "loadBalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerNetwork resources.\n",
                "properties": {
                    "enablePublicInterface": {
                        "type": "boolean",
                        "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerId": {
                        "type": "integer",
                        "description": "ID of the Load Balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerService:LoadBalancerService": {
            "description": "Define services for Hetzner Cloud Load Balancers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst loadBalancer = new hcloud.LoadBalancer(\"loadBalancer\", {\n    loadBalancerType: \"lb11\",\n    location: \"nbg1\",\n});\nconst loadBalancerService = new hcloud.LoadBalancerService(\"loadBalancerService\", {\n    loadBalancerId: loadBalancer.id,\n    protocol: \"http\",\n    http: {\n        stickySessions: true,\n        cookieName: \"EXAMPLE_STICKY\",\n    },\n    healthCheck: {\n        protocol: \"http\",\n        port: 80,\n        interval: 10,\n        timeout: 5,\n        http: {\n            domain: \"example.com\",\n            path: \"/healthz\",\n            response: \"OK\",\n            tls: true,\n            statusCodes: [\"200\"],\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nload_balancer = hcloud.LoadBalancer(\"loadBalancer\",\n    load_balancer_type=\"lb11\",\n    location=\"nbg1\")\nload_balancer_service = hcloud.LoadBalancerService(\"loadBalancerService\",\n    load_balancer_id=load_balancer.id,\n    protocol=\"http\",\n    http=hcloud.LoadBalancerServiceHttpArgs(\n        sticky_sessions=True,\n        cookie_name=\"EXAMPLE_STICKY\",\n    ),\n    health_check=hcloud.LoadBalancerServiceHealthCheckArgs(\n        protocol=\"http\",\n        port=80,\n        interval=10,\n        timeout=5,\n        http=hcloud.LoadBalancerServiceHealthCheckHttpArgs(\n            domain=\"example.com\",\n            path=\"/healthz\",\n            response=\"OK\",\n            tls=True,\n            status_codes=[\"200\"],\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var loadBalancer = new HCloud.LoadBalancer(\"loadBalancer\", new()\n    {\n        LoadBalancerType = \"lb11\",\n        Location = \"nbg1\",\n    });\n\n    var loadBalancerService = new HCloud.LoadBalancerService(\"loadBalancerService\", new()\n    {\n        LoadBalancerId = loadBalancer.Id,\n        Protocol = \"http\",\n        Http = new HCloud.Inputs.LoadBalancerServiceHttpArgs\n        {\n            StickySessions = true,\n            CookieName = \"EXAMPLE_STICKY\",\n        },\n        HealthCheck = new HCloud.Inputs.LoadBalancerServiceHealthCheckArgs\n        {\n            Protocol = \"http\",\n            Port = 80,\n            Interval = 10,\n            Timeout = 5,\n            Http = new HCloud.Inputs.LoadBalancerServiceHealthCheckHttpArgs\n            {\n                Domain = \"example.com\",\n                Path = \"/healthz\",\n                Response = \"OK\",\n                Tls = true,\n                StatusCodes = new[]\n                {\n                    \"200\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tloadBalancer, err := hcloud.NewLoadBalancer(ctx, \"loadBalancer\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tLocation:         pulumi.String(\"nbg1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewLoadBalancerService(ctx, \"loadBalancerService\", \u0026hcloud.LoadBalancerServiceArgs{\n\t\t\tLoadBalancerId: loadBalancer.ID(),\n\t\t\tProtocol:       pulumi.String(\"http\"),\n\t\t\tHttp: \u0026hcloud.LoadBalancerServiceHttpArgs{\n\t\t\t\tStickySessions: pulumi.Bool(true),\n\t\t\t\tCookieName:     pulumi.String(\"EXAMPLE_STICKY\"),\n\t\t\t},\n\t\t\tHealthCheck: \u0026hcloud.LoadBalancerServiceHealthCheckArgs{\n\t\t\t\tProtocol: pulumi.String(\"http\"),\n\t\t\t\tPort:     pulumi.Int(80),\n\t\t\t\tInterval: pulumi.Int(10),\n\t\t\t\tTimeout:  pulumi.Int(5),\n\t\t\t\tHttp: \u0026hcloud.LoadBalancerServiceHealthCheckHttpArgs{\n\t\t\t\t\tDomain:   pulumi.String(\"example.com\"),\n\t\t\t\t\tPath:     pulumi.String(\"/healthz\"),\n\t\t\t\t\tResponse: pulumi.String(\"OK\"),\n\t\t\t\t\tTls:      pulumi.Bool(true),\n\t\t\t\t\tStatusCodes: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"200\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.LoadBalancer;\nimport com.pulumi.hcloud.LoadBalancerArgs;\nimport com.pulumi.hcloud.LoadBalancerService;\nimport com.pulumi.hcloud.LoadBalancerServiceArgs;\nimport com.pulumi.hcloud.inputs.LoadBalancerServiceHttpArgs;\nimport com.pulumi.hcloud.inputs.LoadBalancerServiceHealthCheckArgs;\nimport com.pulumi.hcloud.inputs.LoadBalancerServiceHealthCheckHttpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var loadBalancer = new LoadBalancer(\"loadBalancer\", LoadBalancerArgs.builder()        \n            .loadBalancerType(\"lb11\")\n            .location(\"nbg1\")\n            .build());\n\n        var loadBalancerService = new LoadBalancerService(\"loadBalancerService\", LoadBalancerServiceArgs.builder()        \n            .loadBalancerId(loadBalancer.id())\n            .protocol(\"http\")\n            .http(LoadBalancerServiceHttpArgs.builder()\n                .stickySessions(true)\n                .cookieName(\"EXAMPLE_STICKY\")\n                .build())\n            .healthCheck(LoadBalancerServiceHealthCheckArgs.builder()\n                .protocol(\"http\")\n                .port(80)\n                .interval(10)\n                .timeout(5)\n                .http(LoadBalancerServiceHealthCheckHttpArgs.builder()\n                    .domain(\"example.com\")\n                    .path(\"/healthz\")\n                    .response(\"OK\")\n                    .tls(true)\n                    .statusCodes(\"200\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  loadBalancer:\n    type: hcloud:LoadBalancer\n    properties:\n      loadBalancerType: lb11\n      location: nbg1\n  loadBalancerService:\n    type: hcloud:LoadBalancerService\n    properties:\n      loadBalancerId: ${loadBalancer.id}\n      protocol: http\n      http:\n        stickySessions: true\n        cookieName: EXAMPLE_STICKY\n      healthCheck:\n        protocol: http\n        port: 80\n        interval: 10\n        timeout: 5\n        http:\n          domain: example.com\n          path: /healthz\n          response: OK\n          tls: true\n          statusCodes:\n            - '200'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLoad Balancer Service entries can be imported using a compound ID with the following format`\u003cload-balancer-id\u003e__\u003clisten-port\u003e`\n\n```sh\n $ pulumi import hcloud:index/loadBalancerService:LoadBalancerService myloadbalancernetwork 123__80\n```\n\n ",
            "properties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                    "description": "Health Check configuration when `protocol` is `http` or `https`.\n"
                },
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                    "description": "HTTP configuration when `protocol` is `http` or `https`.\n"
                },
                "listenPort": {
                    "type": "integer",
                    "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "Id of the load balancer this service belongs to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the service. `http`, `https` or `tcp`\n"
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "Enable proxyprotocol.\n"
                }
            },
            "required": [
                "destinationPort",
                "healthCheck",
                "http",
                "listenPort",
                "loadBalancerId",
                "protocol",
                "proxyprotocol"
            ],
            "inputProperties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                    "description": "Health Check configuration when `protocol` is `http` or `https`.\n"
                },
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                    "description": "HTTP configuration when `protocol` is `http` or `https`.\n"
                },
                "listenPort": {
                    "type": "integer",
                    "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "Id of the load balancer this service belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the service. `http`, `https` or `tcp`\n",
                    "willReplaceOnChanges": true
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "Enable proxyprotocol.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerService resources.\n",
                "properties": {
                    "destinationPort": {
                        "type": "integer",
                        "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                        "description": "Health Check configuration when `protocol` is `http` or `https`.\n"
                    },
                    "http": {
                        "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                        "description": "HTTP configuration when `protocol` is `http` or `https`.\n"
                    },
                    "listenPort": {
                        "type": "integer",
                        "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "Id of the load balancer this service belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol of the service. `http`, `https` or `tcp`\n",
                        "willReplaceOnChanges": true
                    },
                    "proxyprotocol": {
                        "type": "boolean",
                        "description": "Enable proxyprotocol.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerTarget:LoadBalancerTarget": {
            "description": "Adds a target to a Hetzner Cloud Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst myServer = new hcloud.Server(\"myServer\", {\n    serverType: \"cx11\",\n    image: \"ubuntu-18.04\",\n});\nconst loadBalancer = new hcloud.LoadBalancer(\"loadBalancer\", {\n    loadBalancerType: \"lb11\",\n    location: \"nbg1\",\n});\nconst loadBalancerTarget = new hcloud.LoadBalancerTarget(\"loadBalancerTarget\", {\n    type: \"server\",\n    loadBalancerId: loadBalancer.id,\n    serverId: myServer.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmy_server = hcloud.Server(\"myServer\",\n    server_type=\"cx11\",\n    image=\"ubuntu-18.04\")\nload_balancer = hcloud.LoadBalancer(\"loadBalancer\",\n    load_balancer_type=\"lb11\",\n    location=\"nbg1\")\nload_balancer_target = hcloud.LoadBalancerTarget(\"loadBalancerTarget\",\n    type=\"server\",\n    load_balancer_id=load_balancer.id,\n    server_id=my_server.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myServer = new HCloud.Server(\"myServer\", new()\n    {\n        ServerType = \"cx11\",\n        Image = \"ubuntu-18.04\",\n    });\n\n    var loadBalancer = new HCloud.LoadBalancer(\"loadBalancer\", new()\n    {\n        LoadBalancerType = \"lb11\",\n        Location = \"nbg1\",\n    });\n\n    var loadBalancerTarget = new HCloud.LoadBalancerTarget(\"loadBalancerTarget\", new()\n    {\n        Type = \"server\",\n        LoadBalancerId = loadBalancer.Id,\n        ServerId = myServer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyServer, err := hcloud.NewServer(ctx, \"myServer\", \u0026hcloud.ServerArgs{\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tImage:      pulumi.String(\"ubuntu-18.04\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tloadBalancer, err := hcloud.NewLoadBalancer(ctx, \"loadBalancer\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tLocation:         pulumi.String(\"nbg1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewLoadBalancerTarget(ctx, \"loadBalancerTarget\", \u0026hcloud.LoadBalancerTargetArgs{\n\t\t\tType:           pulumi.String(\"server\"),\n\t\t\tLoadBalancerId: loadBalancer.ID(),\n\t\t\tServerId:       myServer.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.LoadBalancer;\nimport com.pulumi.hcloud.LoadBalancerArgs;\nimport com.pulumi.hcloud.LoadBalancerTarget;\nimport com.pulumi.hcloud.LoadBalancerTargetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myServer = new Server(\"myServer\", ServerArgs.builder()        \n            .serverType(\"cx11\")\n            .image(\"ubuntu-18.04\")\n            .build());\n\n        var loadBalancer = new LoadBalancer(\"loadBalancer\", LoadBalancerArgs.builder()        \n            .loadBalancerType(\"lb11\")\n            .location(\"nbg1\")\n            .build());\n\n        var loadBalancerTarget = new LoadBalancerTarget(\"loadBalancerTarget\", LoadBalancerTargetArgs.builder()        \n            .type(\"server\")\n            .loadBalancerId(loadBalancer.id())\n            .serverId(myServer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myServer:\n    type: hcloud:Server\n    properties:\n      serverType: cx11\n      image: ubuntu-18.04\n  loadBalancer:\n    type: hcloud:LoadBalancer\n    properties:\n      loadBalancerType: lb11\n      location: nbg1\n  loadBalancerTarget:\n    type: hcloud:LoadBalancerTarget\n    properties:\n      type: server\n      loadBalancerId: ${loadBalancer.id}\n      serverId: ${myServer.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLoad Balancer Target entries can be imported using a compound ID with the following format`\u003cload-balancer-id\u003e__\u003ctype\u003e__\u003cidentifier\u003e` Where _identifier_ depends on the _type_- `server`server id, for example`123` - `label_selector`label selector, for example`foo=bar` - `ip`ip address, for example`203.0.113.123`\n\n```sh\n $ pulumi import hcloud:index/loadBalancerTarget:LoadBalancerTarget myloadbalancerservertarget 123__server__321\n```\n\n\n\n```sh\n $ pulumi import hcloud:index/loadBalancerTarget:LoadBalancerTarget myloadbalancerlabeltarget 123__label_selector__foo=bar\n```\n\n\n\n```sh\n $ pulumi import hcloud:index/loadBalancerTarget:LoadBalancerTarget myloadbalanceriptarget 123__ip__203.0.113.123\n```\n\n ",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer to which\nthe target gets attached.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                }
            },
            "required": [
                "loadBalancerId",
                "type",
                "usePrivateIp"
            ],
            "inputProperties": {
                "ip": {
                    "type": "string",
                    "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n",
                    "willReplaceOnChanges": true
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer to which\nthe target gets attached.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerTarget resources.\n",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n",
                        "willReplaceOnChanges": true
                    },
                    "labelSelector": {
                        "type": "string",
                        "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerId": {
                        "type": "integer",
                        "description": "ID of the Load Balancer to which\nthe target gets attached.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                    },
                    "usePrivateIp": {
                        "type": "boolean",
                        "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/managedCertificate:ManagedCertificate": {
            "description": "Obtain a Hetzner Cloud managed TLS certificate.\n\n\n## Import\n\nManaged certificates can be imported using their `id`hcl\n\n```sh\n $ pulumi import hcloud:index/managedCertificate:ManagedCertificate sample_certificate id\n```\n\n ",
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "(string) PEM encoded TLS certificate.\n"
                },
                "created": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domain names for which a certificate\nshould be obtained.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "(string) Fingerprint of the certificate.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "name",
                "notValidAfter",
                "notValidBefore",
                "type"
            ],
            "inputProperties": {
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domain names for which a certificate\nshould be obtained.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                }
            },
            "requiredInputs": [
                "domainNames"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedCertificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "(string) PEM encoded TLS certificate.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Domain names for which a certificate\nshould be obtained.\n",
                        "willReplaceOnChanges": true
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the certificate.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Certificate.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/network:Network": {
            "description": "Provides a Hetzner Cloud Network to represent a Network in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst privNet = new hcloud.Network(\"privNet\", {ipRange: \"10.0.1.0/24\"});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\npriv_net = hcloud.Network(\"privNet\", ip_range=\"10.0.1.0/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var privNet = new HCloud.Network(\"privNet\", new()\n    {\n        IpRange = \"10.0.1.0/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.NewNetwork(ctx, \"privNet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Network;\nimport com.pulumi.hcloud.NetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var privNet = new Network(\"privNet\", NetworkArgs.builder()        \n            .ipRange(\"10.0.1.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  privNet:\n    type: hcloud:Network\n    properties:\n      ipRange: 10.0.1.0/24\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetworks can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/network:Network myip id\n```\n\n ",
            "properties": {
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "exposeRoutesToVswitch": {
                    "type": "boolean",
                    "description": "Enable or disable exposing the routes to the vSwitch connection. The exposing only takes effect if a vSwitch connection is active.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network to create (must be unique per project).\n"
                }
            },
            "required": [
                "ipRange",
                "name"
            ],
            "inputProperties": {
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "exposeRoutesToVswitch": {
                    "type": "boolean",
                    "description": "Enable or disable exposing the routes to the vSwitch connection. The exposing only takes effect if a vSwitch connection is active.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network to create (must be unique per project).\n"
                }
            },
            "requiredInputs": [
                "ipRange"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n"
                    },
                    "exposeRoutesToVswitch": {
                        "type": "boolean",
                        "description": "Enable or disable exposing the routes to the vSwitch connection. The exposing only takes effect if a vSwitch connection is active.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network to create (must be unique per project).\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/networkRoute:NetworkRoute": {
            "description": "Provides a Hetzner Cloud Network Route to represent a Network route in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst mynet = new hcloud.Network(\"mynet\", {ipRange: \"10.0.0.0/8\"});\nconst privNet = new hcloud.NetworkRoute(\"privNet\", {\n    networkId: mynet.id,\n    destination: \"10.100.1.0/24\",\n    gateway: \"10.0.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmynet = hcloud.Network(\"mynet\", ip_range=\"10.0.0.0/8\")\npriv_net = hcloud.NetworkRoute(\"privNet\",\n    network_id=mynet.id,\n    destination=\"10.100.1.0/24\",\n    gateway=\"10.0.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mynet = new HCloud.Network(\"mynet\", new()\n    {\n        IpRange = \"10.0.0.0/8\",\n    });\n\n    var privNet = new HCloud.NetworkRoute(\"privNet\", new()\n    {\n        NetworkId = mynet.Id,\n        Destination = \"10.100.1.0/24\",\n        Gateway = \"10.0.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmynet, err := hcloud.NewNetwork(ctx, \"mynet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkRoute(ctx, \"privNet\", \u0026hcloud.NetworkRouteArgs{\n\t\t\tNetworkId:   mynet.ID(),\n\t\t\tDestination: pulumi.String(\"10.100.1.0/24\"),\n\t\t\tGateway:     pulumi.String(\"10.0.1.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Network;\nimport com.pulumi.hcloud.NetworkArgs;\nimport com.pulumi.hcloud.NetworkRoute;\nimport com.pulumi.hcloud.NetworkRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mynet = new Network(\"mynet\", NetworkArgs.builder()        \n            .ipRange(\"10.0.0.0/8\")\n            .build());\n\n        var privNet = new NetworkRoute(\"privNet\", NetworkRouteArgs.builder()        \n            .networkId(mynet.id())\n            .destination(\"10.100.1.0/24\")\n            .gateway(\"10.0.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mynet:\n    type: hcloud:Network\n    properties:\n      ipRange: 10.0.0.0/8\n  privNet:\n    type: hcloud:NetworkRoute\n    properties:\n      networkId: ${mynet.id}\n      destination: 10.100.1.0/24\n      gateway: 10.0.1.1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetwork Route entries can be imported using a compound ID with the following format`\u003cnetwork-id\u003e-\u003cdestination\u003e`\n\n```sh\n $ pulumi import hcloud:index/networkRoute:NetworkRoute myroute 123-10.0.0.0/16\n```\n\n ",
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the route should be added to.\n"
                }
            },
            "required": [
                "destination",
                "gateway",
                "networkId"
            ],
            "inputProperties": {
                "destination": {
                    "type": "string",
                    "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n",
                    "willReplaceOnChanges": true
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the route should be added to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "destination",
                "gateway",
                "networkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkRoute resources.\n",
                "properties": {
                    "destination": {
                        "type": "string",
                        "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the Network the route should be added to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/networkSubnet:NetworkSubnet": {
            "description": "Provides a Hetzner Cloud Network Subnet to represent a Subnet in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst mynet = new hcloud.Network(\"mynet\", {ipRange: \"10.0.0.0/8\"});\nconst foonet = new hcloud.NetworkSubnet(\"foonet\", {\n    networkId: mynet.id,\n    type: \"cloud\",\n    networkZone: \"eu-central\",\n    ipRange: \"10.0.1.0/24\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmynet = hcloud.Network(\"mynet\", ip_range=\"10.0.0.0/8\")\nfoonet = hcloud.NetworkSubnet(\"foonet\",\n    network_id=mynet.id,\n    type=\"cloud\",\n    network_zone=\"eu-central\",\n    ip_range=\"10.0.1.0/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mynet = new HCloud.Network(\"mynet\", new()\n    {\n        IpRange = \"10.0.0.0/8\",\n    });\n\n    var foonet = new HCloud.NetworkSubnet(\"foonet\", new()\n    {\n        NetworkId = mynet.Id,\n        Type = \"cloud\",\n        NetworkZone = \"eu-central\",\n        IpRange = \"10.0.1.0/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmynet, err := hcloud.NewNetwork(ctx, \"mynet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkSubnet(ctx, \"foonet\", \u0026hcloud.NetworkSubnetArgs{\n\t\t\tNetworkId:   mynet.ID(),\n\t\t\tType:        pulumi.String(\"cloud\"),\n\t\t\tNetworkZone: pulumi.String(\"eu-central\"),\n\t\t\tIpRange:     pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Network;\nimport com.pulumi.hcloud.NetworkArgs;\nimport com.pulumi.hcloud.NetworkSubnet;\nimport com.pulumi.hcloud.NetworkSubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mynet = new Network(\"mynet\", NetworkArgs.builder()        \n            .ipRange(\"10.0.0.0/8\")\n            .build());\n\n        var foonet = new NetworkSubnet(\"foonet\", NetworkSubnetArgs.builder()        \n            .networkId(mynet.id())\n            .type(\"cloud\")\n            .networkZone(\"eu-central\")\n            .ipRange(\"10.0.1.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mynet:\n    type: hcloud:Network\n    properties:\n      ipRange: 10.0.0.0/8\n  foonet:\n    type: hcloud:NetworkSubnet\n    properties:\n      networkId: ${mynet.id}\n      type: cloud\n      networkZone: eu-central\n      ipRange: 10.0.1.0/24\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetwork Subnet entries can be imported using a compound ID with the following format`\u003cnetwork-id\u003e-\u003cip_range\u003e`\n\n```sh\n $ pulumi import hcloud:index/networkSubnet:NetworkSubnet mysubnet 123-10.0.0.0/24\n```\n\n ",
            "properties": {
                "gateway": {
                    "type": "string"
                },
                "ipRange": {
                    "type": "string",
                    "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the subnet should be added to.\n"
                },
                "networkZone": {
                    "type": "string",
                    "description": "Name of network zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of subnet. `server`, `cloud` or `vswitch`\n"
                },
                "vswitchId": {
                    "type": "integer",
                    "description": "ID of the vswitch, Required if type is `vswitch`\n"
                }
            },
            "required": [
                "gateway",
                "ipRange",
                "networkId",
                "networkZone",
                "type"
            ],
            "inputProperties": {
                "ipRange": {
                    "type": "string",
                    "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the subnet should be added to.\n",
                    "willReplaceOnChanges": true
                },
                "networkZone": {
                    "type": "string",
                    "description": "Name of network zone.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of subnet. `server`, `cloud` or `vswitch`\n",
                    "willReplaceOnChanges": true
                },
                "vswitchId": {
                    "type": "integer",
                    "description": "ID of the vswitch, Required if type is `vswitch`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipRange",
                "networkId",
                "networkZone",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkSubnet resources.\n",
                "properties": {
                    "gateway": {
                        "type": "string"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the Network the subnet should be added to.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkZone": {
                        "type": "string",
                        "description": "Name of network zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of subnet. `server`, `cloud` or `vswitch`\n",
                        "willReplaceOnChanges": true
                    },
                    "vswitchId": {
                        "type": "integer",
                        "description": "ID of the vswitch, Required if type is `vswitch`\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/placementGroup:PlacementGroup": {
            "description": "Provides a Hetzner Cloud Placement Group to represent a Placement Group in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst my_placement_group = new hcloud.PlacementGroup(\"my-placement-group\", {\n    type: \"spread\",\n    labels: {\n        key: \"value\",\n    },\n});\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n    placementGroupId: my_placement_group.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmy_placement_group = hcloud.PlacementGroup(\"my-placement-group\",\n    type=\"spread\",\n    labels={\n        \"key\": \"value\",\n    })\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\",\n    placement_group_id=my_placement_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_placement_group = new HCloud.PlacementGroup(\"my-placement-group\", new()\n    {\n        Type = \"spread\",\n        Labels = \n        {\n            { \"key\", \"value\" },\n        },\n    });\n\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n        PlacementGroupId = my_placement_group.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.NewPlacementGroup(ctx, \"my-placement-group\", \u0026hcloud.PlacementGroupArgs{\n\t\t\tType: pulumi.String(\"spread\"),\n\t\t\tLabels: pulumi.Map{\n\t\t\t\t\"key\": pulumi.Any(\"value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:            pulumi.String(\"debian-11\"),\n\t\t\tServerType:       pulumi.String(\"cx11\"),\n\t\t\tPlacementGroupId: my_placement_group.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.PlacementGroup;\nimport com.pulumi.hcloud.PlacementGroupArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_placement_group = new PlacementGroup(\"my-placement-group\", PlacementGroupArgs.builder()        \n            .type(\"spread\")\n            .labels(Map.of(\"key\", \"value\"))\n            .build());\n\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .placementGroupId(my_placement_group.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-placement-group:\n    type: hcloud:PlacementGroup\n    properties:\n      type: spread\n      labels:\n        key: value\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n      placementGroupId: ${[\"my-placement-group\"].id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPlacement Groups can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/placementGroup:PlacementGroup my-placement-group id\n```\n\n ",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Placement Group.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Placement Group.\n"
                }
            },
            "required": [
                "name",
                "servers",
                "type"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Placement Group.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Placement Group.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlacementGroup resources.\n",
                "properties": {
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Placement Group.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Placement Group.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/primaryIp:PrimaryIp": {
            "description": "Provides a Hetzner Cloud Primary IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.\n\nIf a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created \u0026 attached.\nCurrently, Primary IPs can be only attached to servers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst main = new hcloud.PrimaryIp(\"main\", {\n    datacenter: \"fsn1-dc14\",\n    type: \"ipv4\",\n    assigneeType: \"server\",\n    autoDelete: true,\n    labels: {\n        hallo: \"welt\",\n    },\n});\n// Link a server to a primary IP\nconst serverTest = new hcloud.Server(\"serverTest\", {\n    image: \"ubuntu-20.04\",\n    serverType: \"cx11\",\n    datacenter: \"fsn1-dc14\",\n    labels: {\n        test: \"tessst1\",\n    },\n    publicNets: [{\n        ipv4: main.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmain = hcloud.PrimaryIp(\"main\",\n    datacenter=\"fsn1-dc14\",\n    type=\"ipv4\",\n    assignee_type=\"server\",\n    auto_delete=True,\n    labels={\n        \"hallo\": \"welt\",\n    })\n# Link a server to a primary IP\nserver_test = hcloud.Server(\"serverTest\",\n    image=\"ubuntu-20.04\",\n    server_type=\"cx11\",\n    datacenter=\"fsn1-dc14\",\n    labels={\n        \"test\": \"tessst1\",\n    },\n    public_nets=[hcloud.ServerPublicNetArgs(\n        ipv4=main.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new HCloud.PrimaryIp(\"main\", new()\n    {\n        Datacenter = \"fsn1-dc14\",\n        Type = \"ipv4\",\n        AssigneeType = \"server\",\n        AutoDelete = true,\n        Labels = \n        {\n            { \"hallo\", \"welt\" },\n        },\n    });\n\n    // Link a server to a primary IP\n    var serverTest = new HCloud.Server(\"serverTest\", new()\n    {\n        Image = \"ubuntu-20.04\",\n        ServerType = \"cx11\",\n        Datacenter = \"fsn1-dc14\",\n        Labels = \n        {\n            { \"test\", \"tessst1\" },\n        },\n        PublicNets = new[]\n        {\n            new HCloud.Inputs.ServerPublicNetArgs\n            {\n                Ipv4 = main.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := hcloud.NewPrimaryIp(ctx, \"main\", \u0026hcloud.PrimaryIpArgs{\n\t\t\tDatacenter:   pulumi.String(\"fsn1-dc14\"),\n\t\t\tType:         pulumi.String(\"ipv4\"),\n\t\t\tAssigneeType: pulumi.String(\"server\"),\n\t\t\tAutoDelete:   pulumi.Bool(true),\n\t\t\tLabels: pulumi.Map{\n\t\t\t\t\"hallo\": pulumi.Any(\"welt\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"serverTest\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"ubuntu-20.04\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tDatacenter: pulumi.String(\"fsn1-dc14\"),\n\t\t\tLabels: pulumi.Map{\n\t\t\t\t\"test\": pulumi.Any(\"tessst1\"),\n\t\t\t},\n\t\t\tPublicNets: hcloud.ServerPublicNetArray{\n\t\t\t\t\u0026hcloud.ServerPublicNetArgs{\n\t\t\t\t\tIpv4: main.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.PrimaryIp;\nimport com.pulumi.hcloud.PrimaryIpArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.inputs.ServerPublicNetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new PrimaryIp(\"main\", PrimaryIpArgs.builder()        \n            .datacenter(\"fsn1-dc14\")\n            .type(\"ipv4\")\n            .assigneeType(\"server\")\n            .autoDelete(true)\n            .labels(Map.of(\"hallo\", \"welt\"))\n            .build());\n\n        var serverTest = new Server(\"serverTest\", ServerArgs.builder()        \n            .image(\"ubuntu-20.04\")\n            .serverType(\"cx11\")\n            .datacenter(\"fsn1-dc14\")\n            .labels(Map.of(\"test\", \"tessst1\"))\n            .publicNets(ServerPublicNetArgs.builder()\n                .ipv4(main.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: hcloud:PrimaryIp\n    properties:\n      datacenter: fsn1-dc14\n      type: ipv4\n      assigneeType: server\n      autoDelete: true\n      labels:\n        hallo: welt\n  # Link a server to a primary IP\n  serverTest:\n    type: hcloud:Server\n    properties:\n      image: ubuntu-20.04\n      serverType: cx11\n      datacenter: fsn1-dc14\n      labels:\n        test: tessst1\n      publicNets:\n        - ipv4: ${main.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPrimary IPs can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/primaryIp:PrimaryIp myip id\n```\n\n ",
            "properties": {
                "assigneeId": {
                    "type": "integer",
                    "description": "ID of the assigned resource\n"
                },
                "assigneeType": {
                    "type": "string",
                    "description": "The type of the assigned resource. Currently supported: `server`\n"
                },
                "autoDelete": {
                    "type": "boolean",
                    "description": "Whether auto delete is enabled.\n`Important note:`It is recommended to set `auto_delete` to `false`, because if a server assigned to the managed ip is getting deleted, it will also delete the primary IP which will break the TF state.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter name to create the resource in.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Whether delete protection is enabled. See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "(string) IP Address of the Primary IP.\n"
                },
                "ipNetwork": {
                    "type": "string",
                    "description": "(string) IPv6 subnet of the Primary IP for IPv6 addresses. (Only set if `type` is `ipv6`)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Description of the Primary IP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Primary IP.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Primary IP. `ipv4` or `ipv6`\n"
                }
            },
            "required": [
                "assigneeId",
                "assigneeType",
                "autoDelete",
                "datacenter",
                "ipAddress",
                "ipNetwork",
                "name",
                "type"
            ],
            "inputProperties": {
                "assigneeId": {
                    "type": "integer",
                    "description": "ID of the assigned resource\n"
                },
                "assigneeType": {
                    "type": "string",
                    "description": "The type of the assigned resource. Currently supported: `server`\n"
                },
                "autoDelete": {
                    "type": "boolean",
                    "description": "Whether auto delete is enabled.\n`Important note:`It is recommended to set `auto_delete` to `false`, because if a server assigned to the managed ip is getting deleted, it will also delete the primary IP which will break the TF state.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter name to create the resource in.\n",
                    "willReplaceOnChanges": true
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Whether delete protection is enabled. See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Description of the Primary IP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Primary IP.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Primary IP. `ipv4` or `ipv6`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "assigneeType",
                "autoDelete",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrimaryIp resources.\n",
                "properties": {
                    "assigneeId": {
                        "type": "integer",
                        "description": "ID of the assigned resource\n"
                    },
                    "assigneeType": {
                        "type": "string",
                        "description": "The type of the assigned resource. Currently supported: `server`\n"
                    },
                    "autoDelete": {
                        "type": "boolean",
                        "description": "Whether auto delete is enabled.\n`Important note:`It is recommended to set `auto_delete` to `false`, because if a server assigned to the managed ip is getting deleted, it will also delete the primary IP which will break the TF state.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter name to create the resource in.\n",
                        "willReplaceOnChanges": true
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Whether delete protection is enabled. See \"Delete Protection\" in the Provider Docs for details.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(string) IP Address of the Primary IP.\n"
                    },
                    "ipNetwork": {
                        "type": "string",
                        "description": "(string) IPv6 subnet of the Primary IP for IPv6 addresses. (Only set if `type` is `ipv6`)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Description of the Primary IP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Primary IP.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Primary IP. `ipv4` or `ipv6`\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/rdns:Rdns": {
            "description": "Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Servers, Primary IPs, Floating IPs or Load Balancers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFor servers:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n});\nconst master = new hcloud.Rdns(\"master\", {\n    serverId: node1.id,\n    ipAddress: node1.ipv4Address,\n    dnsPtr: \"example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\")\nmaster = hcloud.Rdns(\"master\",\n    server_id=node1.id,\n    ip_address=node1.ipv4_address,\n    dns_ptr=\"example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n    });\n\n    var master = new HCloud.Rdns(\"master\", new()\n    {\n        ServerId = node1.Id,\n        IpAddress = node1.Ipv4Address,\n        DnsPtr = \"example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-11\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewRdns(ctx, \"master\", \u0026hcloud.RdnsArgs{\n\t\t\tServerId:  node1.ID(),\n\t\t\tIpAddress: node1.Ipv4Address,\n\t\t\tDnsPtr:    pulumi.String(\"example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.Rdns;\nimport com.pulumi.hcloud.RdnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .build());\n\n        var master = new Rdns(\"master\", RdnsArgs.builder()        \n            .serverId(node1.id())\n            .ipAddress(node1.ipv4Address())\n            .dnsPtr(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n  master:\n    type: hcloud:Rdns\n    properties:\n      serverId: ${node1.id}\n      ipAddress: ${node1.ipv4Address}\n      dnsPtr: example.com\n```\n\nFor Primary IPs:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst primary1PrimaryIp = new hcloud.PrimaryIp(\"primary1PrimaryIp\", {\n    datacenter: \"nbg1-dc3\",\n    type: \"ipv4\",\n});\nconst primary1Rdns = new hcloud.Rdns(\"primary1Rdns\", {\n    primaryIpId: primary1PrimaryIp.id,\n    ipAddress: primary1PrimaryIp.ipAddress,\n    dnsPtr: \"example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nprimary1_primary_ip = hcloud.PrimaryIp(\"primary1PrimaryIp\",\n    datacenter=\"nbg1-dc3\",\n    type=\"ipv4\")\nprimary1_rdns = hcloud.Rdns(\"primary1Rdns\",\n    primary_ip_id=primary1_primary_ip.id,\n    ip_address=primary1_primary_ip.ip_address,\n    dns_ptr=\"example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var primary1PrimaryIp = new HCloud.PrimaryIp(\"primary1PrimaryIp\", new()\n    {\n        Datacenter = \"nbg1-dc3\",\n        Type = \"ipv4\",\n    });\n\n    var primary1Rdns = new HCloud.Rdns(\"primary1Rdns\", new()\n    {\n        PrimaryIpId = primary1PrimaryIp.Id,\n        IpAddress = primary1PrimaryIp.IpAddress,\n        DnsPtr = \"example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tprimary1PrimaryIp, err := hcloud.NewPrimaryIp(ctx, \"primary1PrimaryIp\", \u0026hcloud.PrimaryIpArgs{\n\t\t\tDatacenter: pulumi.String(\"nbg1-dc3\"),\n\t\t\tType:       pulumi.String(\"ipv4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewRdns(ctx, \"primary1Rdns\", \u0026hcloud.RdnsArgs{\n\t\t\tPrimaryIpId: primary1PrimaryIp.ID(),\n\t\t\tIpAddress:   primary1PrimaryIp.IpAddress,\n\t\t\tDnsPtr:      pulumi.String(\"example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.PrimaryIp;\nimport com.pulumi.hcloud.PrimaryIpArgs;\nimport com.pulumi.hcloud.Rdns;\nimport com.pulumi.hcloud.RdnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var primary1PrimaryIp = new PrimaryIp(\"primary1PrimaryIp\", PrimaryIpArgs.builder()        \n            .datacenter(\"nbg1-dc3\")\n            .type(\"ipv4\")\n            .build());\n\n        var primary1Rdns = new Rdns(\"primary1Rdns\", RdnsArgs.builder()        \n            .primaryIpId(primary1PrimaryIp.id())\n            .ipAddress(primary1PrimaryIp.ipAddress())\n            .dnsPtr(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  primary1PrimaryIp:\n    type: hcloud:PrimaryIp\n    properties:\n      datacenter: nbg1-dc3\n      type: ipv4\n  primary1Rdns:\n    type: hcloud:Rdns\n    properties:\n      primaryIpId: ${primary1PrimaryIp.id}\n      ipAddress: ${primary1PrimaryIp.ipAddress}\n      dnsPtr: example.com\n```\n\nFor Floating IPs:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst floating1 = new hcloud.FloatingIp(\"floating1\", {\n    homeLocation: \"nbg1\",\n    type: \"ipv4\",\n});\nconst floatingMaster = new hcloud.Rdns(\"floatingMaster\", {\n    dnsPtr: \"example.com\",\n    floatingIpId: floating1.id,\n    ipAddress: floating1.ipAddress,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nfloating1 = hcloud.FloatingIp(\"floating1\",\n    home_location=\"nbg1\",\n    type=\"ipv4\")\nfloating_master = hcloud.Rdns(\"floatingMaster\",\n    dns_ptr=\"example.com\",\n    floating_ip_id=floating1.id,\n    ip_address=floating1.ip_address)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var floating1 = new HCloud.FloatingIp(\"floating1\", new()\n    {\n        HomeLocation = \"nbg1\",\n        Type = \"ipv4\",\n    });\n\n    var floatingMaster = new HCloud.Rdns(\"floatingMaster\", new()\n    {\n        DnsPtr = \"example.com\",\n        FloatingIpId = floating1.Id,\n        IpAddress = floating1.IpAddress,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfloating1, err := hcloud.NewFloatingIp(ctx, \"floating1\", \u0026hcloud.FloatingIpArgs{\n\t\t\tHomeLocation: pulumi.String(\"nbg1\"),\n\t\t\tType:         pulumi.String(\"ipv4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewRdns(ctx, \"floatingMaster\", \u0026hcloud.RdnsArgs{\n\t\t\tDnsPtr:       pulumi.String(\"example.com\"),\n\t\t\tFloatingIpId: floating1.ID(),\n\t\t\tIpAddress:    floating1.IpAddress,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.FloatingIp;\nimport com.pulumi.hcloud.FloatingIpArgs;\nimport com.pulumi.hcloud.Rdns;\nimport com.pulumi.hcloud.RdnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var floating1 = new FloatingIp(\"floating1\", FloatingIpArgs.builder()        \n            .homeLocation(\"nbg1\")\n            .type(\"ipv4\")\n            .build());\n\n        var floatingMaster = new Rdns(\"floatingMaster\", RdnsArgs.builder()        \n            .dnsPtr(\"example.com\")\n            .floatingIpId(floating1.id())\n            .ipAddress(floating1.ipAddress())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  floating1:\n    type: hcloud:FloatingIp\n    properties:\n      homeLocation: nbg1\n      type: ipv4\n  floatingMaster:\n    type: hcloud:Rdns\n    properties:\n      dnsPtr: example.com\n      floatingIpId: ${floating1.id}\n      ipAddress: ${floating1.ipAddress}\n```\n\nFor Load Balancers:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst loadBalancer1 = new hcloud.LoadBalancer(\"loadBalancer1\", {\n    loadBalancerType: \"lb11\",\n    location: \"fsn1\",\n});\nconst loadBalancerMaster = new hcloud.Rdns(\"loadBalancerMaster\", {\n    dnsPtr: \"example.com\",\n    ipAddress: loadBalancer1.ipv4,\n    loadBalancerId: loadBalancer1.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nload_balancer1 = hcloud.LoadBalancer(\"loadBalancer1\",\n    load_balancer_type=\"lb11\",\n    location=\"fsn1\")\nload_balancer_master = hcloud.Rdns(\"loadBalancerMaster\",\n    dns_ptr=\"example.com\",\n    ip_address=load_balancer1.ipv4,\n    load_balancer_id=load_balancer1.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var loadBalancer1 = new HCloud.LoadBalancer(\"loadBalancer1\", new()\n    {\n        LoadBalancerType = \"lb11\",\n        Location = \"fsn1\",\n    });\n\n    var loadBalancerMaster = new HCloud.Rdns(\"loadBalancerMaster\", new()\n    {\n        DnsPtr = \"example.com\",\n        IpAddress = loadBalancer1.Ipv4,\n        LoadBalancerId = loadBalancer1.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tloadBalancer1, err := hcloud.NewLoadBalancer(ctx, \"loadBalancer1\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tLocation:         pulumi.String(\"fsn1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewRdns(ctx, \"loadBalancerMaster\", \u0026hcloud.RdnsArgs{\n\t\t\tDnsPtr:         pulumi.String(\"example.com\"),\n\t\t\tIpAddress:      loadBalancer1.Ipv4,\n\t\t\tLoadBalancerId: loadBalancer1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.LoadBalancer;\nimport com.pulumi.hcloud.LoadBalancerArgs;\nimport com.pulumi.hcloud.Rdns;\nimport com.pulumi.hcloud.RdnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var loadBalancer1 = new LoadBalancer(\"loadBalancer1\", LoadBalancerArgs.builder()        \n            .loadBalancerType(\"lb11\")\n            .location(\"fsn1\")\n            .build());\n\n        var loadBalancerMaster = new Rdns(\"loadBalancerMaster\", RdnsArgs.builder()        \n            .dnsPtr(\"example.com\")\n            .ipAddress(loadBalancer1.ipv4())\n            .loadBalancerId(loadBalancer1.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  loadBalancer1:\n    type: hcloud:LoadBalancer\n    properties:\n      loadBalancerType: lb11\n      location: fsn1\n  loadBalancerMaster:\n    type: hcloud:Rdns\n    properties:\n      dnsPtr: example.com\n      ipAddress: ${loadBalancer1.ipv4}\n      loadBalancerId: ${loadBalancer1.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nReverse DNS entries can be imported using a compound ID with the following format`\u003cprefix (s for server/ f for floating ip / l for load balancer)\u003e-\u003cserver, floating ip or load balancer ID\u003e-\u003cIP address\u003e` import reverse dns entry on server with id 123, ip 192.168.100.1\n\n```sh\n $ pulumi import hcloud:index/rdns:Rdns myrdns s-123-192.168.100.1\n```\n\n import reverse dns entry on primary ip with id 123, ip 2001:db8::1\n\n```sh\n $ pulumi import hcloud:index/rdns:Rdns myrdns p-123-2001:db8::1\n```\n\n import reverse dns entry on floating ip with id 123, ip 2001:db8::1\n\n```sh\n $ pulumi import hcloud:index/rdns:Rdns myrdns f-123-2001:db8::1\n```\n\n import reverse dns entry on load balancer with id 123, ip 2001:db8::1\n\n```sh\n $ pulumi import hcloud:index/rdns:Rdns myrdns l-123-2001:db8::1\n```\n\n ",
            "properties": {
                "dnsPtr": {
                    "type": "string",
                    "description": "The DNS address the `ip_address` should resolve to.\n"
                },
                "floatingIpId": {
                    "type": "integer",
                    "description": "The Floating IP the `ip_address` belongs to.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address that should point to `dns_ptr`.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "The Load Balancer the `ip_address` belongs to.\n"
                },
                "primaryIpId": {
                    "type": "integer",
                    "description": "The Primary IP the `ip_address` belongs to.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "The server the `ip_address` belongs to.\n"
                }
            },
            "required": [
                "dnsPtr",
                "ipAddress"
            ],
            "inputProperties": {
                "dnsPtr": {
                    "type": "string",
                    "description": "The DNS address the `ip_address` should resolve to.\n"
                },
                "floatingIpId": {
                    "type": "integer",
                    "description": "The Floating IP the `ip_address` belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address that should point to `dns_ptr`.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "The Load Balancer the `ip_address` belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "primaryIpId": {
                    "type": "integer",
                    "description": "The Primary IP the `ip_address` belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "integer",
                    "description": "The server the `ip_address` belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dnsPtr",
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rdns resources.\n",
                "properties": {
                    "dnsPtr": {
                        "type": "string",
                        "description": "The DNS address the `ip_address` should resolve to.\n"
                    },
                    "floatingIpId": {
                        "type": "integer",
                        "description": "The Floating IP the `ip_address` belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address that should point to `dns_ptr`.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerId": {
                        "type": "integer",
                        "description": "The Load Balancer the `ip_address` belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryIpId": {
                        "type": "integer",
                        "description": "The Primary IP the `ip_address` belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "The server the `ip_address` belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/server:Server": {
            "description": "Provides an Hetzner Cloud server resource. This can be used to create, modify, and delete servers. Servers also support provisioning.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Server creation with network\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst network = new hcloud.Network(\"network\", {ipRange: \"10.0.0.0/16\"});\nconst network_subnet = new hcloud.NetworkSubnet(\"network-subnet\", {\n    type: \"cloud\",\n    networkId: network.id,\n    networkZone: \"eu-central\",\n    ipRange: \"10.0.1.0/24\",\n});\nconst server = new hcloud.Server(\"server\", {\n    serverType: \"cx11\",\n    image: \"ubuntu-20.04\",\n    location: \"nbg1\",\n    networks: [{\n        networkId: network.id,\n        ip: \"10.0.1.5\",\n        aliasIps: [\n            \"10.0.1.6\",\n            \"10.0.1.7\",\n        ],\n    }],\n}, {\n    dependsOn: [network_subnet],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnetwork = hcloud.Network(\"network\", ip_range=\"10.0.0.0/16\")\nnetwork_subnet = hcloud.NetworkSubnet(\"network-subnet\",\n    type=\"cloud\",\n    network_id=network.id,\n    network_zone=\"eu-central\",\n    ip_range=\"10.0.1.0/24\")\nserver = hcloud.Server(\"server\",\n    server_type=\"cx11\",\n    image=\"ubuntu-20.04\",\n    location=\"nbg1\",\n    networks=[hcloud.ServerNetworkArgs(\n        network_id=network.id,\n        ip=\"10.0.1.5\",\n        alias_ips=[\n            \"10.0.1.6\",\n            \"10.0.1.7\",\n        ],\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[network_subnet]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var network = new HCloud.Network(\"network\", new()\n    {\n        IpRange = \"10.0.0.0/16\",\n    });\n\n    var network_subnet = new HCloud.NetworkSubnet(\"network-subnet\", new()\n    {\n        Type = \"cloud\",\n        NetworkId = network.Id,\n        NetworkZone = \"eu-central\",\n        IpRange = \"10.0.1.0/24\",\n    });\n\n    var server = new HCloud.Server(\"server\", new()\n    {\n        ServerType = \"cx11\",\n        Image = \"ubuntu-20.04\",\n        Location = \"nbg1\",\n        Networks = new[]\n        {\n            new HCloud.Inputs.ServerNetworkArgs\n            {\n                NetworkId = network.Id,\n                Ip = \"10.0.1.5\",\n                AliasIps = new[]\n                {\n                    \"10.0.1.6\",\n                    \"10.0.1.7\",\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            network_subnet,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnetwork, err := hcloud.NewNetwork(ctx, \"network\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/16\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkSubnet(ctx, \"network-subnet\", \u0026hcloud.NetworkSubnetArgs{\n\t\t\tType:        pulumi.String(\"cloud\"),\n\t\t\tNetworkId:   network.ID(),\n\t\t\tNetworkZone: pulumi.String(\"eu-central\"),\n\t\t\tIpRange:     pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"server\", \u0026hcloud.ServerArgs{\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tImage:      pulumi.String(\"ubuntu-20.04\"),\n\t\t\tLocation:   pulumi.String(\"nbg1\"),\n\t\t\tNetworks: hcloud.ServerNetworkTypeArray{\n\t\t\t\t\u0026hcloud.ServerNetworkTypeArgs{\n\t\t\t\t\tNetworkId: network.ID(),\n\t\t\t\t\tIp:        pulumi.String(\"10.0.1.5\"),\n\t\t\t\t\tAliasIps: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.0.1.6\"),\n\t\t\t\t\t\tpulumi.String(\"10.0.1.7\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tnetwork_subnet,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Network;\nimport com.pulumi.hcloud.NetworkArgs;\nimport com.pulumi.hcloud.NetworkSubnet;\nimport com.pulumi.hcloud.NetworkSubnetArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.inputs.ServerNetworkArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var network = new Network(\"network\", NetworkArgs.builder()        \n            .ipRange(\"10.0.0.0/16\")\n            .build());\n\n        var network_subnet = new NetworkSubnet(\"network-subnet\", NetworkSubnetArgs.builder()        \n            .type(\"cloud\")\n            .networkId(network.id())\n            .networkZone(\"eu-central\")\n            .ipRange(\"10.0.1.0/24\")\n            .build());\n\n        var server = new Server(\"server\", ServerArgs.builder()        \n            .serverType(\"cx11\")\n            .image(\"ubuntu-20.04\")\n            .location(\"nbg1\")\n            .networks(ServerNetworkArgs.builder()\n                .networkId(network.id())\n                .ip(\"10.0.1.5\")\n                .aliasIps(                \n                    \"10.0.1.6\",\n                    \"10.0.1.7\")\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(network_subnet)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  network:\n    type: hcloud:Network\n    properties:\n      ipRange: 10.0.0.0/16\n  network-subnet:\n    type: hcloud:NetworkSubnet\n    properties:\n      type: cloud\n      networkId: ${network.id}\n      networkZone: eu-central\n      ipRange: 10.0.1.0/24\n  server:\n    type: hcloud:Server\n    properties:\n      serverType: cx11\n      image: ubuntu-20.04\n      location: nbg1\n      networks:\n        - networkId: ${network.id}\n          ip: 10.0.1.5\n          aliasIps:\n            - 10.0.1.6\n            - 10.0.1.7\n    options:\n      dependson:\n        - ${[\"network-subnet\"]}\n```\n{{% /example %}}\n{{% example %}}\n### Server creation from snapshot\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst packerSnapshot = hcloud.getImage({\n    withSelector: \"app=foobar\",\n    mostRecent: true,\n});\n// Create a new server from the snapshot\nconst fromSnapshot = new hcloud.Server(\"fromSnapshot\", {\n    image: packerSnapshot.then(packerSnapshot =\u003e packerSnapshot.id),\n    serverType: \"cx11\",\n    publicNets: [{\n        ipv4Enabled: true,\n        ipv6Enabled: true,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\npacker_snapshot = hcloud.get_image(with_selector=\"app=foobar\",\n    most_recent=True)\n# Create a new server from the snapshot\nfrom_snapshot = hcloud.Server(\"fromSnapshot\",\n    image=packer_snapshot.id,\n    server_type=\"cx11\",\n    public_nets=[hcloud.ServerPublicNetArgs(\n        ipv4_enabled=True,\n        ipv6_enabled=True,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var packerSnapshot = HCloud.GetImage.Invoke(new()\n    {\n        WithSelector = \"app=foobar\",\n        MostRecent = true,\n    });\n\n    // Create a new server from the snapshot\n    var fromSnapshot = new HCloud.Server(\"fromSnapshot\", new()\n    {\n        Image = packerSnapshot.Apply(getImageResult =\u003e getImageResult.Id),\n        ServerType = \"cx11\",\n        PublicNets = new[]\n        {\n            new HCloud.Inputs.ServerPublicNetArgs\n            {\n                Ipv4Enabled = true,\n                Ipv6Enabled = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpackerSnapshot, err := hcloud.GetImage(ctx, \u0026hcloud.GetImageArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"app=foobar\"),\n\t\t\tMostRecent:   pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"fromSnapshot\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      *pulumi.Int(packerSnapshot.Id),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tPublicNets: hcloud.ServerPublicNetArray{\n\t\t\t\t\u0026hcloud.ServerPublicNetArgs{\n\t\t\t\t\tIpv4Enabled: pulumi.Bool(true),\n\t\t\t\t\tIpv6Enabled: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetImageArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.inputs.ServerPublicNetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var packerSnapshot = HcloudFunctions.getImage(GetImageArgs.builder()\n            .withSelector(\"app=foobar\")\n            .mostRecent(true)\n            .build());\n\n        var fromSnapshot = new Server(\"fromSnapshot\", ServerArgs.builder()        \n            .image(packerSnapshot.applyValue(getImageResult -\u003e getImageResult.id()))\n            .serverType(\"cx11\")\n            .publicNets(ServerPublicNetArgs.builder()\n                .ipv4Enabled(true)\n                .ipv6Enabled(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new server from the snapshot\n  fromSnapshot:\n    type: hcloud:Server\n    properties:\n      image: ${packerSnapshot.id}\n      serverType: cx11\n      publicNets:\n        - ipv4Enabled: true\n          ipv6Enabled: true\nvariables:\n  packerSnapshot:\n    fn::invoke:\n      Function: hcloud:getImage\n      Arguments:\n        withSelector: app=foobar\n        mostRecent: true\n```\n{{% /example %}}\n{{% /examples %}}\n## Primary IPs\n\nWhen creating a server without linking at least one ´primary_ip´, it automatically creates \u0026 assigns two (ipv4 \u0026 ipv6).\nWith the public_net block, you can enable or link primary ips. If you don't define this block, two primary ips (ipv4, ipv6) will be created and assigned to the server automatically.\n\n### Examples\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\n// Assign existing ipv4 only\nconst serverTestServer = new hcloud.Server(\"serverTestServer\", {publicNets: [{\n    ipv4Enabled: true,\n    ipv4: hcloud_primary_ip.primary_ip_1.id,\n    ipv6Enabled: false,\n}]});\n//...\n// Link a managed ipv4 but autogenerate ipv6\nconst serverTestIndex_serverServer = new hcloud.Server(\"serverTestIndex/serverServer\", {publicNets: [{\n    ipv4Enabled: true,\n    ipv4: hcloud_primary_ip.primary_ip_1.id,\n    ipv6Enabled: true,\n}]});\n//...\n// Assign \u0026 create auto-generated ipv4 \u0026 ipv6\nconst serverTestHcloudIndex_serverServer = new hcloud.Server(\"serverTestHcloudIndex/serverServer\", {publicNets: [{\n    ipv4Enabled: true,\n    ipv6Enabled: true,\n}]});\n//...\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\n# Assign existing ipv4 only\nserver_test_server = hcloud.Server(\"serverTestServer\", public_nets=[hcloud.ServerPublicNetArgs(\n    ipv4_enabled=True,\n    ipv4=hcloud_primary_ip[\"primary_ip_1\"][\"id\"],\n    ipv6_enabled=False,\n)])\n#...\n# Link a managed ipv4 but autogenerate ipv6\nserver_test_index_server_server = hcloud.Server(\"serverTestIndex/serverServer\", public_nets=[hcloud.ServerPublicNetArgs(\n    ipv4_enabled=True,\n    ipv4=hcloud_primary_ip[\"primary_ip_1\"][\"id\"],\n    ipv6_enabled=True,\n)])\n#...\n# Assign \u0026 create auto-generated ipv4 \u0026 ipv6\nserver_test_hcloud_index_server_server = hcloud.Server(\"serverTestHcloudIndex/serverServer\", public_nets=[hcloud.ServerPublicNetArgs(\n    ipv4_enabled=True,\n    ipv6_enabled=True,\n)])\n#...\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assign existing ipv4 only\n    var serverTestServer = new HCloud.Server(\"serverTestServer\", new()\n    {\n        PublicNets = new[]\n        {\n            new HCloud.Inputs.ServerPublicNetArgs\n            {\n                Ipv4Enabled = true,\n                Ipv4 = hcloud_primary_ip.Primary_ip_1.Id,\n                Ipv6Enabled = false,\n            },\n        },\n    });\n\n    //...\n    // Link a managed ipv4 but autogenerate ipv6\n    var serverTestIndex_serverServer = new HCloud.Server(\"serverTestIndex/serverServer\", new()\n    {\n        PublicNets = new[]\n        {\n            new HCloud.Inputs.ServerPublicNetArgs\n            {\n                Ipv4Enabled = true,\n                Ipv4 = hcloud_primary_ip.Primary_ip_1.Id,\n                Ipv6Enabled = true,\n            },\n        },\n    });\n\n    //...\n    // Assign \u0026 create auto-generated ipv4 \u0026 ipv6\n    var serverTestHcloudIndex_serverServer = new HCloud.Server(\"serverTestHcloudIndex/serverServer\", new()\n    {\n        PublicNets = new[]\n        {\n            new HCloud.Inputs.ServerPublicNetArgs\n            {\n                Ipv4Enabled = true,\n                Ipv6Enabled = true,\n            },\n        },\n    });\n\n    //...\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.NewServer(ctx, \"serverTestServer\", \u0026hcloud.ServerArgs{\n\t\t\tPublicNets: hcloud.ServerPublicNetArray{\n\t\t\t\t\u0026hcloud.ServerPublicNetArgs{\n\t\t\t\t\tIpv4Enabled: pulumi.Bool(true),\n\t\t\t\t\tIpv4:        pulumi.Any(hcloud_primary_ip.Primary_ip_1.Id),\n\t\t\t\t\tIpv6Enabled: pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"serverTestIndex/serverServer\", \u0026hcloud.ServerArgs{\n\t\t\tPublicNets: hcloud.ServerPublicNetArray{\n\t\t\t\t\u0026hcloud.ServerPublicNetArgs{\n\t\t\t\t\tIpv4Enabled: pulumi.Bool(true),\n\t\t\t\t\tIpv4:        pulumi.Any(hcloud_primary_ip.Primary_ip_1.Id),\n\t\t\t\t\tIpv6Enabled: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"serverTestHcloudIndex/serverServer\", \u0026hcloud.ServerArgs{\n\t\t\tPublicNets: hcloud.ServerPublicNetArray{\n\t\t\t\t\u0026hcloud.ServerPublicNetArgs{\n\t\t\t\t\tIpv4Enabled: pulumi.Bool(true),\n\t\t\t\t\tIpv6Enabled: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.inputs.ServerPublicNetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serverTestServer = new Server(\"serverTestServer\", ServerArgs.builder()        \n            .publicNets(ServerPublicNetArgs.builder()\n                .ipv4Enabled(true)\n                .ipv4(hcloud_primary_ip.primary_ip_1().id())\n                .ipv6Enabled(false)\n                .build())\n            .build());\n\n        var serverTestIndex_serverServer = new Server(\"serverTestIndex/serverServer\", ServerArgs.builder()        \n            .publicNets(ServerPublicNetArgs.builder()\n                .ipv4Enabled(true)\n                .ipv4(hcloud_primary_ip.primary_ip_1().id())\n                .ipv6Enabled(true)\n                .build())\n            .build());\n\n        var serverTestHcloudIndex_serverServer = new Server(\"serverTestHcloudIndex/serverServer\", ServerArgs.builder()        \n            .publicNets(ServerPublicNetArgs.builder()\n                .ipv4Enabled(true)\n                .ipv6Enabled(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Assign existing ipv4 only\n  serverTestServer:\n    type: hcloud:Server\n    properties:\n      # ...\n      publicNets:\n        - ipv4Enabled: true\n          ipv4: ${hcloud_primary_ip.primary_ip_1.id}\n          ipv6Enabled: false\n  # Link a managed ipv4 but autogenerate ipv6\n  serverTestIndex/serverServer:\n    type: hcloud:Server\n    properties:\n      # ...\n      publicNets:\n        - ipv4Enabled: true\n          ipv4: ${hcloud_primary_ip.primary_ip_1.id}\n          ipv6Enabled: true\n  # Assign \u0026 create auto-generated ipv4 \u0026 ipv6\n  serverTestHcloudIndex/serverServer:\n    type: hcloud:Server\n    properties:\n      # ...\n      publicNets:\n        - ipv4Enabled: true\n          ipv6Enabled: true\n```\n\n\n## Import\n\nServers can be imported using the server `id`\n\n```sh\n $ pulumi import hcloud:index/server:Server myserver id\n```\n\n ",
            "properties": {
                "allowDeprecatedImages": {
                    "type": "boolean",
                    "description": "Enable the use of deprecated images (default: false). **Note** Deprecated images will be removed after three months. Using them is then no longer possible.\n"
                },
                "backupWindow": {
                    "type": "string",
                    "description": "(string) The backup window of the server, if enabled.\n",
                    "deprecationMessage": "You should remove this property from your terraform configuration."
                },
                "backups": {
                    "type": "boolean",
                    "description": "Enable or disable backups.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter name to create the server in. `nbg1-dc3`, `fsn1-dc14`, `hel1-dc2`, `ash-dc1` or `hil-dc1`\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection (Needs to be the same as `rebuild_protection`). See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "firewallIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Firewall IDs the server should be attached to on creation.\n"
                },
                "ignoreRemoteFirewallIds": {
                    "type": "boolean",
                    "description": "Ignores any updates\nto the `firewall_ids` argument which were received from the server.\nThis should not be used in normal cases. See the documentation of the\n`hcloud.FirewallAttachment` resource for a reason to use this\nargument.\n"
                },
                "image": {
                    "type": "string"
                },
                "ipv4Address": {
                    "type": "string",
                    "description": "(string) The IPv4 address.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "(string) The first IPv6 address of the assigned network.\n"
                },
                "ipv6Network": {
                    "type": "string",
                    "description": "(string) The IPv6 network.\n"
                },
                "iso": {
                    "type": "string",
                    "description": "ID or Name of an ISO image to mount.\n"
                },
                "keepDisk": {
                    "type": "boolean",
                    "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name to create the server in. `nbg1`, `fsn1`, `hel1`, `ash` or `hil`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/ServerNetwork:ServerNetwork"
                    },
                    "description": "Network the server should be attached to on creation. (Can be specified multiple times)\n"
                },
                "placementGroupId": {
                    "type": "integer",
                    "description": "Placement Group ID the server added to on creation.\n"
                },
                "primaryDiskSize": {
                    "type": "integer",
                    "description": "(int) The size of the primary disk in GB.\n"
                },
                "publicNets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/ServerPublicNet:ServerPublicNet"
                    },
                    "description": "In this block you can either enable / disable ipv4 and ipv6 or link existing primary IPs (checkout the examples).\nIf this block is not defined, two primary (ipv4 \u0026 ipv6) ips getting auto generated.\n"
                },
                "rebuildProtection": {
                    "type": "boolean",
                    "description": "Enable or disable rebuild protection (Needs to be the same as `delete_protection`).\n"
                },
                "rescue": {
                    "type": "string",
                    "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` or `linux32`\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Name of the server type this server should be created with.\n"
                },
                "shutdownBeforeDeletion": {
                    "type": "boolean",
                    "description": "Whether to try shutting the server down gracefully before deleting it.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "(string) The status of the server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Cloud-Init user data to use during server creation\n"
                }
            },
            "required": [
                "backupWindow",
                "datacenter",
                "firewallIds",
                "ipv4Address",
                "ipv6Address",
                "ipv6Network",
                "location",
                "name",
                "primaryDiskSize",
                "serverType",
                "status"
            ],
            "inputProperties": {
                "allowDeprecatedImages": {
                    "type": "boolean",
                    "description": "Enable the use of deprecated images (default: false). **Note** Deprecated images will be removed after three months. Using them is then no longer possible.\n"
                },
                "backups": {
                    "type": "boolean",
                    "description": "Enable or disable backups.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter name to create the server in. `nbg1-dc3`, `fsn1-dc14`, `hel1-dc2`, `ash-dc1` or `hil-dc1`\n",
                    "willReplaceOnChanges": true
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection (Needs to be the same as `rebuild_protection`). See \"Delete Protection\" in the Provider Docs for details.\n"
                },
                "firewallIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Firewall IDs the server should be attached to on creation.\n"
                },
                "ignoreRemoteFirewallIds": {
                    "type": "boolean",
                    "description": "Ignores any updates\nto the `firewall_ids` argument which were received from the server.\nThis should not be used in normal cases. See the documentation of the\n`hcloud.FirewallAttachment` resource for a reason to use this\nargument.\n"
                },
                "image": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "iso": {
                    "type": "string",
                    "description": "ID or Name of an ISO image to mount.\n"
                },
                "keepDisk": {
                    "type": "boolean",
                    "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name to create the server in. `nbg1`, `fsn1`, `hel1`, `ash` or `hil`\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/ServerNetwork:ServerNetwork"
                    },
                    "description": "Network the server should be attached to on creation. (Can be specified multiple times)\n"
                },
                "placementGroupId": {
                    "type": "integer",
                    "description": "Placement Group ID the server added to on creation.\n"
                },
                "publicNets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/ServerPublicNet:ServerPublicNet"
                    },
                    "description": "In this block you can either enable / disable ipv4 and ipv6 or link existing primary IPs (checkout the examples).\nIf this block is not defined, two primary (ipv4 \u0026 ipv6) ips getting auto generated.\n"
                },
                "rebuildProtection": {
                    "type": "boolean",
                    "description": "Enable or disable rebuild protection (Needs to be the same as `delete_protection`).\n"
                },
                "rescue": {
                    "type": "string",
                    "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` or `linux32`\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Name of the server type this server should be created with.\n"
                },
                "shutdownBeforeDeletion": {
                    "type": "boolean",
                    "description": "Whether to try shutting the server down gracefully before deleting it.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "userData": {
                    "type": "string",
                    "description": "Cloud-Init user data to use during server creation\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "allowDeprecatedImages": {
                        "type": "boolean",
                        "description": "Enable the use of deprecated images (default: false). **Note** Deprecated images will be removed after three months. Using them is then no longer possible.\n"
                    },
                    "backupWindow": {
                        "type": "string",
                        "description": "(string) The backup window of the server, if enabled.\n",
                        "deprecationMessage": "You should remove this property from your terraform configuration."
                    },
                    "backups": {
                        "type": "boolean",
                        "description": "Enable or disable backups.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter name to create the server in. `nbg1-dc3`, `fsn1-dc14`, `hel1-dc2`, `ash-dc1` or `hil-dc1`\n",
                        "willReplaceOnChanges": true
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection (Needs to be the same as `rebuild_protection`). See \"Delete Protection\" in the Provider Docs for details.\n"
                    },
                    "firewallIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Firewall IDs the server should be attached to on creation.\n"
                    },
                    "ignoreRemoteFirewallIds": {
                        "type": "boolean",
                        "description": "Ignores any updates\nto the `firewall_ids` argument which were received from the server.\nThis should not be used in normal cases. See the documentation of the\n`hcloud.FirewallAttachment` resource for a reason to use this\nargument.\n"
                    },
                    "image": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "ipv4Address": {
                        "type": "string",
                        "description": "(string) The IPv4 address.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "(string) The first IPv6 address of the assigned network.\n"
                    },
                    "ipv6Network": {
                        "type": "string",
                        "description": "(string) The IPv6 network.\n"
                    },
                    "iso": {
                        "type": "string",
                        "description": "ID or Name of an ISO image to mount.\n"
                    },
                    "keepDisk": {
                        "type": "boolean",
                        "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location name to create the server in. `nbg1`, `fsn1`, `hel1`, `ash` or `hil`\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/ServerNetwork:ServerNetwork"
                        },
                        "description": "Network the server should be attached to on creation. (Can be specified multiple times)\n"
                    },
                    "placementGroupId": {
                        "type": "integer",
                        "description": "Placement Group ID the server added to on creation.\n"
                    },
                    "primaryDiskSize": {
                        "type": "integer",
                        "description": "(int) The size of the primary disk in GB.\n"
                    },
                    "publicNets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/ServerPublicNet:ServerPublicNet"
                        },
                        "description": "In this block you can either enable / disable ipv4 and ipv6 or link existing primary IPs (checkout the examples).\nIf this block is not defined, two primary (ipv4 \u0026 ipv6) ips getting auto generated.\n"
                    },
                    "rebuildProtection": {
                        "type": "boolean",
                        "description": "Enable or disable rebuild protection (Needs to be the same as `delete_protection`).\n"
                    },
                    "rescue": {
                        "type": "string",
                        "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` or `linux32`\n"
                    },
                    "serverType": {
                        "type": "string",
                        "description": "Name of the server type this server should be created with.\n"
                    },
                    "shutdownBeforeDeletion": {
                        "type": "boolean",
                        "description": "Whether to try shutting the server down gracefully before deleting it.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "(string) The status of the server.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "Cloud-Init user data to use during server creation\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/serverNetwork:ServerNetwork": {
            "description": "Provides a Hetzner Cloud Server Network to represent a private network on a server in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n});\nconst mynet = new hcloud.Network(\"mynet\", {ipRange: \"10.0.0.0/8\"});\nconst foonet = new hcloud.NetworkSubnet(\"foonet\", {\n    networkId: mynet.id,\n    type: \"cloud\",\n    networkZone: \"eu-central\",\n    ipRange: \"10.0.1.0/24\",\n});\nconst srvnetwork = new hcloud.ServerNetwork(\"srvnetwork\", {\n    serverId: node1.id,\n    networkId: mynet.id,\n    ip: \"10.0.1.5\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\")\nmynet = hcloud.Network(\"mynet\", ip_range=\"10.0.0.0/8\")\nfoonet = hcloud.NetworkSubnet(\"foonet\",\n    network_id=mynet.id,\n    type=\"cloud\",\n    network_zone=\"eu-central\",\n    ip_range=\"10.0.1.0/24\")\nsrvnetwork = hcloud.ServerNetwork(\"srvnetwork\",\n    server_id=node1.id,\n    network_id=mynet.id,\n    ip=\"10.0.1.5\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n    });\n\n    var mynet = new HCloud.Network(\"mynet\", new()\n    {\n        IpRange = \"10.0.0.0/8\",\n    });\n\n    var foonet = new HCloud.NetworkSubnet(\"foonet\", new()\n    {\n        NetworkId = mynet.Id,\n        Type = \"cloud\",\n        NetworkZone = \"eu-central\",\n        IpRange = \"10.0.1.0/24\",\n    });\n\n    var srvnetwork = new HCloud.ServerNetwork(\"srvnetwork\", new()\n    {\n        ServerId = node1.Id,\n        NetworkId = mynet.Id,\n        Ip = \"10.0.1.5\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-11\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmynet, err := hcloud.NewNetwork(ctx, \"mynet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkSubnet(ctx, \"foonet\", \u0026hcloud.NetworkSubnetArgs{\n\t\t\tNetworkId:   mynet.ID(),\n\t\t\tType:        pulumi.String(\"cloud\"),\n\t\t\tNetworkZone: pulumi.String(\"eu-central\"),\n\t\t\tIpRange:     pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServerNetwork(ctx, \"srvnetwork\", \u0026hcloud.ServerNetworkArgs{\n\t\t\tServerId:  node1.ID(),\n\t\t\tNetworkId: mynet.ID(),\n\t\t\tIp:        pulumi.String(\"10.0.1.5\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.Network;\nimport com.pulumi.hcloud.NetworkArgs;\nimport com.pulumi.hcloud.NetworkSubnet;\nimport com.pulumi.hcloud.NetworkSubnetArgs;\nimport com.pulumi.hcloud.ServerNetwork;\nimport com.pulumi.hcloud.ServerNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .build());\n\n        var mynet = new Network(\"mynet\", NetworkArgs.builder()        \n            .ipRange(\"10.0.0.0/8\")\n            .build());\n\n        var foonet = new NetworkSubnet(\"foonet\", NetworkSubnetArgs.builder()        \n            .networkId(mynet.id())\n            .type(\"cloud\")\n            .networkZone(\"eu-central\")\n            .ipRange(\"10.0.1.0/24\")\n            .build());\n\n        var srvnetwork = new ServerNetwork(\"srvnetwork\", ServerNetworkArgs.builder()        \n            .serverId(node1.id())\n            .networkId(mynet.id())\n            .ip(\"10.0.1.5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n  mynet:\n    type: hcloud:Network\n    properties:\n      ipRange: 10.0.0.0/8\n  foonet:\n    type: hcloud:NetworkSubnet\n    properties:\n      networkId: ${mynet.id}\n      type: cloud\n      networkZone: eu-central\n      ipRange: 10.0.1.0/24\n  srvnetwork:\n    type: hcloud:ServerNetwork\n    properties:\n      serverId: ${node1.id}\n      networkId: ${mynet.id}\n      ip: 10.0.1.5\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServer Network entries can be imported using a compound ID with the following format`\u003cserver-id\u003e-\u003cnetwork-id\u003e`\n\n```sh\n $ pulumi import hcloud:index/serverNetwork:ServerNetwork myservernetwork 123-654\n```\n\n ",
            "properties": {
                "aliasIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional IPs to be assigned\nto this server.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n"
                }
            },
            "required": [
                "ip",
                "macAddress",
                "serverId"
            ],
            "inputProperties": {
                "aliasIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional IPs to be assigned\nto this server.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerNetwork resources.\n",
                "properties": {
                    "aliasIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional IPs to be assigned\nto this server.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n",
                        "willReplaceOnChanges": true
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "ID of the server.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/snapshot:Snapshot": {
            "description": "Provides a Hetzner Cloud snapshot to represent an image with type snapshot in the Hetzner Cloud. This resource makes it easy to create a snapshot of your server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n});\nconst my_snapshot = new hcloud.Snapshot(\"my-snapshot\", {serverId: node1.id});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\")\nmy_snapshot = hcloud.Snapshot(\"my-snapshot\", server_id=node1.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n    });\n\n    var my_snapshot = new HCloud.Snapshot(\"my-snapshot\", new()\n    {\n        ServerId = node1.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-11\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewSnapshot(ctx, \"my-snapshot\", \u0026hcloud.SnapshotArgs{\n\t\t\tServerId: node1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.Snapshot;\nimport com.pulumi.hcloud.SnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .build());\n\n        var my_snapshot = new Snapshot(\"my-snapshot\", SnapshotArgs.builder()        \n            .serverId(node1.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n  my-snapshot:\n    type: hcloud:Snapshot\n    properties:\n      serverId: ${node1.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSnapshots can be imported using its image `id`\n\n```sh\n $ pulumi import hcloud:index/snapshot:Snapshot myimage id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the snapshot.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to the snapshot should be created from.\n"
                }
            },
            "required": [
                "serverId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the snapshot.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to the snapshot should be created from.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Snapshot resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the snapshot.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to the snapshot should be created from.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/sshKey:SshKey": {
            "description": "Provides a Hetzner Cloud SSH key resource to manage SSH keys for server access.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\n// Create a new SSH key\nconst _default = new hcloud.SshKey(\"default\", {publicKey: fs.readFileSync(\"~/.ssh/id_rsa.pub\", \"utf8\")});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\n# Create a new SSH key\ndefault = hcloud.SshKey(\"default\", public_key=(lambda path: open(path).read())(\"~/.ssh/id_rsa.pub\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a new SSH key\n    var @default = new HCloud.SshKey(\"default\", new()\n    {\n        PublicKey = File.ReadAllText(\"~/.ssh/id_rsa.pub\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.NewSshKey(ctx, \"default\", \u0026hcloud.SshKeyArgs{\n\t\t\tPublicKey: readFileOrPanic(\"~/.ssh/id_rsa.pub\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.SshKey;\nimport com.pulumi.hcloud.SshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new SshKey(\"default\", SshKeyArgs.builder()        \n            .publicKey(Files.readString(Paths.get(\"~/.ssh/id_rsa.pub\")))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a new SSH key\n  default:\n    type: hcloud:SshKey\n    properties:\n      publicKey:\n        fn::readFile: ~/.ssh/id_rsa.pub\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH keys can be imported using the SSH key `id`\n\n```sh\n $ pulumi import hcloud:index/sshKey:SshKey mykey id\n```\n\n ",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "(string) The fingerprint of the SSH key\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "publicKey"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) The fingerprint of the SSH key\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SSH key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it can be read using the file interpolation function\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/uploadedCertificate:UploadedCertificate": {
            "description": "Upload a TLS certificate to Hetzner Cloud.\n\n\n## Import\n\nUploaded certificates can be imported using their `id`hcl\n\n```sh\n $ pulumi import hcloud:index/uploadedCertificate:UploadedCertificate sample_certificate id\n```\n\n ",
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "PEM encoded TLS certificate.\n"
                },
                "created": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list) Domains and subdomains covered by the certificate.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "(string) Fingerprint of the certificate.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "PEM encoded private key belonging to the certificate.\n",
                    "secret": true
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "name",
                "notValidAfter",
                "notValidBefore",
                "privateKey",
                "type"
            ],
            "inputProperties": {
                "certificate": {
                    "type": "string",
                    "description": "PEM encoded TLS certificate.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "PEM encoded private key belonging to the certificate.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "certificate",
                "privateKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UploadedCertificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "PEM encoded TLS certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) Domains and subdomains covered by the certificate.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the certificate.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Certificate.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "PEM encoded private key belonging to the certificate.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/volume:Volume": {
            "description": "Provides a Hetzner Cloud volume resource to manage volumes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n});\nconst master = new hcloud.Volume(\"master\", {\n    size: 50,\n    serverId: node1.id,\n    automount: true,\n    format: \"ext4\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\")\nmaster = hcloud.Volume(\"master\",\n    size=50,\n    server_id=node1.id,\n    automount=True,\n    format=\"ext4\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n    });\n\n    var master = new HCloud.Volume(\"master\", new()\n    {\n        Size = 50,\n        ServerId = node1.Id,\n        Automount = true,\n        Format = \"ext4\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-11\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewVolume(ctx, \"master\", \u0026hcloud.VolumeArgs{\n\t\t\tSize:      pulumi.Int(50),\n\t\t\tServerId:  node1.ID(),\n\t\t\tAutomount: pulumi.Bool(true),\n\t\t\tFormat:    pulumi.String(\"ext4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.Volume;\nimport com.pulumi.hcloud.VolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .build());\n\n        var master = new Volume(\"master\", VolumeArgs.builder()        \n            .size(50)\n            .serverId(node1.id())\n            .automount(true)\n            .format(\"ext4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n  master:\n    type: hcloud:Volume\n    properties:\n      size: 50\n      serverId: ${node1.id}\n      automount: true\n      format: ext4\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVolumes can be imported using their `id`\n\n```sh\n $ pulumi import hcloud:index/volume:Volume myvolume id\n```\n\n ",
            "properties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n\n**Note:** When you want to attach multiple volumes to a server, please use the `hcloud.VolumeAttachment` resource and the `location` argument instead of the `server_id` argument.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Format volume after creation. `xfs` or `ext4`\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(map) User-defined labels (key-value pairs).\n"
                },
                "linuxDevice": {
                    "type": "string",
                    "description": "(string) Device path on the file system for the Volume.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name of the volume to create, not allowed if server_id argument is passed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the volume to create (must be unique per project).\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to, not allowed if location argument is passed.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the volume (in GB).\n"
                }
            },
            "required": [
                "linuxDevice",
                "location",
                "name",
                "serverId",
                "size"
            ],
            "inputProperties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n\n**Note:** When you want to attach multiple volumes to a server, please use the `hcloud.VolumeAttachment` resource and the `location` argument instead of the `server_id` argument.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Format volume after creation. `xfs` or `ext4`\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(map) User-defined labels (key-value pairs).\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name of the volume to create, not allowed if server_id argument is passed.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the volume to create (must be unique per project).\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to, not allowed if location argument is passed.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the volume (in GB).\n"
                }
            },
            "requiredInputs": [
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "automount": {
                        "type": "boolean",
                        "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection. See \"Delete Protection\" in the Provider Docs for details.\n\n**Note:** When you want to attach multiple volumes to a server, please use the `hcloud.VolumeAttachment` resource and the `location` argument instead of the `server_id` argument.\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "Format volume after creation. `xfs` or `ext4`\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs).\n"
                    },
                    "linuxDevice": {
                        "type": "string",
                        "description": "(string) Device path on the file system for the Volume.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location name of the volume to create, not allowed if server_id argument is passed.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the volume to create (must be unique per project).\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to attach the Volume to, not allowed if location argument is passed.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the volume (in GB).\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/volumeAttachment:VolumeAttachment": {
            "description": "Provides a Hetzner Cloud Volume attachment to attach a Volume to a Hetzner Cloud Server. Deleting a Volume Attachment will detach the Volume from the Server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-11\",\n    serverType: \"cx11\",\n    datacenter: \"nbg1-dc3\",\n});\nconst master = new hcloud.Volume(\"master\", {\n    location: \"nbg1\",\n    size: 10,\n});\nconst main = new hcloud.VolumeAttachment(\"main\", {\n    volumeId: master.id,\n    serverId: node1.id,\n    automount: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-11\",\n    server_type=\"cx11\",\n    datacenter=\"nbg1-dc3\")\nmaster = hcloud.Volume(\"master\",\n    location=\"nbg1\",\n    size=10)\nmain = hcloud.VolumeAttachment(\"main\",\n    volume_id=master.id,\n    server_id=node1.id,\n    automount=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var node1 = new HCloud.Server(\"node1\", new()\n    {\n        Image = \"debian-11\",\n        ServerType = \"cx11\",\n        Datacenter = \"nbg1-dc3\",\n    });\n\n    var master = new HCloud.Volume(\"master\", new()\n    {\n        Location = \"nbg1\",\n        Size = 10,\n    });\n\n    var main = new HCloud.VolumeAttachment(\"main\", new()\n    {\n        VolumeId = master.Id,\n        ServerId = node1.Id,\n        Automount = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-11\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tDatacenter: pulumi.String(\"nbg1-dc3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmaster, err := hcloud.NewVolume(ctx, \"master\", \u0026hcloud.VolumeArgs{\n\t\t\tLocation: pulumi.String(\"nbg1\"),\n\t\t\tSize:     pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewVolumeAttachment(ctx, \"main\", \u0026hcloud.VolumeAttachmentArgs{\n\t\t\tVolumeId:  master.ID(),\n\t\t\tServerId:  node1.ID(),\n\t\t\tAutomount: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.Volume;\nimport com.pulumi.hcloud.VolumeArgs;\nimport com.pulumi.hcloud.VolumeAttachment;\nimport com.pulumi.hcloud.VolumeAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var node1 = new Server(\"node1\", ServerArgs.builder()        \n            .image(\"debian-11\")\n            .serverType(\"cx11\")\n            .datacenter(\"nbg1-dc3\")\n            .build());\n\n        var master = new Volume(\"master\", VolumeArgs.builder()        \n            .location(\"nbg1\")\n            .size(10)\n            .build());\n\n        var main = new VolumeAttachment(\"main\", VolumeAttachmentArgs.builder()        \n            .volumeId(master.id())\n            .serverId(node1.id())\n            .automount(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: hcloud:VolumeAttachment\n    properties:\n      volumeId: ${master.id}\n      serverId: ${node1.id}\n      automount: true\n  node1:\n    type: hcloud:Server\n    properties:\n      image: debian-11\n      serverType: cx11\n      datacenter: nbg1-dc3\n  master:\n    type: hcloud:Volume\n    properties:\n      location: nbg1\n      size: 10\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVolume Attachments can be imported using the `volume_id`\n\n```sh\n $ pulumi import hcloud:index/volumeAttachment:VolumeAttachment myvolumeattachment \u003cvolume_id\u003e\n```\n\n ",
            "properties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "ID of the Volume.\n"
                }
            },
            "required": [
                "automount",
                "serverId",
                "volumeId"
            ],
            "inputProperties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "integer",
                    "description": "ID of the Volume.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeAttachment resources.\n",
                "properties": {
                    "automount": {
                        "type": "boolean",
                        "description": "Automount the volume upon attaching it.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to attach the Volume to.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeId": {
                        "type": "integer",
                        "description": "ID of the Volume.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "hcloud:index/getCertificate:getCertificate": {
            "description": "Provides details about a specific Hetzner Cloud Certificate.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sampleCertificate1 = hcloud.getCertificate({\n    name: \"sample-certificate-1\",\n});\nconst sampleCertificate2 = hcloud.getCertificate({\n    id: 4711,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nsample_certificate1 = hcloud.get_certificate(name=\"sample-certificate-1\")\nsample_certificate2 = hcloud.get_certificate(id=4711)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleCertificate1 = HCloud.GetCertificate.Invoke(new()\n    {\n        Name = \"sample-certificate-1\",\n    });\n\n    var sampleCertificate2 = HCloud.GetCertificate.Invoke(new()\n    {\n        Id = 4711,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupCertificate(ctx, \u0026hcloud.LookupCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"sample-certificate-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupCertificate(ctx, \u0026hcloud.LookupCertificateArgs{\n\t\t\tId: pulumi.IntRef(4711),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleCertificate1 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()\n            .name(\"sample-certificate-1\")\n            .build());\n\n        final var sampleCertificate2 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()\n            .id(\"4711\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sampleCertificate1:\n    fn::invoke:\n      Function: hcloud:getCertificate\n      Arguments:\n        name: sample-certificate-1\n  sampleCertificate2:\n    fn::invoke:\n      Function: hcloud:getCertificate\n      Arguments:\n        id: '4711'\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificate.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the certificate.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCertificate.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "(string) PEM encoded TLS certificate.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) Domains and subdomains covered by the certificate.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the certificate.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the certificate.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs) assigned to the certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Certificate.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificate",
                    "created",
                    "domainNames",
                    "fingerprint",
                    "id",
                    "labels",
                    "notValidAfter",
                    "notValidBefore",
                    "type"
                ]
            }
        },
        "hcloud:index/getCertificates:getCertificates": {
            "description": "Provides details about multiple Hetzner Cloud Certificates.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sampleCertificate1 = hcloud.getCertificates({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nsample_certificate1 = hcloud.get_certificates(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleCertificate1 = HCloud.GetCertificates.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetCertificates(ctx, \u0026hcloud.GetCertificatesArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetCertificatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleCertificate1 = HcloudFunctions.getCertificates(GetCertificatesArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sampleCertificate1:\n    fn::invoke:\n      Function: hcloud:getCertificates\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificates.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCertificates.\n",
                "properties": {
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getCertificatesCertificate:getCertificatesCertificate"
                        },
                        "description": "(list) List of all matching certificates. See `data.hcloud_certificate` for schema.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificates",
                    "id"
                ]
            }
        },
        "hcloud:index/getDatacenter:getDatacenter": {
            "description": "Provides details about a specific Hetzner Cloud Datacenter.\nUse this resource to get detailed information about specific datacenter.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ds1 = hcloud.getDatacenter({\n    name: \"fsn1-dc8\",\n});\nconst ds2 = hcloud.getDatacenter({\n    id: 4,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nds1 = hcloud.get_datacenter(name=\"fsn1-dc8\")\nds2 = hcloud.get_datacenter(id=4)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ds1 = HCloud.GetDatacenter.Invoke(new()\n    {\n        Name = \"fsn1-dc8\",\n    });\n\n    var ds2 = HCloud.GetDatacenter.Invoke(new()\n    {\n        Id = 4,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetDatacenter(ctx, \u0026hcloud.GetDatacenterArgs{\n\t\t\tName: pulumi.StringRef(\"fsn1-dc8\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetDatacenter(ctx, \u0026hcloud.GetDatacenterArgs{\n\t\t\tId: pulumi.IntRef(4),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetDatacenterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ds1 = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()\n            .name(\"fsn1-dc8\")\n            .build());\n\n        final var ds2 = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()\n            .id(4)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ds1:\n    fn::invoke:\n      Function: hcloud:getDatacenter\n      Arguments:\n        name: fsn1-dc8\n  ds2:\n    fn::invoke:\n      Function: hcloud:getDatacenter\n      Arguments:\n        id: 4\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatacenter.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the datacenter.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the datacenter.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatacenter.\n",
                "properties": {
                    "availableServerTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(list) List of available server types.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the datacenter.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the datacenter.\n"
                    },
                    "location": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(map) Physical datacenter location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the datacenter.\n"
                    },
                    "supportedServerTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(list) List of server types supported by the datacenter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "availableServerTypeIds",
                    "description",
                    "id",
                    "location",
                    "name",
                    "supportedServerTypeIds"
                ]
            }
        },
        "hcloud:index/getDatacenters:getDatacenters": {
            "description": "Provides a list of available Hetzner Cloud Datacenters.\nThis resource may be useful to create highly available infrastructure, distributed across several datacenters.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatacenters.\n",
                "properties": {
                    "datacenterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique datacenter identifiers. **Deprecated**: Use `datacenters` attribute instead.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    },
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of all datacenter descriptions. **Deprecated**: Use `datacenters` attribute instead.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    },
                    "id": {
                        "type": "string"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of datacenter names. **Deprecated**: Use `datacenters` attribute instead.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatacenters.\n",
                "properties": {
                    "datacenterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique datacenter identifiers. **Deprecated**: Use `datacenters` attribute instead.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    },
                    "datacenters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getDatacentersDatacenter:getDatacentersDatacenter"
                        },
                        "description": "(list) List of all datacenters. See `data.hcloud_datacenter` for schema.\n"
                    },
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of all datacenter descriptions. **Deprecated**: Use `datacenters` attribute instead.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    },
                    "id": {
                        "type": "string"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of datacenter names. **Deprecated**: Use `datacenters` attribute instead.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    }
                },
                "type": "object",
                "required": [
                    "datacenters"
                ]
            }
        },
        "hcloud:index/getFirewall:getFirewall": {
            "description": "Provides details about a specific Hetzner Cloud Firewall.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sampleFirewall1 = hcloud.getFirewall({\n    name: \"sample-firewall-1\",\n});\nconst sampleFirewall2 = hcloud.getFirewall({\n    id: 4711,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nsample_firewall1 = hcloud.get_firewall(name=\"sample-firewall-1\")\nsample_firewall2 = hcloud.get_firewall(id=4711)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleFirewall1 = HCloud.GetFirewall.Invoke(new()\n    {\n        Name = \"sample-firewall-1\",\n    });\n\n    var sampleFirewall2 = HCloud.GetFirewall.Invoke(new()\n    {\n        Id = 4711,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupFirewall(ctx, \u0026hcloud.LookupFirewallArgs{\n\t\t\tName: pulumi.StringRef(\"sample-firewall-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupFirewall(ctx, \u0026hcloud.LookupFirewallArgs{\n\t\t\tId: pulumi.IntRef(4711),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetFirewallArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleFirewall1 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()\n            .name(\"sample-firewall-1\")\n            .build());\n\n        final var sampleFirewall2 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()\n            .id(\"4711\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sampleFirewall1:\n    fn::invoke:\n      Function: hcloud:getFirewall\n      Arguments:\n        name: sample-firewall-1\n  sampleFirewall2:\n    fn::invoke:\n      Function: hcloud:getFirewall\n      Arguments:\n        id: '4711'\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewall.\n",
                "properties": {
                    "applyTos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallApplyTo:getFirewallApplyTo"
                        },
                        "description": "Configuration of the Applied Resources\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the firewall.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Return most recent firewall if multiple are found.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the firewall.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallRule:getFirewallRule"
                        },
                        "description": "(string)  Configuration of a Rule from this Firewall.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewall.\n",
                "properties": {
                    "applyTos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallApplyTo:getFirewallApplyTo"
                        },
                        "description": "Configuration of the Applied Resources\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Firewall.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Firewall.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallRule:getFirewallRule"
                        },
                        "description": "(string)  Configuration of a Rule from this Firewall.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            }
        },
        "hcloud:index/getFirewalls:getFirewalls": {
            "description": "Provides details about multiple Hetzner Cloud Firewall.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sampleFirewall1 = hcloud.getFirewalls({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nsample_firewall1 = hcloud.get_firewalls(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sampleFirewall1 = HCloud.GetFirewalls.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetFirewalls(ctx, \u0026hcloud.GetFirewallsArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetFirewallsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sampleFirewall1 = HcloudFunctions.getFirewalls(GetFirewallsArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  sampleFirewall1:\n    fn::invoke:\n      Function: hcloud:getFirewalls\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewalls.\n",
                "properties": {
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Sorts list by date.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewalls.\n",
                "properties": {
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallsFirewall:getFirewallsFirewall"
                        },
                        "description": "(list) List of all matching firewalls. See `data.hcloud_firewall` for schema.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "firewalls",
                    "id"
                ]
            }
        },
        "hcloud:index/getFloatingIp:getFloatingIp": {
            "description": "Provides details about a Hetzner Cloud Floating IP.\n\nThis resource can be useful when you need to determine a Floating IP ID based on the IP address.\n\n{{% examples %}}\n## Example Usage\n\n# Data Source: hcloud.FloatingIp\nProvides details about a Hetzner Cloud Floating IP.\nThis resource can be useful when you need to determine a Floating IP ID based on the IP address.\n\n{{% example %}}\n### Additional Examples\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ip1 = hcloud.getFloatingIp({\n    ipAddress: \"1.2.3.4\",\n});\nconst ip2 = hcloud.getFloatingIp({\n    withSelector: \"key=value\",\n});\nconst main: hcloud.FloatingIpAssignment[] = [];\nfor (const range = {value: 0}; range.value \u003c _var.counter; range.value++) {\n    main.push(new hcloud.FloatingIpAssignment(`main-${range.value}`, {\n        floatingIpId: ip1.then(ip1 =\u003e ip1.id),\n        serverId: hcloud_server.main.id,\n    }));\n}\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nip1 = hcloud.get_floating_ip(ip_address=\"1.2.3.4\")\nip2 = hcloud.get_floating_ip(with_selector=\"key=value\")\nmain = []\nfor range in [{\"value\": i} for i in range(0, var.counter)]:\n    main.append(hcloud.FloatingIpAssignment(f\"main-{range['value']}\",\n        floating_ip_id=ip1.id,\n        server_id=hcloud_server[\"main\"][\"id\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip1 = HCloud.GetFloatingIp.Invoke(new()\n    {\n        IpAddress = \"1.2.3.4\",\n    });\n\n    var ip2 = HCloud.GetFloatingIp.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n    var main = new List\u003cHCloud.FloatingIpAssignment\u003e();\n    for (var rangeIndex = 0; rangeIndex \u003c @var.Counter; rangeIndex++)\n    {\n        var range = new { Value = rangeIndex };\n        main.Add(new HCloud.FloatingIpAssignment($\"main-{range.Value}\", new()\n        {\n            FloatingIpId = ip1.Apply(getFloatingIpResult =\u003e getFloatingIpResult.Id),\n            ServerId = hcloud_server.Main.Id,\n        }));\n    }\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tip1, err := hcloud.LookupFloatingIp(ctx, \u0026hcloud.LookupFloatingIpArgs{\n\t\t\tIpAddress: pulumi.StringRef(\"1.2.3.4\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupFloatingIp(ctx, \u0026hcloud.LookupFloatingIpArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar main []*hcloud.FloatingIpAssignment\n\t\tfor index := 0; index \u003c _var.Counter; index++ {\n\t\t\tkey0 := index\n\t\t\t_ := index\n\t\t\t__res, err := hcloud.NewFloatingIpAssignment(ctx, fmt.Sprintf(\"main-%v\", key0), \u0026hcloud.FloatingIpAssignmentArgs{\n\t\t\t\tFloatingIpId: *pulumi.Int(ip1.Id),\n\t\t\t\tServerId:     pulumi.Any(hcloud_server.Main.Id),\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tmain = append(main, __res)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetFloatingIpArgs;\nimport com.pulumi.hcloud.FloatingIpAssignment;\nimport com.pulumi.hcloud.FloatingIpAssignmentArgs;\nimport com.pulumi.codegen.internal.KeyedValue;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ip1 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()\n            .ipAddress(\"1.2.3.4\")\n            .build());\n\n        final var ip2 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n        for (var i = 0; i \u003c var_.counter(); i++) {\n            new FloatingIpAssignment(\"main-\" + i, FloatingIpAssignmentArgs.builder()            \n                .floatingIpId(ip1.applyValue(getFloatingIpResult -\u003e getFloatingIpResult.id()))\n                .serverId(hcloud_server.main().id())\n                .build());\n\n        \n}\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: hcloud:FloatingIpAssignment\n    properties:\n      floatingIpId: ${ip1.id}\n      serverId: ${hcloud_server.main.id}\n    options: {}\nvariables:\n  ip1:\n    fn::invoke:\n      Function: hcloud:getFloatingIp\n      Arguments:\n        ipAddress: 1.2.3.4\n  ip2:\n    fn::invoke:\n      Function: hcloud:getFloatingIp\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIp.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Floating IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address of the Floating IP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Floating IP.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIp.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(bool) Whether delete protection is enabled.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the Floating IP.\n"
                    },
                    "homeLocation": {
                        "type": "string",
                        "description": "(string) Home location.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Floating IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(string) IP Address of the Floating IP.\n"
                    },
                    "ipNetwork": {
                        "type": "string",
                        "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Floating IP.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "(int) Server to assign the Floating IP is assigned to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) Type of the Floating IP.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deleteProtection",
                    "description",
                    "homeLocation",
                    "id",
                    "ipAddress",
                    "ipNetwork",
                    "labels",
                    "serverId",
                    "type"
                ]
            }
        },
        "hcloud:index/getFloatingIps:getFloatingIps": {
            "description": "Provides details about multiple Hetzner Cloud Floating IPs.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ip2 = hcloud.getFloatingIps({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nip2 = hcloud.get_floating_ips(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip2 = HCloud.GetFloatingIps.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetFloatingIps(ctx, \u0026hcloud.GetFloatingIpsArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetFloatingIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ip2 = HcloudFunctions.getFloatingIps(GetFloatingIpsArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ip2:\n    fn::invoke:\n      Function: hcloud:getFloatingIps\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIps.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIps.\n",
                "properties": {
                    "floatingIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFloatingIpsFloatingIp:getFloatingIpsFloatingIp"
                        },
                        "description": "(list) List of all matching floating ips. See `data.hcloud_floating_ip` for schema.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "floatingIps",
                    "id"
                ]
            }
        },
        "hcloud:index/getImage:getImage": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst image1 = hcloud.getImage({\n    id: 1234,\n});\nconst image2 = hcloud.getImage({\n    name: \"ubuntu-18.04\",\n    withArchitecture: \"x86\",\n});\nconst image3 = hcloud.getImage({\n    withSelector: \"key=value\",\n});\nconst main = new hcloud.Server(\"main\", {image: image1.then(image1 =\u003e image1.id)});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nimage1 = hcloud.get_image(id=1234)\nimage2 = hcloud.get_image(name=\"ubuntu-18.04\",\n    with_architecture=\"x86\")\nimage3 = hcloud.get_image(with_selector=\"key=value\")\nmain = hcloud.Server(\"main\", image=image1.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var image1 = HCloud.GetImage.Invoke(new()\n    {\n        Id = 1234,\n    });\n\n    var image2 = HCloud.GetImage.Invoke(new()\n    {\n        Name = \"ubuntu-18.04\",\n        WithArchitecture = \"x86\",\n    });\n\n    var image3 = HCloud.GetImage.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n    var main = new HCloud.Server(\"main\", new()\n    {\n        Image = image1.Apply(getImageResult =\u003e getImageResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\timage1, err := hcloud.GetImage(ctx, \u0026hcloud.GetImageArgs{\n\t\t\tId: pulumi.IntRef(1234),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetImage(ctx, \u0026hcloud.GetImageArgs{\n\t\t\tName:             pulumi.StringRef(\"ubuntu-18.04\"),\n\t\t\tWithArchitecture: pulumi.StringRef(\"x86\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetImage(ctx, \u0026hcloud.GetImageArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"main\", \u0026hcloud.ServerArgs{\n\t\t\tImage: *pulumi.Int(image1.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetImageArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var image1 = HcloudFunctions.getImage(GetImageArgs.builder()\n            .id(\"1234\")\n            .build());\n\n        final var image2 = HcloudFunctions.getImage(GetImageArgs.builder()\n            .name(\"ubuntu-18.04\")\n            .withArchitecture(\"x86\")\n            .build());\n\n        final var image3 = HcloudFunctions.getImage(GetImageArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n        var main = new Server(\"main\", ServerArgs.builder()        \n            .image(image1.applyValue(getImageResult -\u003e getImageResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: hcloud:Server\n    properties:\n      image: ${image1.id}\nvariables:\n  image1:\n    fn::invoke:\n      Function: hcloud:getImage\n      Arguments:\n        id: '1234'\n  image2:\n    fn::invoke:\n      Function: hcloud:getImage\n      Arguments:\n        name: ubuntu-18.04\n        withArchitecture: x86\n  image3:\n    fn::invoke:\n      Function: hcloud:getImage\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Image.\n"
                    },
                    "includeDeprecated": {
                        "type": "boolean",
                        "description": "Also return the image if it is marked as deprecated.\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "If more than one result is returned, use the most recent Image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Image.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withArchitecture": {
                        "type": "string",
                        "description": "Select only images with this architecture, could be `x86` (default) or `arm`.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Select only images with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "architecture": {
                        "type": "string",
                        "description": "(string) Architecture of the Image.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Date when the Image was created (in ISO-8601 format).\n"
                    },
                    "deprecated": {
                        "type": "string",
                        "description": "(string) Point in time when the image is considered to be deprecated (in ISO-8601 format).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the Image.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Image.\n"
                    },
                    "includeDeprecated": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Image, only present when the Image is of type `system`.\n"
                    },
                    "osFlavor": {
                        "type": "string",
                        "description": "(string) Flavor of operating system contained in the image, could be `ubuntu`, `centos`, `debian`, `fedora` or `unknown`.\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "(string) Operating system version.\n"
                    },
                    "rapidDeploy": {
                        "type": "boolean",
                        "description": "(bool) Indicates that rapid deploy of the image is available.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) Type of the Image, could be `system`, `backup` or `snapshot`.\n"
                    },
                    "withArchitecture": {
                        "type": "string"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "architecture",
                    "created",
                    "deprecated",
                    "description",
                    "id",
                    "labels",
                    "name",
                    "osFlavor",
                    "osVersion",
                    "rapidDeploy",
                    "type"
                ]
            }
        },
        "hcloud:index/getImages:getImages": {
            "description": "Provides details about multiple Hetzner Cloud Images.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst image2 = hcloud.getImages({\n    withArchitectures: [\"x86\"],\n});\nconst image3 = hcloud.getImages({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nimage2 = hcloud.get_images(with_architectures=[\"x86\"])\nimage3 = hcloud.get_images(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var image2 = HCloud.GetImages.Invoke(new()\n    {\n        WithArchitectures = new[]\n        {\n            \"x86\",\n        },\n    });\n\n    var image3 = HCloud.GetImages.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetImages(ctx, \u0026hcloud.GetImagesArgs{\n\t\t\tWithArchitectures: []string{\n\t\t\t\t\"x86\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetImages(ctx, \u0026hcloud.GetImagesArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetImagesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var image2 = HcloudFunctions.getImages(GetImagesArgs.builder()\n            .withArchitectures(\"x86\")\n            .build());\n\n        final var image3 = HcloudFunctions.getImages(GetImagesArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  image2:\n    fn::invoke:\n      Function: hcloud:getImages\n      Arguments:\n        withArchitectures:\n          - x86\n  image3:\n    fn::invoke:\n      Function: hcloud:getImages\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImages.\n",
                "properties": {
                    "includeDeprecated": {
                        "type": "boolean",
                        "description": "Also list images that are marked as deprecated.\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Sorts list by date.\n"
                    },
                    "withArchitectures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only images with this architecture, could contain `x86` or `arm`.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only images with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImages.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getImagesImage:getImagesImage"
                        },
                        "description": "(list) List of all matching images. See `data.hcloud_image` for schema.\n"
                    },
                    "includeDeprecated": {
                        "type": "boolean"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "withArchitectures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "images",
                    "id"
                ]
            }
        },
        "hcloud:index/getLoadBalancer:getLoadBalancer": {
            "description": "Provides details about a specific Hetzner Cloud Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst lb1 = hcloud.getLoadBalancer({\n    name: \"my-load-balancer\",\n});\nconst lb2 = hcloud.getLoadBalancer({\n    id: 123,\n});\nconst lb3 = hcloud.getLoadBalancer({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nlb1 = hcloud.get_load_balancer(name=\"my-load-balancer\")\nlb2 = hcloud.get_load_balancer(id=123)\nlb3 = hcloud.get_load_balancer(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lb1 = HCloud.GetLoadBalancer.Invoke(new()\n    {\n        Name = \"my-load-balancer\",\n    });\n\n    var lb2 = HCloud.GetLoadBalancer.Invoke(new()\n    {\n        Id = 123,\n    });\n\n    var lb3 = HCloud.GetLoadBalancer.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupLoadBalancer(ctx, \u0026hcloud.LookupLoadBalancerArgs{\n\t\t\tName: pulumi.StringRef(\"my-load-balancer\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupLoadBalancer(ctx, \u0026hcloud.LookupLoadBalancerArgs{\n\t\t\tId: pulumi.IntRef(123),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupLoadBalancer(ctx, \u0026hcloud.LookupLoadBalancerArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetLoadBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var lb1 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()\n            .name(\"my-load-balancer\")\n            .build());\n\n        final var lb2 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()\n            .id(\"123\")\n            .build());\n\n        final var lb3 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  lb1:\n    fn::invoke:\n      Function: hcloud:getLoadBalancer\n      Arguments:\n        name: my-load-balancer\n  lb2:\n    fn::invoke:\n      Function: hcloud:getLoadBalancer\n      Arguments:\n        id: '123'\n  lb3:\n    fn::invoke:\n      Function: hcloud:getLoadBalancer\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadBalancer.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Load Balancer.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Load Balancer.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadBalancer.\n",
                "properties": {
                    "algorithms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancerAlgorithm:getLoadBalancerAlgorithm"
                        },
                        "description": "(Optional) Configuration of the algorithm the Load Balancer use.\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(bool) Whether delete protection is enabled.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Load Balancer.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs) .\n"
                    },
                    "loadBalancerType": {
                        "type": "string",
                        "description": "(string) Name of the Type of the Load Balancer.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) Name of the location the Load Balancer is in.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Load Balancer.\n"
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "(int) ID of the first private network that this Load Balancer is connected to.\n"
                    },
                    "networkIp": {
                        "type": "string",
                        "description": "(string) IP of the Load Balancer in the first private network that it is connected to.\n"
                    },
                    "networkZone": {
                        "type": "string"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancerService:getLoadBalancerService"
                        },
                        "description": "(list) List of services a Load Balancer provides.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancerTarget:getLoadBalancerTarget"
                        },
                        "description": "(list) List of targets of the Load Balancer.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "algorithms",
                    "deleteProtection",
                    "id",
                    "ipv4",
                    "ipv6",
                    "labels",
                    "loadBalancerType",
                    "location",
                    "networkId",
                    "networkIp",
                    "networkZone",
                    "services",
                    "targets"
                ]
            }
        },
        "hcloud:index/getLoadBalancers:getLoadBalancers": {
            "description": "Provides details about multiple Hetzner Cloud Load Balancers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst lb2 = hcloud.getLoadBalancers({});\nconst lb3 = hcloud.getLoadBalancers({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nlb2 = hcloud.get_load_balancers()\nlb3 = hcloud.get_load_balancers(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lb2 = HCloud.GetLoadBalancers.Invoke();\n\n    var lb3 = HCloud.GetLoadBalancers.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetLoadBalancers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetLoadBalancers(ctx, \u0026hcloud.GetLoadBalancersArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetLoadBalancersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var lb2 = HcloudFunctions.getLoadBalancers();\n\n        final var lb3 = HcloudFunctions.getLoadBalancers(GetLoadBalancersArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  lb2:\n    fn::invoke:\n      Function: hcloud:getLoadBalancers\n      Arguments: {}\n  lb3:\n    fn::invoke:\n      Function: hcloud:getLoadBalancers\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadBalancers.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadBalancers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancer:getLoadBalancersLoadBalancer"
                        },
                        "description": "(list) List of all matching load balancers. See `data.hcloud_load_balancer` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "loadBalancers",
                    "id"
                ]
            }
        },
        "hcloud:index/getLocation:getLocation": {
            "description": "Provides details about a specific Hetzner Cloud Location.\nUse this resource to get detailed information about specific location.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst l1 = hcloud.getLocation({\n    name: \"fsn1\",\n});\nconst l2 = hcloud.getLocation({\n    id: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nl1 = hcloud.get_location(name=\"fsn1\")\nl2 = hcloud.get_location(id=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var l1 = HCloud.GetLocation.Invoke(new()\n    {\n        Name = \"fsn1\",\n    });\n\n    var l2 = HCloud.GetLocation.Invoke(new()\n    {\n        Id = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetLocation(ctx, \u0026hcloud.GetLocationArgs{\n\t\t\tName: pulumi.StringRef(\"fsn1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetLocation(ctx, \u0026hcloud.GetLocationArgs{\n\t\t\tId: pulumi.IntRef(1),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetLocationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var l1 = HcloudFunctions.getLocation(GetLocationArgs.builder()\n            .name(\"fsn1\")\n            .build());\n\n        final var l2 = HcloudFunctions.getLocation(GetLocationArgs.builder()\n            .id(1)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  l1:\n    fn::invoke:\n      Function: hcloud:getLocation\n      Arguments:\n        name: fsn1\n  l2:\n    fn::invoke:\n      Function: hcloud:getLocation\n      Arguments:\n        id: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLocation.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the location.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocation.\n",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "(string) City of the location.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "(string) Country of the location.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the location.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the location.\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "(float) Latitude of the city.\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "(float) Longitude of the city.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the location.\n"
                    },
                    "networkZone": {
                        "type": "string",
                        "description": "(string) Network Zone of the location.\n"
                    }
                },
                "type": "object",
                "required": [
                    "city",
                    "country",
                    "description",
                    "id",
                    "latitude",
                    "longitude",
                    "name",
                    "networkZone"
                ]
            }
        },
        "hcloud:index/getLocations:getLocations": {
            "description": "Provides a list of available Hetzner Cloud Locations.\nThis resource may be useful to create highly available infrastructure, distributed across several locations.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLocations.\n",
                "properties": {
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of all location descriptions. **Deprecated**: Use `locations` attribute instead.\n",
                        "deprecationMessage": "Use locations list instead"
                    },
                    "id": {
                        "type": "string"
                    },
                    "locationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique location identifiers. **Deprecated**: Use `locations` attribute instead.\n",
                        "deprecationMessage": "Use locations list instead"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of location names. **Deprecated**: Use `locations` attribute instead.\n",
                        "deprecationMessage": "Use locations list instead"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocations.\n",
                "properties": {
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of all location descriptions. **Deprecated**: Use `locations` attribute instead.\n",
                        "deprecationMessage": "Use locations list instead"
                    },
                    "id": {
                        "type": "string"
                    },
                    "locationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique location identifiers. **Deprecated**: Use `locations` attribute instead.\n",
                        "deprecationMessage": "Use locations list instead"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLocationsLocation:getLocationsLocation"
                        },
                        "description": "(list) List of all locations. See `data.hcloud_location` for schema.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of location names. **Deprecated**: Use `locations` attribute instead.\n",
                        "deprecationMessage": "Use locations list instead"
                    }
                },
                "type": "object",
                "required": [
                    "locations"
                ]
            }
        },
        "hcloud:index/getNetwork:getNetwork": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst network1 = hcloud.getNetwork({\n    id: 1234,\n});\nconst network2 = hcloud.getNetwork({\n    name: \"my-network\",\n});\nconst network3 = hcloud.getNetwork({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnetwork1 = hcloud.get_network(id=1234)\nnetwork2 = hcloud.get_network(name=\"my-network\")\nnetwork3 = hcloud.get_network(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var network1 = HCloud.GetNetwork.Invoke(new()\n    {\n        Id = 1234,\n    });\n\n    var network2 = HCloud.GetNetwork.Invoke(new()\n    {\n        Name = \"my-network\",\n    });\n\n    var network3 = HCloud.GetNetwork.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupNetwork(ctx, \u0026hcloud.LookupNetworkArgs{\n\t\t\tId: pulumi.IntRef(1234),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupNetwork(ctx, \u0026hcloud.LookupNetworkArgs{\n\t\t\tName: pulumi.StringRef(\"my-network\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupNetwork(ctx, \u0026hcloud.LookupNetworkArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var network1 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .id(\"1234\")\n            .build());\n\n        final var network2 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .name(\"my-network\")\n            .build());\n\n        final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  network1:\n    fn::invoke:\n      Function: hcloud:getNetwork\n      Arguments:\n        id: '1234'\n  network2:\n    fn::invoke:\n      Function: hcloud:getNetwork\n      Arguments:\n        name: my-network\n  network3:\n    fn::invoke:\n      Function: hcloud:getNetwork\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Network.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "IPv4 prefix of the Network.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "deprecationMessage": "This attribute has no purpose."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(bool) Whether delete protection is enabled.\n"
                    },
                    "exposeRoutesToVswitch": {
                        "type": "boolean",
                        "description": "(bool) Indicates if the routes from this network should be exposed to the vSwitch connection. The exposing only takes effect if a vSwitch connection is active.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique ID of the Network.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "IPv4 prefix of the Network.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "deprecationMessage": "This attribute has no purpose."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deleteProtection",
                    "exposeRoutesToVswitch",
                    "id",
                    "ipRange",
                    "labels",
                    "name"
                ]
            }
        },
        "hcloud:index/getNetworks:getNetworks": {
            "description": "Provides details about multiple Hetzner Cloud Networks.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst network2 = hcloud.getNetwork({});\nconst network3 = hcloud.getNetwork({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnetwork2 = hcloud.get_network()\nnetwork3 = hcloud.get_network(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var network2 = HCloud.GetNetwork.Invoke();\n\n    var network3 = HCloud.GetNetwork.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupNetwork(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupNetwork(ctx, \u0026hcloud.LookupNetworkArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var network2 = HcloudFunctions.getNetwork();\n\n        final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  network2:\n    fn::invoke:\n      Function: hcloud:getNetwork\n      Arguments: {}\n  network3:\n    fn::invoke:\n      Function: hcloud:getNetwork\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworks.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworks.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getNetworksNetwork:getNetworksNetwork"
                        },
                        "description": "(list) List of all matching networks. See `data.hcloud_network` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "networks",
                    "id"
                ]
            }
        },
        "hcloud:index/getPlacementGroup:getPlacementGroup": {
            "description": "Provides details about a specific Hetzner Cloud Placement Group.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst samplePlacementGroup1 = hcloud.getPlacementGroup({\n    name: \"sample-placement-group-1\",\n});\nconst samplePlacementGroup2 = hcloud.getPlacementGroup({\n    id: 4711,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nsample_placement_group1 = hcloud.get_placement_group(name=\"sample-placement-group-1\")\nsample_placement_group2 = hcloud.get_placement_group(id=4711)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var samplePlacementGroup1 = HCloud.GetPlacementGroup.Invoke(new()\n    {\n        Name = \"sample-placement-group-1\",\n    });\n\n    var samplePlacementGroup2 = HCloud.GetPlacementGroup.Invoke(new()\n    {\n        Id = 4711,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupPlacementGroup(ctx, \u0026hcloud.LookupPlacementGroupArgs{\n\t\t\tName: pulumi.StringRef(\"sample-placement-group-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupPlacementGroup(ctx, \u0026hcloud.LookupPlacementGroupArgs{\n\t\t\tId: pulumi.IntRef(4711),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetPlacementGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()\n            .name(\"sample-placement-group-1\")\n            .build());\n\n        final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()\n            .id(\"4711\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  samplePlacementGroup1:\n    fn::invoke:\n      Function: hcloud:getPlacementGroup\n      Arguments:\n        name: sample-placement-group-1\n  samplePlacementGroup2:\n    fn::invoke:\n      Function: hcloud:getPlacementGroup\n      Arguments:\n        id: '4711'\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlacementGroup.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the placement group.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Return most recent placement group if multiple are found.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the placement group.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string)  Type of the Placement Group.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPlacementGroup.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Placement Group.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Placement Group.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "(string)  Type of the Placement Group.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "labels",
                    "name",
                    "servers",
                    "type"
                ]
            }
        },
        "hcloud:index/getPlacementGroups:getPlacementGroups": {
            "description": "Provides details about multiple Hetzner Cloud Placement Groups.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst samplePlacementGroup1 = hcloud.getPlacementGroups({});\nconst samplePlacementGroup2 = hcloud.getPlacementGroups({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nsample_placement_group1 = hcloud.get_placement_groups()\nsample_placement_group2 = hcloud.get_placement_groups(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var samplePlacementGroup1 = HCloud.GetPlacementGroups.Invoke();\n\n    var samplePlacementGroup2 = HCloud.GetPlacementGroups.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetPlacementGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetPlacementGroups(ctx, \u0026hcloud.GetPlacementGroupsArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroups();\n\n        final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  samplePlacementGroup1:\n    fn::invoke:\n      Function: hcloud:getPlacementGroups\n      Arguments: {}\n  samplePlacementGroup2:\n    fn::invoke:\n      Function: hcloud:getPlacementGroups\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPlacementGroups.\n",
                "properties": {
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Sorts list by date.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPlacementGroups.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "placementGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getPlacementGroupsPlacementGroup:getPlacementGroupsPlacementGroup"
                        },
                        "description": "(list) List of all matching placement groups. See `data.hcloud_placement_group` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "placementGroups",
                    "id"
                ]
            }
        },
        "hcloud:index/getPrimaryIp:getPrimaryIp": {
            "description": "Provides details about a Hetzner Cloud Primary IP.\n\nThis resource can be useful when you need to determine a Primary IP ID based on the IP address.\n\nSide note:\n\nIf a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created \u0026 attached.\nCurrently, Primary IPs can be only attached to servers.\n\n{{% examples %}}\n## Example Usage\n\n# Data Source: hcloud.PrimaryIp\n\nProvides details about a Hetzner Cloud Primary IP.\nThis resource can be useful when you need to determine a Primary IP ID based on the IP address.\n\n{{% example %}}\n### Additional Examples\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ip1 = hcloud.getPrimaryIp({\n    ipAddress: \"1.2.3.4\",\n});\nconst ip2 = hcloud.getPrimaryIp({\n    name: \"primary_ip_1\",\n});\nconst ip3 = hcloud.getPrimaryIp({\n    withSelector: \"key=value\",\n});\n// Link a server to an existing primary IP\nconst serverTest = new hcloud.Server(\"serverTest\", {\n    image: \"ubuntu-20.04\",\n    serverType: \"cx11\",\n    datacenter: \"fsn1-dc14\",\n    labels: {\n        test: \"tessst1\",\n    },\n    publicNets: [{\n        ipv4: hcloud_primary_ip.ip_1.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nip1 = hcloud.get_primary_ip(ip_address=\"1.2.3.4\")\nip2 = hcloud.get_primary_ip(name=\"primary_ip_1\")\nip3 = hcloud.get_primary_ip(with_selector=\"key=value\")\n# Link a server to an existing primary IP\nserver_test = hcloud.Server(\"serverTest\",\n    image=\"ubuntu-20.04\",\n    server_type=\"cx11\",\n    datacenter=\"fsn1-dc14\",\n    labels={\n        \"test\": \"tessst1\",\n    },\n    public_nets=[hcloud.ServerPublicNetArgs(\n        ipv4=hcloud_primary_ip[\"ip_1\"][\"id\"],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip1 = HCloud.GetPrimaryIp.Invoke(new()\n    {\n        IpAddress = \"1.2.3.4\",\n    });\n\n    var ip2 = HCloud.GetPrimaryIp.Invoke(new()\n    {\n        Name = \"primary_ip_1\",\n    });\n\n    var ip3 = HCloud.GetPrimaryIp.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n    // Link a server to an existing primary IP\n    var serverTest = new HCloud.Server(\"serverTest\", new()\n    {\n        Image = \"ubuntu-20.04\",\n        ServerType = \"cx11\",\n        Datacenter = \"fsn1-dc14\",\n        Labels = \n        {\n            { \"test\", \"tessst1\" },\n        },\n        PublicNets = new[]\n        {\n            new HCloud.Inputs.ServerPublicNetArgs\n            {\n                Ipv4 = hcloud_primary_ip.Ip_1.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupPrimaryIp(ctx, \u0026hcloud.LookupPrimaryIpArgs{\n\t\t\tIpAddress: pulumi.StringRef(\"1.2.3.4\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupPrimaryIp(ctx, \u0026hcloud.LookupPrimaryIpArgs{\n\t\t\tName: pulumi.StringRef(\"primary_ip_1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupPrimaryIp(ctx, \u0026hcloud.LookupPrimaryIpArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"serverTest\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"ubuntu-20.04\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tDatacenter: pulumi.String(\"fsn1-dc14\"),\n\t\t\tLabels: pulumi.Map{\n\t\t\t\t\"test\": pulumi.Any(\"tessst1\"),\n\t\t\t},\n\t\t\tPublicNets: hcloud.ServerPublicNetArray{\n\t\t\t\t\u0026hcloud.ServerPublicNetArgs{\n\t\t\t\t\tIpv4: pulumi.Any(hcloud_primary_ip.Ip_1.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetPrimaryIpArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport com.pulumi.hcloud.inputs.ServerPublicNetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ip1 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()\n            .ipAddress(\"1.2.3.4\")\n            .build());\n\n        final var ip2 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()\n            .name(\"primary_ip_1\")\n            .build());\n\n        final var ip3 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n        var serverTest = new Server(\"serverTest\", ServerArgs.builder()        \n            .image(\"ubuntu-20.04\")\n            .serverType(\"cx11\")\n            .datacenter(\"fsn1-dc14\")\n            .labels(Map.of(\"test\", \"tessst1\"))\n            .publicNets(ServerPublicNetArgs.builder()\n                .ipv4(hcloud_primary_ip.ip_1().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Link a server to an existing primary IP\n  serverTest:\n    type: hcloud:Server\n    properties:\n      image: ubuntu-20.04\n      serverType: cx11\n      datacenter: fsn1-dc14\n      labels:\n        test: tessst1\n      publicNets:\n        - ipv4: ${hcloud_primary_ip.ip_1.id}\nvariables:\n  ip1:\n    fn::invoke:\n      Function: hcloud:getPrimaryIp\n      Arguments:\n        ipAddress: 1.2.3.4\n  ip2:\n    fn::invoke:\n      Function: hcloud:getPrimaryIp\n      Arguments:\n        name: primary_ip_1\n  ip3:\n    fn::invoke:\n      Function: hcloud:getPrimaryIp\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrimaryIp.\n",
                "properties": {
                    "assigneeId": {
                        "type": "integer",
                        "description": "(int) ID of the assigned resource.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the Primary IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address of the Primary IP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Primary IP.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrimaryIp.\n",
                "properties": {
                    "assigneeId": {
                        "type": "integer",
                        "description": "(int) ID of the assigned resource.\n"
                    },
                    "assigneeType": {
                        "type": "string",
                        "description": "(string) The type of the assigned resource.\n"
                    },
                    "autoDelete": {
                        "type": "boolean",
                        "description": "(bool) Whether auto delete is enabled.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "(string) The datacenter name of the Primary IP.\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(bool) Whether delete protection is enabled.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Primary IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(string) IP Address of the Primary IP.\n"
                    },
                    "ipNetwork": {
                        "type": "string",
                        "description": "(string) IPv6 subnet of the Primary IP for IPv6 addresses. (Only set if `type` is `ipv6`)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(string) Description of the Primary IP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Primary IP.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) Type of the Primary IP.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "assigneeId",
                    "assigneeType",
                    "autoDelete",
                    "datacenter",
                    "deleteProtection",
                    "id",
                    "ipAddress",
                    "ipNetwork",
                    "labels",
                    "type"
                ]
            }
        },
        "hcloud:index/getPrimaryIps:getPrimaryIps": {
            "description": "Provides details about multiple Hetzner Cloud Primary IPs.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ip2 = hcloud.getPrimaryIps({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nip2 = hcloud.get_primary_ips(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ip2 = HCloud.GetPrimaryIps.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetPrimaryIps(ctx, \u0026hcloud.GetPrimaryIpsArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ip2 = HcloudFunctions.getPrimaryIps(GetPrimaryIpsArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ip2:\n    fn::invoke:\n      Function: hcloud:getPrimaryIps\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPrimaryIps.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrimaryIps.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "primaryIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getPrimaryIpsPrimaryIp:getPrimaryIpsPrimaryIp"
                        },
                        "description": "(list) List of all matching primary ips. See `data.hcloud_primary_ip` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "primaryIps",
                    "id"
                ]
            }
        },
        "hcloud:index/getServer:getServer": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst s1 = hcloud.getServer({\n    name: \"my-server\",\n});\nconst s2 = hcloud.getServer({\n    id: 123,\n});\nconst s3 = hcloud.getServer({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\ns1 = hcloud.get_server(name=\"my-server\")\ns2 = hcloud.get_server(id=123)\ns3 = hcloud.get_server(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var s1 = HCloud.GetServer.Invoke(new()\n    {\n        Name = \"my-server\",\n    });\n\n    var s2 = HCloud.GetServer.Invoke(new()\n    {\n        Id = 123,\n    });\n\n    var s3 = HCloud.GetServer.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupServer(ctx, \u0026hcloud.LookupServerArgs{\n\t\t\tName: pulumi.StringRef(\"my-server\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupServer(ctx, \u0026hcloud.LookupServerArgs{\n\t\t\tId: pulumi.IntRef(123),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupServer(ctx, \u0026hcloud.LookupServerArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var s1 = HcloudFunctions.getServer(GetServerArgs.builder()\n            .name(\"my-server\")\n            .build());\n\n        final var s2 = HcloudFunctions.getServer(GetServerArgs.builder()\n            .id(\"123\")\n            .build());\n\n        final var s3 = HcloudFunctions.getServer(GetServerArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  s1:\n    fn::invoke:\n      Function: hcloud:getServer\n      Arguments:\n        name: my-server\n  s2:\n    fn::invoke:\n      Function: hcloud:getServer\n      Arguments:\n        id: '123'\n  s3:\n    fn::invoke:\n      Function: hcloud:getServer\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServer.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server.\n"
                    },
                    "placementGroupId": {
                        "type": "integer",
                        "description": "(Optional, string) Placement Group ID the server is assigned to.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only servers with the specified status, could contain `initializing`, `starting`, `running`, `stopping`, `off`, `deleting`, `rebuilding`, `migrating`, `unknown`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServer.\n",
                "properties": {
                    "backupWindow": {
                        "type": "string",
                        "description": "(string) The backup window of the server, if enabled.\n"
                    },
                    "backups": {
                        "type": "boolean",
                        "description": "(bool) Whether backups are enabled.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "(string) The datacenter name.\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(bool) Whether delete protection is enabled.\n"
                    },
                    "firewallIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(Optional, list) Firewall IDs the server is attached to.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the server.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "(string) Name or ID of the image the server was created from.\n"
                    },
                    "ipv4Address": {
                        "type": "string",
                        "description": "(string) The IPv4 address.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "(string) The first IPv6 address of the assigned network.\n"
                    },
                    "ipv6Network": {
                        "type": "string",
                        "description": "(string) The IPv6 network.\n"
                    },
                    "iso": {
                        "type": "string",
                        "description": "(string) ID or Name of the mounted ISO image. Architecture of ISO must equal the server (type) architecture.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) The location name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the server.\n"
                    },
                    "placementGroupId": {
                        "type": "integer",
                        "description": "(Optional, string) Placement Group ID the server is assigned to.\n"
                    },
                    "primaryDiskSize": {
                        "type": "integer",
                        "description": "(int) The size of the primary disk in GB.\n"
                    },
                    "rebuildProtection": {
                        "type": "boolean",
                        "description": "(bool) Whether rebuild protection is enabled.\n"
                    },
                    "rescue": {
                        "type": "string"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverType": {
                        "type": "string",
                        "description": "(string) Name of the server type.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(string) The status of the server.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "backupWindow",
                    "backups",
                    "datacenter",
                    "deleteProtection",
                    "firewallIds",
                    "id",
                    "image",
                    "ipv4Address",
                    "ipv6Address",
                    "ipv6Network",
                    "iso",
                    "labels",
                    "location",
                    "name",
                    "primaryDiskSize",
                    "rebuildProtection",
                    "rescue",
                    "serverType",
                    "status"
                ]
            }
        },
        "hcloud:index/getServerType:getServerType": {
            "description": "Provides details about a specific Hetzner Cloud Server Type.\nUse this resource to get detailed information about specific Server Type.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ds1 = hcloud.getServerType({\n    name: \"cx11\",\n});\nconst ds2 = hcloud.getServerType({\n    id: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nds1 = hcloud.get_server_type(name=\"cx11\")\nds2 = hcloud.get_server_type(id=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ds1 = HCloud.GetServerType.Invoke(new()\n    {\n        Name = \"cx11\",\n    });\n\n    var ds2 = HCloud.GetServerType.Invoke(new()\n    {\n        Id = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetServerType(ctx, \u0026hcloud.GetServerTypeArgs{\n\t\t\tName: pulumi.StringRef(\"cx11\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetServerType(ctx, \u0026hcloud.GetServerTypeArgs{\n\t\t\tId: pulumi.IntRef(1),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetServerTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ds1 = HcloudFunctions.getServerType(GetServerTypeArgs.builder()\n            .name(\"cx11\")\n            .build());\n\n        final var ds2 = HcloudFunctions.getServerType(GetServerTypeArgs.builder()\n            .id(1)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ds1:\n    fn::invoke:\n      Function: hcloud:getServerType\n      Arguments:\n        name: cx11\n  ds2:\n    fn::invoke:\n      Function: hcloud:getServerType\n      Arguments:\n        id: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServerType.\n",
                "properties": {
                    "deprecationAnnounced": {
                        "type": "string",
                        "description": "(Optional, string) Date when the deprecation of the server type was announced. Only set when the server type is deprecated.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the server_type.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server_type.\n"
                    },
                    "unavailableAfter": {
                        "type": "string",
                        "description": "(Optional, string) Date when the server type will not be available for new servers. Only set when the server type is deprecated.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServerType.\n",
                "properties": {
                    "architecture": {
                        "type": "string",
                        "description": "(string) Architecture of the server_type.\n"
                    },
                    "cores": {
                        "type": "integer",
                        "description": "(int) Number of cpu cores a Server of this type will have.\n"
                    },
                    "cpuType": {
                        "type": "string"
                    },
                    "deprecationAnnounced": {
                        "type": "string",
                        "description": "(Optional, string) Date when the deprecation of the server type was announced. Only set when the server type is deprecated.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the server_type.\n"
                    },
                    "disk": {
                        "type": "integer",
                        "description": "(int) Disk size a Server of this type will have in GB.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the server_type.\n"
                    },
                    "includedTraffic": {
                        "type": "integer",
                        "description": "(int) Free traffic per month in bytes.\n"
                    },
                    "isDeprecated": {
                        "type": "boolean",
                        "description": "(bool) Deprecation status of server type.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "(int) Memory a Server of this type will have in GB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the server_type.\n"
                    },
                    "storageType": {
                        "type": "string"
                    },
                    "unavailableAfter": {
                        "type": "string",
                        "description": "(Optional, string) Date when the server type will not be available for new servers. Only set when the server type is deprecated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "architecture",
                    "cores",
                    "cpuType",
                    "deprecationAnnounced",
                    "description",
                    "disk",
                    "id",
                    "includedTraffic",
                    "isDeprecated",
                    "memory",
                    "name",
                    "storageType",
                    "unavailableAfter"
                ]
            }
        },
        "hcloud:index/getServerTypes:getServerTypes": {
            "description": "Provides a list of available Hetzner Cloud Server Types.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerTypes.\n",
                "properties": {
                    "serverTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use server_types list instead"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServerTypes.\n",
                "properties": {
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use server_types list instead"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use server_types list instead"
                    },
                    "serverTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use server_types list instead"
                    },
                    "serverTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getServerTypesServerType:getServerTypesServerType"
                        },
                        "description": "(list) List of all server types. See `data.hcloud_type` for schema.\n"
                    }
                },
                "type": "object",
                "required": [
                    "descriptions",
                    "names",
                    "serverTypes",
                    "id"
                ]
            }
        },
        "hcloud:index/getServers:getServers": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst s3 = hcloud.getServers({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\ns3 = hcloud.get_servers(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var s3 = HCloud.GetServers.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetServers(ctx, \u0026hcloud.GetServersArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetServersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var s3 = HcloudFunctions.getServers(GetServersArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  s3:\n    fn::invoke:\n      Function: hcloud:getServers\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServers.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only servers with the specified status, could contain `initializing`, `starting`, `running`, `stopping`, `off`, `deleting`, `rebuilding`, `migrating`, `unknown`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getServersServer:getServersServer"
                        },
                        "description": "(list) List of all matching servers. See `data.hcloud_server` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "servers",
                    "id"
                ]
            }
        },
        "hcloud:index/getSshKey:getSshKey": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sshKey1 = hcloud.getSshKey({\n    id: 1234,\n});\nconst sshKey2 = hcloud.getSshKey({\n    name: \"my-ssh-key\",\n});\nconst sshKey3 = hcloud.getSshKey({\n    fingerprint: \"43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8\",\n});\nconst sshKey4 = hcloud.getSshKey({\n    withSelector: \"key=value\",\n});\nconst main = new hcloud.Server(\"main\", {sshKeys: [\n    sshKey1.then(sshKey1 =\u003e sshKey1.id),\n    sshKey2.then(sshKey2 =\u003e sshKey2.id),\n    sshKey3.then(sshKey3 =\u003e sshKey3.id),\n]});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nssh_key1 = hcloud.get_ssh_key(id=1234)\nssh_key2 = hcloud.get_ssh_key(name=\"my-ssh-key\")\nssh_key3 = hcloud.get_ssh_key(fingerprint=\"43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8\")\nssh_key4 = hcloud.get_ssh_key(with_selector=\"key=value\")\nmain = hcloud.Server(\"main\", ssh_keys=[\n    ssh_key1.id,\n    ssh_key2.id,\n    ssh_key3.id,\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sshKey1 = HCloud.GetSshKey.Invoke(new()\n    {\n        Id = 1234,\n    });\n\n    var sshKey2 = HCloud.GetSshKey.Invoke(new()\n    {\n        Name = \"my-ssh-key\",\n    });\n\n    var sshKey3 = HCloud.GetSshKey.Invoke(new()\n    {\n        Fingerprint = \"43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8\",\n    });\n\n    var sshKey4 = HCloud.GetSshKey.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n    var main = new HCloud.Server(\"main\", new()\n    {\n        SshKeys = new[]\n        {\n            sshKey1.Apply(getSshKeyResult =\u003e getSshKeyResult.Id),\n            sshKey2.Apply(getSshKeyResult =\u003e getSshKeyResult.Id),\n            sshKey3.Apply(getSshKeyResult =\u003e getSshKeyResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsshKey1, err := hcloud.LookupSshKey(ctx, \u0026hcloud.LookupSshKeyArgs{\n\t\t\tId: pulumi.IntRef(1234),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsshKey2, err := hcloud.LookupSshKey(ctx, \u0026hcloud.LookupSshKeyArgs{\n\t\t\tName: pulumi.StringRef(\"my-ssh-key\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsshKey3, err := hcloud.LookupSshKey(ctx, \u0026hcloud.LookupSshKeyArgs{\n\t\t\tFingerprint: pulumi.StringRef(\"43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupSshKey(ctx, \u0026hcloud.LookupSshKeyArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"main\", \u0026hcloud.ServerArgs{\n\t\t\tSshKeys: pulumi.StringArray{\n\t\t\t\t*pulumi.Int(sshKey1.Id),\n\t\t\t\t*pulumi.Int(sshKey2.Id),\n\t\t\t\t*pulumi.Int(sshKey3.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetSshKeyArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var sshKey1 = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()\n            .id(\"1234\")\n            .build());\n\n        final var sshKey2 = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()\n            .name(\"my-ssh-key\")\n            .build());\n\n        final var sshKey3 = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()\n            .fingerprint(\"43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8\")\n            .build());\n\n        final var sshKey4 = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n        var main = new Server(\"main\", ServerArgs.builder()        \n            .sshKeys(            \n                sshKey1.applyValue(getSshKeyResult -\u003e getSshKeyResult.id()),\n                sshKey2.applyValue(getSshKeyResult -\u003e getSshKeyResult.id()),\n                sshKey3.applyValue(getSshKeyResult -\u003e getSshKeyResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: hcloud:Server\n    properties:\n      sshKeys:\n        - ${sshKey1.id}\n        - ${sshKey2.id}\n        - ${sshKey3.id}\nvariables:\n  sshKey1:\n    fn::invoke:\n      Function: hcloud:getSshKey\n      Arguments:\n        id: '1234'\n  sshKey2:\n    fn::invoke:\n      Function: hcloud:getSshKey\n      Arguments:\n        name: my-ssh-key\n  sshKey3:\n    fn::invoke:\n      Function: hcloud:getSshKey\n      Arguments:\n        fingerprint: 43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8\n  sshKey4:\n    fn::invoke:\n      Function: hcloud:getSshKey\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "Fingerprint of the SSH Key.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the SSH Key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SSH Key.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the SSH Key.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the SSH Key.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the SSH Key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "(string) Public Key of the SSH Key.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fingerprint",
                    "id",
                    "labels",
                    "name",
                    "publicKey"
                ]
            }
        },
        "hcloud:index/getSshKeys:getSshKeys": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst allKeys = hcloud.getSshKeys({});\nconst keysBySelector = hcloud.getSshKeys({\n    withSelector: \"foo=bar\",\n});\nconst main = new hcloud.Server(\"main\", {sshKeys: allKeys.then(allKeys =\u003e allKeys.sshKeys.map(__item =\u003e __item.name))});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nall_keys = hcloud.get_ssh_keys()\nkeys_by_selector = hcloud.get_ssh_keys(with_selector=\"foo=bar\")\nmain = hcloud.Server(\"main\", ssh_keys=[__item.name for __item in all_keys.ssh_keys])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var allKeys = HCloud.GetSshKeys.Invoke();\n\n    var keysBySelector = HCloud.GetSshKeys.Invoke(new()\n    {\n        WithSelector = \"foo=bar\",\n    });\n\n    var main = new HCloud.Server(\"main\", new()\n    {\n        SshKeys = allKeys.Apply(getSshKeysResult =\u003e getSshKeysResult.SshKeys).Select(__item =\u003e __item.Name).ToList(),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tallKeys, err := hcloud.GetSshKeys(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetSshKeys(ctx, \u0026hcloud.GetSshKeysArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"foo=bar\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar splat0 []*string\n\t\tfor _, val0 := range allKeys.SshKeys {\n\t\t\tsplat0 = append(splat0, val0.Name)\n\t\t}\n\t\t_, err = hcloud.NewServer(ctx, \"main\", \u0026hcloud.ServerArgs{\n\t\t\tSshKeys: []*pulumi.String(splat0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetSshKeysArgs;\nimport com.pulumi.hcloud.Server;\nimport com.pulumi.hcloud.ServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var allKeys = HcloudFunctions.getSshKeys();\n\n        final var keysBySelector = HcloudFunctions.getSshKeys(GetSshKeysArgs.builder()\n            .withSelector(\"foo=bar\")\n            .build());\n\n        var main = new Server(\"main\", ServerArgs.builder()        \n            .sshKeys(allKeys.applyValue(getSshKeysResult -\u003e getSshKeysResult.sshKeys()).stream().map(element -\u003e element.name()).collect(toList()))\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSshKeys.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKeys.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getSshKeysSshKey:getSshKeysSshKey"
                        },
                        "description": "(list) List of all matches SSH keys. See `data.hcloud_ssh_key` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sshKeys",
                    "id"
                ]
            }
        },
        "hcloud:index/getVolume:getVolume": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst volume1 = hcloud.getVolume({\n    id: 1234,\n});\nconst volume2 = hcloud.getVolume({\n    name: \"my-volume\",\n});\nconst volume3 = hcloud.getVolume({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nvolume1 = hcloud.get_volume(id=1234)\nvolume2 = hcloud.get_volume(name=\"my-volume\")\nvolume3 = hcloud.get_volume(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var volume1 = HCloud.GetVolume.Invoke(new()\n    {\n        Id = 1234,\n    });\n\n    var volume2 = HCloud.GetVolume.Invoke(new()\n    {\n        Name = \"my-volume\",\n    });\n\n    var volume3 = HCloud.GetVolume.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.LookupVolume(ctx, \u0026hcloud.LookupVolumeArgs{\n\t\t\tId: pulumi.IntRef(1234),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupVolume(ctx, \u0026hcloud.LookupVolumeArgs{\n\t\t\tName: pulumi.StringRef(\"my-volume\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.LookupVolume(ctx, \u0026hcloud.LookupVolumeArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var volume1 = HcloudFunctions.getVolume(GetVolumeArgs.builder()\n            .id(\"1234\")\n            .build());\n\n        final var volume2 = HcloudFunctions.getVolume(GetVolumeArgs.builder()\n            .name(\"my-volume\")\n            .build());\n\n        final var volume3 = HcloudFunctions.getVolume(GetVolumeArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  volume1:\n    fn::invoke:\n      Function: hcloud:getVolume\n      Arguments:\n        id: '1234'\n  volume2:\n    fn::invoke:\n      Function: hcloud:getVolume\n      Arguments:\n        name: my-volume\n  volume3:\n    fn::invoke:\n      Function: hcloud:getVolume\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the volume.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) The location name.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the volume.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "(Optional, int) Server ID the volume is attached to\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only volumes with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(bool) Whether delete protection is enabled.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the volume.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs).\n"
                    },
                    "linuxDevice": {
                        "type": "string",
                        "description": "(string) Device path on the file system for the Volume.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) The location name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the volume.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "(Optional, int) Server ID the volume is attached to\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "(int) Size of the volume.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "deleteProtection",
                    "id",
                    "labels",
                    "linuxDevice",
                    "name",
                    "size"
                ]
            }
        },
        "hcloud:index/getVolumes:getVolumes": {
            "description": "Provides details about multiple Hetzner Cloud volumes.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst volume_ = hcloud.getVolumes({});\nconst volume3 = hcloud.getVolumes({\n    withSelector: \"key=value\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nvolume_ = hcloud.get_volumes()\nvolume3 = hcloud.get_volumes(with_selector=\"key=value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var volume_ = HCloud.GetVolumes.Invoke();\n\n    var volume3 = HCloud.GetVolumes.Invoke(new()\n    {\n        WithSelector = \"key=value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.GetVolumes(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.GetVolumes(ctx, \u0026hcloud.GetVolumesArgs{\n\t\t\tWithSelector: pulumi.StringRef(\"key=value\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.hcloud.HcloudFunctions;\nimport com.pulumi.hcloud.inputs.GetVolumesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var volume_ = HcloudFunctions.getVolumes();\n\n        final var volume3 = HcloudFunctions.getVolumes(GetVolumesArgs.builder()\n            .withSelector(\"key=value\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  volume_:\n    fn::invoke:\n      Function: hcloud:getVolumes\n      Arguments: {}\n  volume3:\n    fn::invoke:\n      Function: hcloud:getVolumes\n      Arguments:\n        withSelector: key=value\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVolumes.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only volumes with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolumes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getVolumesVolume:getVolumesVolume"
                        },
                        "description": "(list) List of all matching volumes. See `data.hcloud_volume` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "volumes",
                    "id"
                ]
            }
        }
    }
}