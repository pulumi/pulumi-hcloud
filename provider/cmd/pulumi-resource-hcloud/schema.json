{
    "name": "hcloud",
    "description": "A Pulumi package for creating and managing hcloud cloud resources.",
    "keywords": [
        "pulumi",
        "hcloud"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`hcloud` Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud).",
    "repository": "https://github.com/pulumi/pulumi-hcloud",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "hcloud": "HCloud"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing hcloud cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-hcloud` repo](https://github.com/pulumi/pulumi-hcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`hetznercloud/terraform-provider-hcloud` repo](https://github.com/hetznercloud/terraform-provider-hcloud/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-hcloud` repo](https://github.com/pulumi/pulumi-hcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`hetznercloud/terraform-provider-hcloud` repo](https://github.com/hetznercloud/terraform-provider-hcloud/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string"
            },
            "pollInterval": {
                "type": "string"
            },
            "token": {
                "type": "string",
                "description": "The API token to access the Hetzner cloud.\n"
            }
        },
        "defaults": [
            "token"
        ]
    },
    "types": {
        "hcloud:index/FirewallApplyTo:FirewallApplyTo": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "description": "Label Selector to select servers the firewall should be applied to (only one\nof `server` and `label_selector`can be applied in one block)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "integer",
                    "description": "ID of the server you want to apply the firewall to (only one of `server`\nand `label_selector`can be applied in one block)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "labelSelector",
                        "server"
                    ]
                }
            }
        },
        "hcloud:index/FirewallRule:FirewallRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the firewall rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction`\nis `out`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "description": "Direction of the Firewall Rule. `in`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`\nto allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and\n85.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CIDRs that are allowed within this Firewall Rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "direction",
                "protocol"
            ]
        },
        "hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the Load Balancer Algorithm. `round_robin` or `least_connections`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck": {
            "properties": {
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheckHttp:LoadBalancerServiceHealthCheckHttp",
                    "description": "List of http configurations. Required if `protocol` is `http`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "description": "Interval how often the health check will be performed, in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol the health check uses. `http` or `tcp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of tries a health check will be performed until a target will be listed as `unhealthy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "Timeout when a health check try will be canceled if there is no response, in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "interval",
                "port",
                "protocol",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "http",
                        "interval",
                        "port",
                        "protocol",
                        "retries",
                        "timeout"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerServiceHealthCheckHttp:LoadBalancerServiceHealthCheckHttp": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Domain we try to access when performing the Health Check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Path we try to access when performing the Health Check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "response": {
                    "type": "string",
                    "description": "Response we expect to be included in the Target response when a Health Check was performed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS certificate checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of IDs from certificates which the Load Balancer has.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieLifetime": {
                    "type": "integer",
                    "description": "Lifetime of the cookie for sticky session (in seconds). Default: `300`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieName": {
                    "type": "string",
                    "description": "Name of the cookie for sticky session. Default: `HCLBSTICKY`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttp": {
                    "type": "boolean",
                    "description": "Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stickySessions": {
                    "type": "boolean",
                    "description": "Enable sticky sessions\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certificates",
                        "cookieLifetime",
                        "cookieName",
                        "redirectHttp",
                        "stickySessions"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerTarget:LoadBalancerTarget": {
            "properties": {
                "serverId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Load Balancer Algorithm. `round_robin` or `least_connections`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "deprecationMessage": "Does not work. Use the hcloud_load_balancer_target resource instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "hcloud:index/ServerNetwork:ServerNetwork": {
            "properties": {
                "aliasIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Alias IPs the server should have in the Network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ip": {
                    "type": "string",
                    "description": "Specify the IP the server should get in the network\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "(Optional, string) The MAC address the private interface of the server has\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "networkId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "macAddress",
                        "networkId"
                    ]
                }
            }
        },
        "hcloud:index/getCertificatesCertificate:getCertificatesCertificate": {
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fingerprint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notValidAfter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notValidBefore": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "id",
                "labels",
                "notValidAfter",
                "notValidBefore",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getDatacentersDatacenter:getDatacentersDatacenter": {
            "properties": {
                "availableServerTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "supportedServerTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "availableServerTypeIds",
                "description",
                "id",
                "location",
                "name",
                "supportedServerTypeIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFirewallApplyTo:getFirewallApplyTo": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "description": "(string) Label Selector to select servers the firewall is applied to. Empty if a server is directly\nreferenced\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "integer",
                    "description": "(int) ID of a server where the firewall is applied to. `0` if applied to a label_selector\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFirewallRule:getFirewallRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(Optional, string) Description of the firewall rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "description": "(Required, string) Direction of the Firewall Rule. `in`, `out`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "description": "(Required, string) Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "(Required, string) Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "direction"
            ]
        },
        "hcloud:index/getFirewallsFirewall:getFirewallsFirewall": {
            "properties": {
                "applyTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getFirewallsFirewallApplyTo:getFirewallsFirewallApplyTo"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getFirewallsFirewallRule:getFirewallsFirewallRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFirewallsFirewallApplyTo:getFirewallsFirewallApplyTo": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "server": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "server"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFirewallsFirewallRule:getFirewallsFirewallRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "direction": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "direction"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getFloatingIpsFloatingIp:getFloatingIpsFloatingIp": {
            "properties": {
                "deleteProtection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "homeLocation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipNetwork": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteProtection",
                "description",
                "homeLocation",
                "id",
                "ipAddress",
                "ipNetwork",
                "labels",
                "serverId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getImagesImage:getImagesImage": {
            "properties": {
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deprecated": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osFlavor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "osVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rapidDeploy": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selector": {
                    "type": "string",
                    "deprecationMessage": "Please use the with_selector property instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "created",
                "deprecated",
                "description",
                "id",
                "labels",
                "name",
                "osFlavor",
                "osVersion",
                "rapidDeploy",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerAlgorithm:getLoadBalancerAlgorithm": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "(string) Type of the target. `server` or `label_selector`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerService:getLoadBalancerService": {
            "properties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "(int) Port the service connects to the targets on. Can be everything between `1` and `65535`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancerServiceHealthCheck:getLoadBalancerServiceHealthCheck"
                    },
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancerServiceHttp:getLoadBalancerServiceHttp"
                    },
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenPort": {
                    "type": "integer",
                    "description": "(int) Port the service listen on`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "(string) Protocol the health check uses. `http`, `https` or `tcp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "(bool) Enable proxyprotocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPort",
                "healthChecks",
                "https",
                "listenPort",
                "protocol",
                "proxyprotocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHealthCheck:getLoadBalancerServiceHealthCheck": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancerServiceHealthCheckHttp:getLoadBalancerServiceHealthCheckHttp"
                    },
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "description": "(int) Interval how often the health check will be performed, in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "(int) Port the health check tries to connect to. Can be everything between `1` and `65535`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "(string) Protocol the health check uses. `http`, `https` or `tcp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "integer",
                    "description": "(int) Number of tries a health check will be performed until a target will be listed as `unhealthy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "(int) Timeout when a health check try will be canceled if there is no response, in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "interval",
                "port",
                "protocol",
                "retries",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHealthCheckHttp:getLoadBalancerServiceHealthCheckHttp": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "string) Domain we try to access when performing the Health Check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "(string) Path we try to access when performing the Health Check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "response": {
                    "type": "string",
                    "description": "(string) Response we expect to be included in the Target response when a Health Check was performed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(list[int]) We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "description": "(bool) Enable TLS certificate checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "path",
                "response",
                "statusCodes",
                "tls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHttp:getLoadBalancerServiceHttp": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list[int]) List of IDs from certificates which the Load Balancer has.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieLifetime": {
                    "type": "integer",
                    "description": "(int) Lifetime of the cookie for sticky session (in seconds).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieName": {
                    "type": "string",
                    "description": "(string) Name of the cookie for sticky session.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttp": {
                    "type": "boolean",
                    "description": "(string) Determine if all requests from port 80 should be redirected to port 443.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stickySessions": {
                    "type": "boolean",
                    "description": "(string) Determine if sticky sessions are enabled or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificates",
                "cookieLifetime",
                "cookieName",
                "redirectHttp",
                "stickySessions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerTarget:getLoadBalancerTarget": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "description": "(string) Label Selector to add a group of resources based on the label.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverId": {
                    "type": "integer",
                    "description": "(int) ID of the server which should be a target for this Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(string) Type of the target. `server` or `label_selector`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "serverId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancer:getLoadBalancersLoadBalancer": {
            "properties": {
                "algorithms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerAlgorithm:getLoadBalancersLoadBalancerAlgorithm"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteProtection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerService:getLoadBalancersLoadBalancerService"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerTarget:getLoadBalancersLoadBalancerTarget"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "algorithms",
                "deleteProtection",
                "id",
                "ipv4",
                "ipv6",
                "labels",
                "loadBalancerType",
                "location",
                "networkZone",
                "services",
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerAlgorithm:getLoadBalancersLoadBalancerAlgorithm": {
            "properties": {
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerService:getLoadBalancersLoadBalancerService": {
            "properties": {
                "destinationPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerServiceHealthCheck:getLoadBalancersLoadBalancerServiceHealthCheck"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerServiceHttp:getLoadBalancersLoadBalancerServiceHttp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenPort": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPort",
                "healthChecks",
                "https",
                "listenPort",
                "protocol",
                "proxyprotocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerServiceHealthCheck:getLoadBalancersLoadBalancerServiceHealthCheck": {
            "properties": {
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancerServiceHealthCheckHttp:getLoadBalancersLoadBalancerServiceHealthCheckHttp"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "https",
                "interval",
                "port",
                "protocol",
                "retries",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerServiceHealthCheckHttp:getLoadBalancersLoadBalancerServiceHealthCheckHttp": {
            "properties": {
                "domain": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "response": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "path",
                "response",
                "statusCodes",
                "tls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerServiceHttp:getLoadBalancersLoadBalancerServiceHttp": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieLifetime": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stickySessions": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificates",
                "cookieLifetime",
                "cookieName",
                "redirectHttp",
                "stickySessions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancersLoadBalancerTarget:getLoadBalancersLoadBalancerTarget": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "serverId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLocationsLocation:getLocationsLocation": {
            "properties": {
                "city": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "country": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latitude": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "longitude": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "city",
                "country",
                "description",
                "id",
                "latitude",
                "longitude",
                "name",
                "networkZone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getNetworksNetwork:getNetworksNetwork": {
            "properties": {
                "deleteProtection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipRange": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteProtection",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getPlacementGroupsPlacementGroup:getPlacementGroupsPlacementGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "servers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getServerTypesServerType:getServerTypesServerType": {
            "properties": {
                "cores": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cpuType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disk": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cores",
                "cpuType",
                "description",
                "disk",
                "id",
                "memory",
                "name",
                "storageType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getServersServer:getServersServer": {
            "properties": {
                "backupWindow": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backups": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteProtection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "firewallIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "image": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Network": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "iso": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementGroupId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rebuildProtection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rescue": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backupWindow",
                "backups",
                "datacenter",
                "deleteProtection",
                "firewallIds",
                "id",
                "image",
                "ipv4Address",
                "ipv6Address",
                "ipv6Network",
                "iso",
                "labels",
                "location",
                "name",
                "rebuildProtection",
                "rescue",
                "serverType",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getSshKeysSshKey:getSshKeysSshKey": {
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fingerprint",
                "id",
                "labels",
                "name",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getVolumesVolume:getVolumesVolume": {
            "properties": {
                "deleteProtection": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "linuxDevice": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deleteProtection",
                "id",
                "labels",
                "linuxDevice",
                "name",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the hcloud package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "endpoint": {
                "type": "string"
            },
            "pollInterval": {
                "type": "string"
            },
            "token": {
                "type": "string",
                "description": "The API token to access the Hetzner cloud.\n"
            }
        },
        "required": [
            "token"
        ],
        "inputProperties": {
            "endpoint": {
                "type": "string"
            },
            "pollInterval": {
                "type": "string"
            },
            "token": {
                "type": "string",
                "description": "The API token to access the Hetzner cloud.\n"
            }
        },
        "requiredInputs": [
            "token"
        ]
    },
    "resources": {
        "hcloud:index/certificate:Certificate": {
            "description": "Alias for `hcloud.UploadedCertificate` to remain backwards compatible.\nDeprecated.\n",
            "properties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "csharp": {
                            "name": "CertificateContents"
                        }
                    }
                },
                "created": {
                    "type": "string"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fingerprint": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "notValidAfter": {
                    "type": "string"
                },
                "notValidBefore": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "name",
                "notValidAfter",
                "notValidBefore",
                "privateKey",
                "type"
            ],
            "inputProperties": {
                "certificate": {
                    "type": "string",
                    "language": {
                        "csharp": {
                            "name": "CertificateContents"
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "name": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "certificate",
                "privateKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "language": {
                            "csharp": {
                                "name": "CertificateContents"
                            }
                        },
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "fingerprint": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "notValidAfter": {
                        "type": "string"
                    },
                    "notValidBefore": {
                        "type": "string"
                    },
                    "privateKey": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/firewall:Firewall": {
            "description": "Provides a Hetzner Cloud Firewall to represent a Firewall in the Hetzner Cloud.\n\n\n## Import\n\nFirewalls can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/firewall:Firewall myfirewall \u003cid\u003e\n```\n\n ",
            "properties": {
                "applyTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/FirewallApplyTo:FirewallApplyTo"
                    },
                    "description": "Resources the firewall should be assigned to\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/FirewallRule:FirewallRule"
                    },
                    "description": "Configuration of a Rule from this Firewall.\n"
                }
            },
            "required": [
                "applyTos",
                "labels",
                "name"
            ],
            "inputProperties": {
                "applyTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/FirewallApplyTo:FirewallApplyTo"
                    },
                    "description": "Resources the firewall should be assigned to\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/FirewallRule:FirewallRule"
                    },
                    "description": "Configuration of a Rule from this Firewall.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Firewall resources.\n",
                "properties": {
                    "applyTos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/FirewallApplyTo:FirewallApplyTo"
                        },
                        "description": "Resources the firewall should be assigned to\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Firewall.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/FirewallRule:FirewallRule"
                        },
                        "description": "Configuration of a Rule from this Firewall.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/firewallAttachment:FirewallAttachment": {
            "description": "Attaches resource to a Hetzner Cloud Firewall.\n\n*Note*: only one `hcloud.FirewallAttachment` per Firewall is allowed.\nAny resources that should be attached to that Firewall need to be\nspecified in that `hcloud.FirewallAttachment`.\n\n{{% examples %}}\n## Example Usage\n{{% /examples %}}",
            "properties": {
                "firewallId": {
                    "type": "integer",
                    "description": "ID of the firewall the resources\nshould be attached to.\n"
                },
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label selectors used to\nselect resources to attach to the firewall.\n"
                },
                "serverIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of Server IDs to attach to the\nfirewall.\n"
                }
            },
            "required": [
                "firewallId"
            ],
            "inputProperties": {
                "firewallId": {
                    "type": "integer",
                    "description": "ID of the firewall the resources\nshould be attached to.\n"
                },
                "labelSelectors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of label selectors used to\nselect resources to attach to the firewall.\n"
                },
                "serverIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of Server IDs to attach to the\nfirewall.\n"
                }
            },
            "requiredInputs": [
                "firewallId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallAttachment resources.\n",
                "properties": {
                    "firewallId": {
                        "type": "integer",
                        "description": "ID of the firewall the resources\nshould be attached to.\n"
                    },
                    "labelSelectors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of label selectors used to\nselect resources to attach to the firewall.\n"
                    },
                    "serverIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of Server IDs to attach to the\nfirewall.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/floatingIp:FloatingIp": {
            "description": "Provides a Hetzner Cloud Floating IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.\n\n\n## Import\n\nFloating IPs can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/floatingIp:FloatingIp myip \u003cid\u003e\n```\n\n ",
            "properties": {
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Floating IP.\n"
                },
                "homeLocation": {
                    "type": "string",
                    "description": "Home location (routing is optimized for that location). Optional if server_id argument is passed.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "(string) IP Address of the Floating IP.\n"
                },
                "ipNetwork": {
                    "type": "string",
                    "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Floating IP. `ipv4` `ipv6`\n"
                }
            },
            "required": [
                "homeLocation",
                "ipAddress",
                "ipNetwork",
                "name",
                "serverId",
                "type"
            ],
            "inputProperties": {
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Floating IP.\n"
                },
                "homeLocation": {
                    "type": "string",
                    "description": "Home location (routing is optimized for that location). Optional if server_id argument is passed.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Floating IP. `ipv4` `ipv6`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FloatingIp resources.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Floating IP.\n"
                    },
                    "homeLocation": {
                        "type": "string",
                        "description": "Home location (routing is optimized for that location). Optional if server_id argument is passed.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(string) IP Address of the Floating IP.\n"
                    },
                    "ipNetwork": {
                        "type": "string",
                        "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Floating IP.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to assign the Floating IP to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Floating IP. `ipv4` `ipv6`\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/floatingIpAssignment:FloatingIpAssignment": {
            "description": "Provides a Hetzner Cloud Floating IP Assignment to assign a Floating IP to a Hetzner Cloud Server. Deleting a Floating IP Assignment will unassign the Floating IP from the Server.\n\n\n## Import\n\nFloating IP Assignments can be imported using the `floating_ip_id`\n\n```sh\n $ pulumi import hcloud:index/floatingIpAssignment:FloatingIpAssignment myfloatingipassignment \u003cfloating_ip_id\u003e\n```\n\n ",
            "properties": {
                "floatingIpId": {
                    "type": "integer",
                    "description": "ID of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                }
            },
            "required": [
                "floatingIpId",
                "serverId"
            ],
            "inputProperties": {
                "floatingIpId": {
                    "type": "integer",
                    "description": "ID of the Floating IP.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                }
            },
            "requiredInputs": [
                "floatingIpId",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FloatingIpAssignment resources.\n",
                "properties": {
                    "floatingIpId": {
                        "type": "integer",
                        "description": "ID of the Floating IP.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to assign the Floating IP to.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancer:LoadBalancer": {
            "description": "Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.\n\n\n## Import\n\nLoad Balancers can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/loadBalancer:LoadBalancer my_load_balancer \u003cid\u003e\n```\n\n ",
            "properties": {
                "algorithm": {
                    "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                    "description": "Configuration of the algorithm the Load Balancer use.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection.\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "(string) IPv4 Address of the Load Balancer.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "(string) IPv6 Address of the Load Balancer.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "loadBalancerType": {
                    "type": "string",
                    "description": "Type of the Load Balancer.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the Load Balancer. Require when no network_zone is set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Load Balancer.\n"
                },
                "networkId": {
                    "type": "integer"
                },
                "networkIp": {
                    "type": "string"
                },
                "networkZone": {
                    "type": "string",
                    "description": "Network Zone of the Load Balancer. Require when no location is set.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                    },
                    "deprecationMessage": "Use hcloud_load_balancer_target resource instead. This allows the full control over the selected targets."
                }
            },
            "required": [
                "algorithm",
                "ipv4",
                "ipv6",
                "labels",
                "loadBalancerType",
                "location",
                "name",
                "networkId",
                "networkIp",
                "networkZone",
                "targets"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                    "description": "Configuration of the algorithm the Load Balancer use.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "loadBalancerType": {
                    "type": "string",
                    "description": "Type of the Load Balancer.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the Load Balancer. Require when no network_zone is set.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Load Balancer.\n"
                },
                "networkZone": {
                    "type": "string",
                    "description": "Network Zone of the Load Balancer. Require when no location is set.\n",
                    "willReplaceOnChanges": true
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                    },
                    "deprecationMessage": "Use hcloud_load_balancer_target resource instead. This allows the full control over the selected targets."
                }
            },
            "requiredInputs": [
                "loadBalancerType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancer resources.\n",
                "properties": {
                    "algorithm": {
                        "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                        "description": "Configuration of the algorithm the Load Balancer use.\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "(string) IPv6 Address of the Load Balancer.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "loadBalancerType": {
                        "type": "string",
                        "description": "Type of the Load Balancer.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of the Load Balancer. Require when no network_zone is set.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Load Balancer.\n"
                    },
                    "networkId": {
                        "type": "integer"
                    },
                    "networkIp": {
                        "type": "string"
                    },
                    "networkZone": {
                        "type": "string",
                        "description": "Network Zone of the Load Balancer. Require when no location is set.\n",
                        "willReplaceOnChanges": true
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                        },
                        "deprecationMessage": "Use hcloud_load_balancer_target resource instead. This allows the full control over the selected targets."
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerNetwork:LoadBalancerNetwork": {
            "description": "Provides a Hetzner Cloud Load Balancer Network to represent a private network on a Load Balancer in the Hetzner Cloud.\n\n\n## Import\n\nLoad Balancer Network entries can be imported using a compound ID with the following format`\u003cload-balancer-id\u003e-\u003cnetwork-id\u003e`\n\n```sh\n $ pulumi import hcloud:index/loadBalancerNetwork:LoadBalancerNetwork myloadbalancernetwork 123-654\n```\n\n ",
            "properties": {
                "enablePublicInterface": {
                    "type": "boolean",
                    "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n"
                }
            },
            "required": [
                "ip",
                "loadBalancerId"
            ],
            "inputProperties": {
                "enablePublicInterface": {
                    "type": "boolean",
                    "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer.\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "loadBalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerNetwork resources.\n",
                "properties": {
                    "enablePublicInterface": {
                        "type": "boolean",
                        "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerId": {
                        "type": "integer",
                        "description": "ID of the Load Balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerService:LoadBalancerService": {
            "description": "Define services for Hetzner Cloud Load Balancers.\n\n\n## Import\n\nLoad Balancer Service entries can be imported using a compound ID with the following format`\u003cload-balancer-id\u003e__\u003clisten-port\u003e`\n\n```sh\n $ pulumi import hcloud:index/loadBalancerService:LoadBalancerService myloadbalancernetwork 123__80\n```\n\n ",
            "properties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                    "description": "List of health check configurations when `protocol` is `http` or `https`.\n"
                },
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                    "description": "List of http configurations when `protocol` is `http` or `https`.\n"
                },
                "listenPort": {
                    "type": "integer",
                    "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "Id of the load balancer this service belongs to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the service. `http`, `https` or `tcp`\n"
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "Enable proxyprotocol.\n"
                }
            },
            "required": [
                "destinationPort",
                "healthCheck",
                "http",
                "listenPort",
                "loadBalancerId",
                "protocol",
                "proxyprotocol"
            ],
            "inputProperties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                    "description": "List of health check configurations when `protocol` is `http` or `https`.\n"
                },
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                    "description": "List of http configurations when `protocol` is `http` or `https`.\n"
                },
                "listenPort": {
                    "type": "integer",
                    "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "Id of the load balancer this service belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the service. `http`, `https` or `tcp`\n",
                    "willReplaceOnChanges": true
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "Enable proxyprotocol.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerService resources.\n",
                "properties": {
                    "destinationPort": {
                        "type": "integer",
                        "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                        "description": "List of health check configurations when `protocol` is `http` or `https`.\n"
                    },
                    "http": {
                        "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                        "description": "List of http configurations when `protocol` is `http` or `https`.\n"
                    },
                    "listenPort": {
                        "type": "integer",
                        "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "Id of the load balancer this service belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol of the service. `http`, `https` or `tcp`\n",
                        "willReplaceOnChanges": true
                    },
                    "proxyprotocol": {
                        "type": "boolean",
                        "description": "Enable proxyprotocol.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerTarget:LoadBalancerTarget": {
            "description": "Adds a target to a Hetzner Cloud Load Balancer.\n",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer to which\nthe target gets attached.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                }
            },
            "required": [
                "loadBalancerId",
                "type",
                "usePrivateIp"
            ],
            "inputProperties": {
                "ip": {
                    "type": "string",
                    "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n",
                    "willReplaceOnChanges": true
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer to which\nthe target gets attached.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerTarget resources.\n",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n",
                        "willReplaceOnChanges": true
                    },
                    "labelSelector": {
                        "type": "string",
                        "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerId": {
                        "type": "integer",
                        "description": "ID of the Load Balancer to which\nthe target gets attached.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                    },
                    "usePrivateIp": {
                        "type": "boolean",
                        "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/managedCertificate:ManagedCertificate": {
            "description": "Obtain a Hetzner Cloud managed TLS certificate.\n\n\n## Import\n\nManaged certificates can be imported using their `id`hcl\n\n```sh\n $ pulumi import hcloud:index/managedCertificate:ManagedCertificate sample_certificate \u003cid\u003e\n```\n\n ",
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "(string) PEM encoded TLS certificate.\n"
                },
                "created": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list) Domains and subdomains covered by the certificate.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "(string) Fingerprint of the certificate.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "name",
                "notValidAfter",
                "notValidBefore",
                "type"
            ],
            "inputProperties": {
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list) Domains and subdomains covered by the certificate.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                }
            },
            "requiredInputs": [
                "domainNames"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedCertificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "(string) PEM encoded TLS certificate.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) Domains and subdomains covered by the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the certificate.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Certificate.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/network:Network": {
            "description": "Provides a Hetzner Cloud Network to represent a Network in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst privNet = new hcloud.Network(\"privNet\", {\n    ipRange: \"10.0.1.0/24\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nNetworks can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/network:Network myip \u003cid\u003e\n```\n\n ",
            "properties": {
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network to create (must be unique per project).\n"
                }
            },
            "required": [
                "ipRange",
                "name"
            ],
            "inputProperties": {
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection.\n"
                },
                "ipRange": {
                    "type": "string",
                    "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network to create (must be unique per project).\n"
                }
            },
            "requiredInputs": [
                "ipRange"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n",
                        "willReplaceOnChanges": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network to create (must be unique per project).\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/networkRoute:NetworkRoute": {
            "description": "Provides a Hetzner Cloud Network Route to represent a Network route in the Hetzner Cloud.\n\n\n## Import\n\nNetwork Route entries can be imported using a compound ID with the following format`\u003cnetwork-id\u003e-\u003cdestination\u003e`\n\n```sh\n $ pulumi import hcloud:index/networkRoute:NetworkRoute myroute 123-10.0.0.0/16\n```\n\n ",
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the route should be added to.\n"
                }
            },
            "required": [
                "destination",
                "gateway",
                "networkId"
            ],
            "inputProperties": {
                "destination": {
                    "type": "string",
                    "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n",
                    "willReplaceOnChanges": true
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the route should be added to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "destination",
                "gateway",
                "networkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkRoute resources.\n",
                "properties": {
                    "destination": {
                        "type": "string",
                        "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n",
                        "willReplaceOnChanges": true
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the Network the route should be added to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/networkSubnet:NetworkSubnet": {
            "description": "Provides a Hetzner Cloud Network Subnet to represent a Subnet in the Hetzner Cloud.\n\n\n## Import\n\nNetwork Subnet entries can be imported using a compound ID with the following format`\u003cnetwork-id\u003e-\u003cip_range\u003e`\n\n```sh\n $ pulumi import hcloud:index/networkSubnet:NetworkSubnet mysubnet 123-10.0.0.0/24\n```\n\n ",
            "properties": {
                "gateway": {
                    "type": "string"
                },
                "ipRange": {
                    "type": "string",
                    "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the subnet should be added to.\n"
                },
                "networkZone": {
                    "type": "string",
                    "description": "Name of network zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of subnet. `server`, `cloud` or `vswitch`\n"
                },
                "vswitchId": {
                    "type": "integer",
                    "description": "ID of the vswitch, Required if type is `vswitch`\n"
                }
            },
            "required": [
                "gateway",
                "ipRange",
                "networkId",
                "networkZone",
                "type"
            ],
            "inputProperties": {
                "ipRange": {
                    "type": "string",
                    "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the subnet should be added to.\n",
                    "willReplaceOnChanges": true
                },
                "networkZone": {
                    "type": "string",
                    "description": "Name of network zone.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of subnet. `server`, `cloud` or `vswitch`\n",
                    "willReplaceOnChanges": true
                },
                "vswitchId": {
                    "type": "integer",
                    "description": "ID of the vswitch, Required if type is `vswitch`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipRange",
                "networkId",
                "networkZone",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkSubnet resources.\n",
                "properties": {
                    "gateway": {
                        "type": "string"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the Network the subnet should be added to.\n",
                        "willReplaceOnChanges": true
                    },
                    "networkZone": {
                        "type": "string",
                        "description": "Name of network zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of subnet. `server`, `cloud` or `vswitch`\n",
                        "willReplaceOnChanges": true
                    },
                    "vswitchId": {
                        "type": "integer",
                        "description": "ID of the vswitch, Required if type is `vswitch`\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/placementGroup:PlacementGroup": {
            "description": "Provides a Hetzner Cloud Placement Group to represent a Placement Group in the Hetzner Cloud.\n\n\n## Import\n\nPlacement Groups can be imported using its `id`\n\n```sh\n $ pulumi import hcloud:index/placementGroup:PlacementGroup my-placement-group \u003cid\u003e\n```\n\n ",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Placement Group.\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Placement Group.\n"
                }
            },
            "required": [
                "name",
                "servers",
                "type"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Placement Group.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Placement Group.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlacementGroup resources.\n",
                "properties": {
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Placement Group.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Placement Group.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/rdns:Rdns": {
            "description": "Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Servers, Floating IPs or Load Balancers.\n\n\n## Import\n\nReverse DNS entries can be imported using a compound ID with the following format`\u003cprefix (s for server/ f for floating ip / l for load balancer)\u003e-\u003cserver, floating ip or load balancer ID\u003e-\u003cIP address\u003e` # import reverse dns entry on server with id 123, ip 192.168.100.1\n\n```sh\n $ pulumi import hcloud:index/rdns:Rdns myrdns s-123-192.168.100.1\n```\n\n # import reverse dns entry on floating ip with id 123, ip 2001:db8::1\n\n```sh\n $ pulumi import hcloud:index/rdns:Rdns myrdns f-123-2001:db8::1\n```\n\n # import reverse dns entry on load balancer with id 123, ip 2001:db8::1\n\n```sh\n $ pulumi import hcloud:index/rdns:Rdns myrdns l-123-2001:db8::1\n```\n\n ",
            "properties": {
                "dnsPtr": {
                    "type": "string",
                    "description": "The DNS address the `ip_address` should resolve to.\n"
                },
                "floatingIpId": {
                    "type": "integer",
                    "description": "The Floating IP the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address that should point to `dns_ptr`.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "The Load Balancer the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "The server the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n"
                }
            },
            "required": [
                "dnsPtr",
                "ipAddress"
            ],
            "inputProperties": {
                "dnsPtr": {
                    "type": "string",
                    "description": "The DNS address the `ip_address` should resolve to.\n"
                },
                "floatingIpId": {
                    "type": "integer",
                    "description": "The Floating IP the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address that should point to `dns_ptr`.\n",
                    "willReplaceOnChanges": true
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "The Load Balancer the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "integer",
                    "description": "The server the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dnsPtr",
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rdns resources.\n",
                "properties": {
                    "dnsPtr": {
                        "type": "string",
                        "description": "The DNS address the `ip_address` should resolve to.\n"
                    },
                    "floatingIpId": {
                        "type": "integer",
                        "description": "The Floating IP the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address that should point to `dns_ptr`.\n",
                        "willReplaceOnChanges": true
                    },
                    "loadBalancerId": {
                        "type": "integer",
                        "description": "The Load Balancer the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "The server the `ip_address` belongs to. Specify only one of `server_id`, `floating_ip_id` and `load_balancer_id`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/server:Server": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic server creation\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\n// Create a new server running debian\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-9\",\n    serverType: \"cx11\",\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nServers can be imported using the server `id`\n\n```sh\n $ pulumi import hcloud:index/server:Server myserver \u003cid\u003e\n```\n\n ",
            "properties": {
                "backupWindow": {
                    "type": "string",
                    "description": "(string) The backup window of the server, if enabled.\n",
                    "deprecationMessage": "You should remove this property from your terraform configuration."
                },
                "backups": {
                    "type": "boolean",
                    "description": "Enable or disable backups.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter name to create the server in.\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection (Needs to be the same as `rebuild_protection`).\n"
                },
                "firewallIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Firewall IDs the server should be attached to on creation.\n"
                },
                "ignoreRemoteFirewallIds": {
                    "type": "boolean",
                    "description": "Ingores any updates\nto the `firewall_ids` argument which were received from the server.\nThis should not be used in normal cases. See the documentation of the\n`hcloud.FirewallAttachment` resouce for a reason to use this\nargument.\n"
                },
                "image": {
                    "type": "string",
                    "description": "(string) Name or ID of the image the server was created from.\n"
                },
                "ipv4Address": {
                    "type": "string",
                    "description": "(string) The IPv4 address.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "(string) The first IPv6 address of the assigned network.\n"
                },
                "ipv6Network": {
                    "type": "string",
                    "description": "(string) The IPv6 network.\n"
                },
                "iso": {
                    "type": "string",
                    "description": "ID or Name of an ISO image to mount.\n"
                },
                "keepDisk": {
                    "type": "boolean",
                    "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name to create the server in. `nbg1`, `fsn1`, `hel1` or `ash`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/ServerNetwork:ServerNetwork"
                    },
                    "description": "Network the server should be attached to on creation. (Can be specified multiple times)\n"
                },
                "placementGroupId": {
                    "type": "integer",
                    "description": "Placement Group ID the server added to on creation.\n"
                },
                "rebuildProtection": {
                    "type": "boolean",
                    "description": "Enable or disable rebuild protection (Needs to be the same as `delete_protection`).\n"
                },
                "rescue": {
                    "type": "string",
                    "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Name of the server type this server should be created with.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSH key IDs or names which should be injected into the server at creation time\n"
                },
                "status": {
                    "type": "string",
                    "description": "(string) The status of the server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Cloud-Init user data to use during server creation\n"
                }
            },
            "required": [
                "backupWindow",
                "datacenter",
                "firewallIds",
                "ipv4Address",
                "ipv6Address",
                "ipv6Network",
                "location",
                "name",
                "serverType",
                "status"
            ],
            "inputProperties": {
                "backups": {
                    "type": "boolean",
                    "description": "Enable or disable backups.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter name to create the server in.\n",
                    "willReplaceOnChanges": true
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection (Needs to be the same as `rebuild_protection`).\n"
                },
                "firewallIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Firewall IDs the server should be attached to on creation.\n"
                },
                "ignoreRemoteFirewallIds": {
                    "type": "boolean",
                    "description": "Ingores any updates\nto the `firewall_ids` argument which were received from the server.\nThis should not be used in normal cases. See the documentation of the\n`hcloud.FirewallAttachment` resouce for a reason to use this\nargument.\n"
                },
                "image": {
                    "type": "string",
                    "description": "(string) Name or ID of the image the server was created from.\n",
                    "willReplaceOnChanges": true
                },
                "iso": {
                    "type": "string",
                    "description": "ID or Name of an ISO image to mount.\n"
                },
                "keepDisk": {
                    "type": "boolean",
                    "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name to create the server in. `nbg1`, `fsn1`, `hel1` or `ash`\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/ServerNetwork:ServerNetwork"
                    },
                    "description": "Network the server should be attached to on creation. (Can be specified multiple times)\n"
                },
                "placementGroupId": {
                    "type": "integer",
                    "description": "Placement Group ID the server added to on creation.\n"
                },
                "rebuildProtection": {
                    "type": "boolean",
                    "description": "Enable or disable rebuild protection (Needs to be the same as `delete_protection`).\n"
                },
                "rescue": {
                    "type": "string",
                    "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Name of the server type this server should be created with.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSH key IDs or names which should be injected into the server at creation time\n",
                    "willReplaceOnChanges": true
                },
                "userData": {
                    "type": "string",
                    "description": "Cloud-Init user data to use during server creation\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "backupWindow": {
                        "type": "string",
                        "description": "(string) The backup window of the server, if enabled.\n",
                        "deprecationMessage": "You should remove this property from your terraform configuration."
                    },
                    "backups": {
                        "type": "boolean",
                        "description": "Enable or disable backups.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter name to create the server in.\n",
                        "willReplaceOnChanges": true
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection (Needs to be the same as `rebuild_protection`).\n"
                    },
                    "firewallIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Firewall IDs the server should be attached to on creation.\n"
                    },
                    "ignoreRemoteFirewallIds": {
                        "type": "boolean",
                        "description": "Ingores any updates\nto the `firewall_ids` argument which were received from the server.\nThis should not be used in normal cases. See the documentation of the\n`hcloud.FirewallAttachment` resouce for a reason to use this\nargument.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "(string) Name or ID of the image the server was created from.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipv4Address": {
                        "type": "string",
                        "description": "(string) The IPv4 address.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "(string) The first IPv6 address of the assigned network.\n"
                    },
                    "ipv6Network": {
                        "type": "string",
                        "description": "(string) The IPv6 network.\n"
                    },
                    "iso": {
                        "type": "string",
                        "description": "ID or Name of an ISO image to mount.\n"
                    },
                    "keepDisk": {
                        "type": "boolean",
                        "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location name to create the server in. `nbg1`, `fsn1`, `hel1` or `ash`\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/ServerNetwork:ServerNetwork"
                        },
                        "description": "Network the server should be attached to on creation. (Can be specified multiple times)\n"
                    },
                    "placementGroupId": {
                        "type": "integer",
                        "description": "Placement Group ID the server added to on creation.\n"
                    },
                    "rebuildProtection": {
                        "type": "boolean",
                        "description": "Enable or disable rebuild protection (Needs to be the same as `delete_protection`).\n"
                    },
                    "rescue": {
                        "type": "string",
                        "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`\n"
                    },
                    "serverType": {
                        "type": "string",
                        "description": "Name of the server type this server should be created with.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSH key IDs or names which should be injected into the server at creation time\n",
                        "willReplaceOnChanges": true
                    },
                    "status": {
                        "type": "string",
                        "description": "(string) The status of the server.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "Cloud-Init user data to use during server creation\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/serverNetwork:ServerNetwork": {
            "description": "Provides a Hetzner Cloud Server Network to represent a private network on a server in the Hetzner Cloud.\n\n\n## Import\n\nServer Network entries can be imported using a compound ID with the following format`\u003cserver-id\u003e-\u003cnetwork-id\u003e`\n\n```sh\n $ pulumi import hcloud:index/serverNetwork:ServerNetwork myservernetwork 123-654\n```\n\n ",
            "properties": {
                "aliasIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional IPs to be assigned\nto this server.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n"
                }
            },
            "required": [
                "ip",
                "macAddress",
                "serverId"
            ],
            "inputProperties": {
                "aliasIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional IPs to be assigned\nto this server.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n",
                    "willReplaceOnChanges": true
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n",
                    "willReplaceOnChanges": true
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server.\n",
                    "willReplaceOnChanges": true
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerNetwork resources.\n",
                "properties": {
                    "aliasIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional IPs to be assigned\nto this server.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n",
                        "willReplaceOnChanges": true
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "ID of the server.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/snapshot:Snapshot": {
            "description": "Provides a Hetzner Cloud snapshot to represent an image with type snapshot in the Hetzner Cloud. This resource makes it easy to create a snapshot of your server.\n\n\n## Import\n\nSnapshots can be imported using its image `id`\n\n```sh\n $ pulumi import hcloud:index/snapshot:Snapshot myimage \u003cid\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the snapshot.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to the snapshot should be created from.\n"
                }
            },
            "required": [
                "serverId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the snapshot.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to the snapshot should be created from.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Snapshot resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the snapshot.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to the snapshot should be created from.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/sshKey:SshKey": {
            "description": "Provides a Hetzner Cloud SSH key resource to manage SSH keys for server access.\n\n\n## Import\n\nSSH keys can be imported using the SSH key `id`\n\n```sh\n $ pulumi import hcloud:index/sshKey:SshKey mykey \u003cid\u003e\n```\n\n ",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "(string) The fingerprint of the SSH key\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "publicKey"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) The fingerprint of the SSH key\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SSH key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it can be read using the file interpolation function\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/uploadedCertificate:UploadedCertificate": {
            "description": "Upload a TLS certificate to Hetzner Cloud.\n\n\n## Import\n\nUploaded certificates can be imported using their `id`hcl\n\n```sh\n $ pulumi import hcloud:index/uploadedCertificate:UploadedCertificate sample_certificate \u003cid\u003e\n```\n\n ",
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "PEM encoded TLS certificate.\n"
                },
                "created": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list) Domains and subdomains covered by the certificate.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "(string) Fingerprint of the certificate.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "PEM encoded private key belonging to the certificate.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "name",
                "notValidAfter",
                "notValidBefore",
                "privateKey",
                "type"
            ],
            "inputProperties": {
                "certificate": {
                    "type": "string",
                    "description": "PEM encoded TLS certificate.\n",
                    "willReplaceOnChanges": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "PEM encoded private key belonging to the certificate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "certificate",
                "privateKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UploadedCertificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "PEM encoded TLS certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) Domains and subdomains covered by the certificate.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the certificate.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Certificate.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "PEM encoded private key belonging to the certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/volume:Volume": {
            "description": "Provides a Hetzner Cloud volume resource to manage volumes.\n\n\n## Import\n\nVolumes can be imported using their `id`\n\n```sh\n $ pulumi import hcloud:index/volume:Volume myvolume \u003cid\u003e\n```\n\n ",
            "properties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Format volume after creation. `xfs` or `ext4`\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(map) User-defined labels (key-value pairs).\n"
                },
                "linuxDevice": {
                    "type": "string",
                    "description": "(string) Device path on the file system for the Volume.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the volume to create, not allowed if server_id argument is passed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the volume to create (must be unique per project).\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to, not allowed if location argument is passed.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the volume (in GB).\n"
                }
            },
            "required": [
                "linuxDevice",
                "location",
                "name",
                "serverId",
                "size"
            ],
            "inputProperties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                },
                "deleteProtection": {
                    "type": "boolean",
                    "description": "Enable or disable delete protection.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Format volume after creation. `xfs` or `ext4`\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(map) User-defined labels (key-value pairs).\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the volume to create, not allowed if server_id argument is passed.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the volume to create (must be unique per project).\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to, not allowed if location argument is passed.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the volume (in GB).\n"
                }
            },
            "requiredInputs": [
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "automount": {
                        "type": "boolean",
                        "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "Enable or disable delete protection.\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "Format volume after creation. `xfs` or `ext4`\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs).\n"
                    },
                    "linuxDevice": {
                        "type": "string",
                        "description": "(string) Device path on the file system for the Volume.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of the volume to create, not allowed if server_id argument is passed.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the volume to create (must be unique per project).\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to attach the Volume to, not allowed if location argument is passed.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the volume (in GB).\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/volumeAttachment:VolumeAttachment": {
            "description": "Provides a Hetzner Cloud Volume attachment to attach a Volume to a Hetzner Cloud Server. Deleting a Volume Attachment will detach the Volume from the Server.\n\n\n## Import\n\nVolume Attachments can be imported using the `volume_id`\n\n```sh\n $ pulumi import hcloud:index/volumeAttachment:VolumeAttachment myvolumeattachment \u003cvolume_id\u003e\n```\n\n ",
            "properties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "ID of the Volume.\n"
                }
            },
            "required": [
                "automount",
                "serverId",
                "volumeId"
            ],
            "inputProperties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to.\n",
                    "willReplaceOnChanges": true
                },
                "volumeId": {
                    "type": "integer",
                    "description": "ID of the Volume.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serverId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeAttachment resources.\n",
                "properties": {
                    "automount": {
                        "type": "boolean",
                        "description": "Automount the volume upon attaching it.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to attach the Volume to.\n",
                        "willReplaceOnChanges": true
                    },
                    "volumeId": {
                        "type": "integer",
                        "description": "ID of the Volume.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "hcloud:index/getCertificate:getCertificate": {
            "description": "Provides details about a specific Hetzner Cloud Certificate.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sampleCertificate1 = pulumi.output(hcloud.getCertificate({\n    name: \"sample-certificate-1\",\n}));\nconst sampleCertificate2 = pulumi.output(hcloud.getCertificate({\n    id: 4711,\n}));\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificate.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the certificate.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCertificate.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "(string) PEM encoded TLS certificate.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) Domains and subdomains covered by the certificate.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the certificate.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the certificate.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs) assigned to the certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Certificate.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificate",
                    "created",
                    "domainNames",
                    "fingerprint",
                    "id",
                    "labels",
                    "notValidAfter",
                    "notValidBefore",
                    "type"
                ]
            }
        },
        "hcloud:index/getCertificates:getCertificates": {
            "description": "Provides details about multiple Hetzner Cloud Certificates.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sampleCertificate1 = pulumi.output(hcloud.getCertificates({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificates.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCertificates.\n",
                "properties": {
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getCertificatesCertificate:getCertificatesCertificate"
                        },
                        "description": "(list) List of all matching certificates. See `data.hcloud_certificate` for schema.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificates",
                    "id"
                ]
            }
        },
        "hcloud:index/getDatacenter:getDatacenter": {
            "description": "Provides details about a specific Hetzner Cloud Datacenter.\nUse this resource to get detailed information about specific datacenter.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ds1 = pulumi.output(hcloud.getDatacenter({\n    name: \"fsn1-dc8\",\n}));\nconst ds2 = pulumi.output(hcloud.getDatacenter({\n    id: 4,\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatacenter.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the datacenter.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the datacenter.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatacenter.\n",
                "properties": {
                    "availableServerTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(list) List of available server types.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the datacenter.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the datacenter.\n"
                    },
                    "location": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) Physical datacenter location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the datacenter.\n"
                    },
                    "supportedServerTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(list) List of server types supported by the datacenter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "availableServerTypeIds",
                    "description",
                    "id",
                    "location",
                    "name",
                    "supportedServerTypeIds"
                ]
            }
        },
        "hcloud:index/getDatacenters:getDatacenters": {
            "description": "Provides a list of available Hetzner Cloud Datacenters.\nThis resource may be useful to create highly available infrastructure, distributed across several datacenters.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatacenters.\n",
                "properties": {
                    "datacenterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique datacenter identifiers.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatacenters.\n",
                "properties": {
                    "datacenterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique datacenter identifiers.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    },
                    "datacenters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getDatacentersDatacenter:getDatacentersDatacenter"
                        },
                        "description": "(list) List of all datacenters. See `data.hcloud_datacenter` for schema.\n"
                    },
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of all datacenter descriptions.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of datacenter names.\n",
                        "deprecationMessage": "Use datacenters list instead"
                    }
                },
                "type": "object",
                "required": [
                    "datacenters",
                    "descriptions",
                    "names",
                    "id"
                ]
            }
        },
        "hcloud:index/getFirewall:getFirewall": {
            "description": "Provides details about a specific Hetzner Cloud Firewall.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sampleFirewall1 = pulumi.output(hcloud.getFirewall({\n    name: \"sample-firewall-1\",\n}));\nconst sampleFirewall2 = pulumi.output(hcloud.getFirewall({\n    id: 4711,\n}));\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewall.\n",
                "properties": {
                    "applyTos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallApplyTo:getFirewallApplyTo"
                        },
                        "description": "Configuration of the Applied Resources\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the firewall.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Return most recent firewall if multiple are found.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the firewall.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallRule:getFirewallRule"
                        },
                        "description": "(string)  Configuration of a Rule from this Firewall.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewall.\n",
                "properties": {
                    "applyTos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallApplyTo:getFirewallApplyTo"
                        },
                        "description": "Configuration of the Applied Resources\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Firewall.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Firewall.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallRule:getFirewallRule"
                        },
                        "description": "(string)  Configuration of a Rule from this Firewall.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            }
        },
        "hcloud:index/getFirewalls:getFirewalls": {
            "description": "Provides details about multiple Hetzner Cloud Firewall.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst sampleFirewall1 = pulumi.output(hcloud.getFirewalls({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewalls.\n",
                "properties": {
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Sorts list by date.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewalls.\n",
                "properties": {
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFirewallsFirewall:getFirewallsFirewall"
                        },
                        "description": "(list) List of all matching firewalls. See `data.hcloud_firewall` for schema.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "firewalls",
                    "id"
                ]
            }
        },
        "hcloud:index/getFloatingIp:getFloatingIp": {
            "description": "Provides details about a Hetzner Cloud Floating IP.\n\nThis resource can be useful when you need to determine a Floating IP ID based on the IP address.\n\n{{% examples %}}\n## Example Usage\n\n# Data Source: hcloud.FloatingIp\nProvides details about a Hetzner Cloud Floating IP.\nThis resource can be useful when you need to determine a Floating IP ID based on the IP address.\n\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIp.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Floating IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address of the Floating IP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Floating IP.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIp.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(boolean) Whether delete protection is enabled.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the Floating IP.\n"
                    },
                    "homeLocation": {
                        "type": "string",
                        "description": "(string) Home location.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Floating IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(string) IP Address of the Floating IP.\n"
                    },
                    "ipNetwork": {
                        "type": "string",
                        "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Floating IP.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "(int) Server to assign the Floating IP is assigned to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) Type of the Floating IP.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deleteProtection",
                    "description",
                    "homeLocation",
                    "id",
                    "ipAddress",
                    "ipNetwork",
                    "labels",
                    "serverId",
                    "type"
                ]
            }
        },
        "hcloud:index/getFloatingIps:getFloatingIps": {
            "description": "Provides details about multiple Hetzner Cloud Floating IPs.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ip2 = pulumi.output(hcloud.getFloatingIps({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIps.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIps.\n",
                "properties": {
                    "floatingIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getFloatingIpsFloatingIp:getFloatingIpsFloatingIp"
                        },
                        "description": "(list) List of all matching floating ips. See `data.hcloud_floating_ip` for schema.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "floatingIps",
                    "id"
                ]
            }
        },
        "hcloud:index/getImage:getImage": {
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Image.\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "If more than one result is returned, use the most recent Image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Image.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only images with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "(string) Date when the Image was created (in ISO-8601 format).\n"
                    },
                    "deprecated": {
                        "type": "string",
                        "description": "(string) Point in time when the image is considered to be deprecated (in ISO-8601 format).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the Image.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Image.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Image, only present when the Image is of type `system`.\n"
                    },
                    "osFlavor": {
                        "type": "string",
                        "description": "(string) Flavor of operating system contained in the image, could be `ubuntu`, `centos`, `debian`, `fedora` or `unknown`.\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "(string) Operating system version.\n"
                    },
                    "rapidDeploy": {
                        "type": "boolean",
                        "description": "(bool) Indicates that rapid deploy of the image is available.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) Type of the Image, could be `system`, `backup` or `snapshot`.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "deprecated",
                    "description",
                    "id",
                    "labels",
                    "name",
                    "osFlavor",
                    "osVersion",
                    "rapidDeploy",
                    "type"
                ]
            }
        },
        "hcloud:index/getImages:getImages": {
            "description": "Provides details about multiple Hetzner Cloud Images.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst image2 = pulumi.output(hcloud.getImages());\nconst image3 = pulumi.output(hcloud.getImages({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImages.\n",
                "properties": {
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Sorts list by date.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only images with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImages.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getImagesImage:getImagesImage"
                        },
                        "description": "(list) List of all matching images. See `data.hcloud_image` for schema.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "images",
                    "id"
                ]
            }
        },
        "hcloud:index/getLoadBalancer:getLoadBalancer": {
            "description": "Provides details about a specific Hetzner Cloud Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst lb1 = pulumi.output(hcloud.getLoadBalancer({\n    name: \"my-load-balancer\",\n}));\nconst lb2 = pulumi.output(hcloud.getLoadBalancer({\n    id: 123,\n}));\nconst lb3 = pulumi.output(hcloud.getLoadBalancer({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadBalancer.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Load Balancer.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Load Balancer.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadBalancer.\n",
                "properties": {
                    "algorithms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancerAlgorithm:getLoadBalancerAlgorithm"
                        },
                        "description": "(Optional) Configuration of the algorithm the Load Balancer use.\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(boolean) Whether delete protection is enabled.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Load Balancer.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs) .\n"
                    },
                    "loadBalancerType": {
                        "type": "string",
                        "description": "(string) Name of the Type of the Load Balancer.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) Name of the location the Load Balancer is in.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Load Balancer.\n"
                    },
                    "networkZone": {
                        "type": "string"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancerService:getLoadBalancerService"
                        },
                        "description": "(list) List of services a Load Balancer provides.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancerTarget:getLoadBalancerTarget"
                        },
                        "description": "(list) List of targets of the Load Balancer.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "algorithms",
                    "deleteProtection",
                    "id",
                    "ipv4",
                    "ipv6",
                    "labels",
                    "loadBalancerType",
                    "location",
                    "networkZone",
                    "services",
                    "targets"
                ]
            }
        },
        "hcloud:index/getLoadBalancers:getLoadBalancers": {
            "description": "Provides details about multiple Hetzner Cloud Load Balancers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst lb2 = pulumi.output(hcloud.getLoadBalancers());\nconst lb3 = pulumi.output(hcloud.getLoadBalancers({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadBalancers.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadBalancers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancersLoadBalancer:getLoadBalancersLoadBalancer"
                        },
                        "description": "(list) List of all matching load balancers. See `data.hcloud_load_balancer` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "loadBalancers",
                    "id"
                ]
            }
        },
        "hcloud:index/getLocation:getLocation": {
            "description": "Provides details about a specific Hetzner Cloud Location.\nUse this resource to get detailed information about specific location.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst l1 = pulumi.output(hcloud.getLocation({\n    name: \"fsn1\",\n}));\nconst l2 = pulumi.output(hcloud.getLocation({\n    id: 1,\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLocation.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the location.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocation.\n",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "(string) City of the location.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "(string) Country of the location.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the location.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the location.\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "(float) Latitude of the city.\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "(float) Longitude of the city.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the location.\n"
                    },
                    "networkZone": {
                        "type": "string",
                        "description": "(string) Network Zone of the location.\n"
                    }
                },
                "type": "object",
                "required": [
                    "city",
                    "country",
                    "description",
                    "id",
                    "latitude",
                    "longitude",
                    "name",
                    "networkZone"
                ]
            }
        },
        "hcloud:index/getLocations:getLocations": {
            "description": "Provides a list of available Hetzner Cloud Locations.\nThis resource may be useful to create highly available infrastructure, distributed across several locations.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLocations.\n",
                "properties": {
                    "locationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique location identifiers.\n",
                        "deprecationMessage": "Use locations list instead"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocations.\n",
                "properties": {
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of all location descriptions.\n",
                        "deprecationMessage": "Use locations list instead"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique location identifiers.\n",
                        "deprecationMessage": "Use locations list instead"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLocationsLocation:getLocationsLocation"
                        },
                        "description": "(list) List of all locations. See `data.hcloud_location` for schema.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of location names.\n",
                        "deprecationMessage": "Use locations list instead"
                    }
                },
                "type": "object",
                "required": [
                    "descriptions",
                    "locations",
                    "names",
                    "id"
                ]
            }
        },
        "hcloud:index/getNetwork:getNetwork": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst network1 = pulumi.output(hcloud.getNetwork({\n    id: 1234,\n}));\nconst network2 = pulumi.output(hcloud.getNetwork({\n    name: \"my-network\",\n}));\nconst network3 = pulumi.output(hcloud.getNetwork({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Network.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "IPv4 prefix of the Network.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(boolean) Whether delete protection is enabled.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique ID of the Network.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "IPv4 prefix of the Network.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "deleteProtection",
                    "id"
                ]
            }
        },
        "hcloud:index/getNetworks:getNetworks": {
            "description": "Provides details about multiple Hetzner Cloud Networks.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst network2 = pulumi.output(hcloud.getNetwork());\nconst network3 = pulumi.output(hcloud.getNetwork({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworks.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetworks.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "networks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getNetworksNetwork:getNetworksNetwork"
                        },
                        "description": "(list) List of all matching networks. See `data.hcloud_network` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "networks",
                    "id"
                ]
            }
        },
        "hcloud:index/getPlacementGroup:getPlacementGroup": {
            "description": "Provides details about a specific Hetzner Cloud Placement Group.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst samplePlacementGroup1 = pulumi.output(hcloud.getPlacementGroup({\n    name: \"sample-placement-group-1\",\n}));\nconst samplePlacementGroup2 = pulumi.output(hcloud.getPlacementGroup({\n    id: 4711,\n}));\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlacementGroup.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the placement group.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Return most recent placement group if multiple are found.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the placement group.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string)  Type of the Placement Group.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPlacementGroup.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Placement Group.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Placement Group.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "(string)  Type of the Placement Group.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "servers"
                ]
            }
        },
        "hcloud:index/getPlacementGroups:getPlacementGroups": {
            "description": "Provides details about multiple Hetzner Cloud Placement Groups.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst samplePlacementGroup1 = pulumi.output(hcloud.getPlacementGroups());\nconst samplePlacementGroup2 = pulumi.output(hcloud.getPlacementGroups({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPlacementGroups.\n",
                "properties": {
                    "mostRecent": {
                        "type": "boolean",
                        "description": "Sorts list by date.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPlacementGroups.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "placementGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getPlacementGroupsPlacementGroup:getPlacementGroupsPlacementGroup"
                        },
                        "description": "(list) List of all matching placement groups. See `data.hcloud_placement_group` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "placementGroups",
                    "id"
                ]
            }
        },
        "hcloud:index/getServer:getServer": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst s1 = pulumi.output(hcloud.getServer({\n    name: \"my-server\",\n}));\nconst s2 = pulumi.output(hcloud.getServer({\n    id: 123,\n}));\nconst s3 = pulumi.output(hcloud.getServer({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServer.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server.\n"
                    },
                    "placementGroupId": {
                        "type": "integer",
                        "description": "(Optional, string) Placement Group ID the server is assigned to.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only servers with the specified status, could contain `initializing`, `starting`, `running`, `stopping`, `off`, `deleting`, `rebuilding`, `migrating`, `unknown`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServer.\n",
                "properties": {
                    "backupWindow": {
                        "type": "string",
                        "description": "(string) The backup window of the server, if enabled.\n"
                    },
                    "backups": {
                        "type": "boolean",
                        "description": "(boolean) Whether backups are enabled.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "(string) The datacenter name.\n"
                    },
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(boolean) Whether delete protection is enabled.\n"
                    },
                    "firewallIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(Optional, list) Firewall IDs the server is attached to.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the server.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "(string) Name or ID of the image the server was created from.\n"
                    },
                    "ipv4Address": {
                        "type": "string",
                        "description": "(string) The IPv4 address.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "(string) The first IPv6 address of the assigned network.\n"
                    },
                    "ipv6Network": {
                        "type": "string",
                        "description": "(string) The IPv6 network.\n"
                    },
                    "iso": {
                        "type": "string",
                        "description": "(string) ID or Name of the mounted ISO image.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) The location name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the server.\n"
                    },
                    "placementGroupId": {
                        "type": "integer",
                        "description": "(Optional, string) Placement Group ID the server is assigned to.\n"
                    },
                    "rebuildProtection": {
                        "type": "boolean",
                        "description": "(boolean) Whether rebuild protection is enabled.\n"
                    },
                    "rescue": {
                        "type": "string"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverType": {
                        "type": "string",
                        "description": "(string) Name of the server type.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(string) The status of the server.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "backupWindow",
                    "backups",
                    "datacenter",
                    "deleteProtection",
                    "firewallIds",
                    "id",
                    "image",
                    "ipv4Address",
                    "ipv6Address",
                    "ipv6Network",
                    "iso",
                    "labels",
                    "location",
                    "name",
                    "rebuildProtection",
                    "rescue",
                    "serverType",
                    "status"
                ]
            }
        },
        "hcloud:index/getServerType:getServerType": {
            "description": "Provides details about a specific Hetzner Cloud Server Type.\nUse this resource to get detailed information about specific Server Type.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ds1 = pulumi.output(hcloud.getServerType({\n    name: \"cx11\",\n}));\nconst ds2 = pulumi.output(hcloud.getServerType({\n    id: 1,\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServerType.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the server_type.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server_type.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServerType.\n",
                "properties": {
                    "cores": {
                        "type": "integer",
                        "description": "(int) Number of cpu cores a Server of this type will have.\n"
                    },
                    "cpuType": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the server_type.\n"
                    },
                    "disk": {
                        "type": "integer",
                        "description": "(int) Disk size a Server of this type will have in GB.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the server_type.\n"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "(int) Memory a Server of this type will have in GB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the server_type.\n"
                    },
                    "storageType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cores",
                    "cpuType",
                    "description",
                    "disk",
                    "id",
                    "memory",
                    "name",
                    "storageType"
                ]
            }
        },
        "hcloud:index/getServerTypes:getServerTypes": {
            "description": "Provides a list of available Hetzner Cloud Server Types.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerTypes.\n",
                "properties": {
                    "serverTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use server_types list instead"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServerTypes.\n",
                "properties": {
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use server_types list instead"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use server_types list instead"
                    },
                    "serverTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "deprecationMessage": "Use server_types list instead"
                    },
                    "serverTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getServerTypesServerType:getServerTypesServerType"
                        },
                        "description": "(list) List of all server types. See `data.hcloud_type` for schema.\n"
                    }
                },
                "type": "object",
                "required": [
                    "descriptions",
                    "names",
                    "serverTypes",
                    "id"
                ]
            }
        },
        "hcloud:index/getServers:getServers": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst s3 = pulumi.output(hcloud.getServers({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getServers.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only servers with the specified status, could contain `initializing`, `starting`, `running`, `stopping`, `off`, `deleting`, `rebuilding`, `migrating`, `unknown`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getServersServer:getServersServer"
                        },
                        "description": "(list) List of all matching servers. See `data.hcloud_server` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "servers",
                    "id"
                ]
            }
        },
        "hcloud:index/getSshKey:getSshKey": {
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "Fingerprint of the SSH Key.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the SSH Key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SSH Key.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the SSH Key.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the SSH Key.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the SSH Key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "(string) Public Key of the SSH Key.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fingerprint",
                    "id",
                    "labels",
                    "name",
                    "publicKey"
                ]
            }
        },
        "hcloud:index/getSshKeys:getSshKeys": {
            "inputs": {
                "description": "A collection of arguments for invoking getSshKeys.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKeys.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getSshKeysSshKey:getSshKeysSshKey"
                        },
                        "description": "(list) List of all matches SSH keys. See `data.hcloud_ssh_key` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sshKeys",
                    "id"
                ]
            }
        },
        "hcloud:index/getVolume:getVolume": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst volume1 = pulumi.output(hcloud.getVolume({\n    id: 1234,\n}));\nconst volume2 = pulumi.output(hcloud.getVolume({\n    name: \"my-volume\",\n}));\nconst volume3 = pulumi.output(hcloud.getVolume({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the volume.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) The location name.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the volume.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "(Optional, int) Server ID the volume is attached to\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only volumes with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "deleteProtection": {
                        "type": "boolean",
                        "description": "(boolean) Whether delete protection is enabled.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the volume.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs).\n"
                    },
                    "linuxDevice": {
                        "type": "string",
                        "description": "(string) Device path on the file system for the Volume.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) The location name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the volume.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "(Optional, int) Server ID the volume is attached to\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "(int) Size of the volume.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "deleteProtection",
                    "id",
                    "labels",
                    "linuxDevice",
                    "name",
                    "size"
                ]
            }
        },
        "hcloud:index/getVolumes:getVolumes": {
            "description": "Provides details about multiple Hetzner Cloud volumes.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst volume_ = pulumi.output(hcloud.getVolumes());\nconst volume3 = pulumi.output(hcloud.getVolumes({\n    withSelector: \"key=value\",\n}));\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getVolumes.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only volumes with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolumes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "volumes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getVolumesVolume:getVolumesVolume"
                        },
                        "description": "(list) List of all matching volumes. See `data.hcloud_volume` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "volumes",
                    "id"
                ]
            }
        }
    }
}