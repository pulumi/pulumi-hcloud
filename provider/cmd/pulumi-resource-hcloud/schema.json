{
    "name": "hcloud",
    "description": "A Pulumi package for creating and managing hcloud cloud resources.",
    "keywords": [
        "pulumi",
        "hcloud"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`hcloud` Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud).",
    "repository": "https://github.com/pulumi/pulumi-hcloud",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string"
            },
            "token": {
                "type": "string",
                "description": "The API token to access the Hetzner cloud.\n"
            }
        },
        "defaults": [
            "token"
        ]
    },
    "types": {
        "hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of the Load Balancer Algorithm. `round_robin` or `least_connections`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "type"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck": {
            "properties": {
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheckHttp:LoadBalancerServiceHealthCheckHttp",
                    "description": "List of http configurations. Required if `protocol` is `http`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "description": "Interval how often the health check will be performed, in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol the health check uses. `http` or `tcp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of tries a health check will be performed until a target will be listed as `unhealthy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "Timeout when a health check try will be canceled if there is no response, in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "interval",
                "port",
                "protocol",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "http",
                        "interval",
                        "port",
                        "protocol",
                        "retries",
                        "timeout"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerServiceHealthCheckHttp:LoadBalancerServiceHealthCheckHttp": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Domain we try to access when performing the Health Check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "Path we try to access when performing the Health Check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "response": {
                    "type": "string",
                    "description": "Response we expect to be included in the Target response when a Health Check was performed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS certificate checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of IDs from certificates which the Load Balancer has.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieLifetime": {
                    "type": "integer",
                    "description": "Lifetime of the cookie for sticky session (in seconds). Default: `300`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieName": {
                    "type": "string",
                    "description": "Name of the cookie for sticky session. Default: `HCLBSTICKY`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttp": {
                    "type": "boolean",
                    "description": "Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stickySessions": {
                    "type": "boolean",
                    "description": "Enable sticky sessions\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cookieLifetime",
                        "cookieName",
                        "redirectHttp",
                        "stickySessions"
                    ]
                }
            }
        },
        "hcloud:index/LoadBalancerTarget:LoadBalancerTarget": {
            "properties": {
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server which should be a target for this Load Balancer. Required if `type` is `server`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the target. `server`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "deprecationMessage": "Does not work. Use the hcloud_load_balancer_target resource instead.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "hcloud:index/getLoadBalancerAlgorithm:getLoadBalancerAlgorithm": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "(string) Type of the target. `server` or `label_selector`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerService:getLoadBalancerService": {
            "properties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "(int) Port the service connects to the targets on. Can be everything between `1` and `65535`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthCheck": {
                    "$ref": "#/types/hcloud:index/getLoadBalancerServiceHealthCheck:getLoadBalancerServiceHealthCheck",
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http": {
                    "$ref": "#/types/hcloud:index/getLoadBalancerServiceHttp:getLoadBalancerServiceHttp",
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "listenPort": {
                    "type": "integer",
                    "description": "(int) Port the service listen on`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "(string) Protocol the health check uses. `http`, `https` or `tcp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "(bool) Enable proxyprotocol.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPort",
                "healthCheck",
                "http",
                "listenPort",
                "protocol",
                "proxyprotocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHealthCheck:getLoadBalancerServiceHealthCheck": {
            "properties": {
                "http": {
                    "$ref": "#/types/hcloud:index/getLoadBalancerServiceHealthCheckHttp:getLoadBalancerServiceHealthCheckHttp",
                    "description": "(list) List of http configurations when `protocol` is `http` or `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "description": "(int) Interval how often the health check will be performed, in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "integer",
                    "description": "(int) Port the health check tries to connect to. Can be everything between `1` and `65535`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "(string) Protocol the health check uses. `http`, `https` or `tcp`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retries": {
                    "type": "integer",
                    "description": "(int) Number of tries a health check will be performed until a target will be listed as `unhealthy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "integer",
                    "description": "(int) Timeout when a health check try will be canceled if there is no response, in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "http",
                "interval",
                "port",
                "protocol",
                "retries",
                "timeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHealthCheckHttp:getLoadBalancerServiceHealthCheckHttp": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "string) Domain we try to access when performing the Health Check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "(string) Path we try to access when performing the Health Check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "response": {
                    "type": "string",
                    "description": "(string) Response we expect to be included in the Target response when a Health Check was performed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(list[int]) We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "description": "(bool) Enable TLS certificate checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domain",
                "path",
                "response",
                "statusCodes",
                "tls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerServiceHttp:getLoadBalancerServiceHttp": {
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list[int]) List of IDs from certificates which the Load Balancer has.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieLifetime": {
                    "type": "integer",
                    "description": "(int) Lifetime of the cookie for sticky session (in seconds).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookieName": {
                    "type": "string",
                    "description": "(string) Name of the cookie for sticky session.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttp": {
                    "type": "boolean",
                    "description": "(string) Determine if all requests from port 80 should be redirected to port 443.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stickySessions": {
                    "type": "boolean",
                    "description": "(string) Determine if sticky sessions are enabled or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificates",
                "cookieLifetime",
                "cookieName",
                "redirectHttp",
                "stickySessions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getLoadBalancerTarget:getLoadBalancerTarget": {
            "properties": {
                "labelSelector": {
                    "type": "string",
                    "description": "(string) Label Selector to add a group of resources based on the label.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverId": {
                    "type": "integer",
                    "description": "(int) ID of the server which should be a target for this Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(string) Type of the target. `server` or `label_selector`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "labelSelector",
                "serverId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "hcloud:index/getSshKeysSshKey:getSshKeysSshKey": {
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fingerprint",
                "id",
                "labels",
                "name",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the hcloud package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "endpoint": {
                "type": "string"
            },
            "token": {
                "type": "string",
                "description": "The API token to access the Hetzner cloud.\n"
            }
        },
        "requiredInputs": [
            "token"
        ]
    },
    "resources": {
        "hcloud:index/certificate:Certificate": {
            "description": "Provides a Hetzner Cloud Certificate to represent a TLS certificate in the Hetzner Cloud.\n",
            "properties": {
                "certificate": {
                    "type": "string",
                    "description": "PEM encoded TLS certificate.\n",
                    "language": {
                        "csharp": {
                            "name": "CertificateContents"
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(list) Domains and subdomains covered by the certificate.\n"
                },
                "fingerprint": {
                    "type": "string",
                    "description": "(string) Fingerprint of the certificate.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                },
                "notValidAfter": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                },
                "notValidBefore": {
                    "type": "string",
                    "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "PEM encoded private key belonging to the certificate.\n"
                }
            },
            "required": [
                "certificate",
                "created",
                "domainNames",
                "fingerprint",
                "name",
                "notValidAfter",
                "notValidBefore",
                "privateKey"
            ],
            "inputProperties": {
                "certificate": {
                    "type": "string",
                    "description": "PEM encoded TLS certificate.\n",
                    "language": {
                        "csharp": {
                            "name": "CertificateContents"
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Certificate.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "PEM encoded private key belonging to the certificate.\n"
                }
            },
            "requiredInputs": [
                "certificate",
                "privateKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "PEM encoded TLS certificate.\n",
                        "language": {
                            "csharp": {
                                "name": "CertificateContents"
                            }
                        }
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) Domains and subdomains covered by the certificate.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the certificate.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) the\ncertificate should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Certificate.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "PEM encoded private key belonging to the certificate.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/floatingIp:FloatingIp": {
            "description": "Provides a Hetzner Cloud Floating IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-9\",\n    serverType: \"cx11\",\n});\nconst master = new hcloud.FloatingIp(\"master\", {\n    type: \"ipv4\",\n    serverId: node1.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-9\",\n    server_type=\"cx11\")\nmaster = hcloud.FloatingIp(\"master\",\n    type=\"ipv4\",\n    server_id=node1.id)\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var node1 = new HCloud.Server(\"node1\", new HCloud.ServerArgs\n        {\n            Image = \"debian-9\",\n            ServerType = \"cx11\",\n        });\n        var master = new HCloud.FloatingIp(\"master\", new HCloud.FloatingIpArgs\n        {\n            Type = \"ipv4\",\n            ServerId = node1.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-9\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewFloatingIp(ctx, \"master\", \u0026hcloud.FloatingIpArgs{\n\t\t\tType:     pulumi.String(\"ipv4\"),\n\t\t\tServerId: node1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Floating IP.\n"
                },
                "homeLocation": {
                    "type": "string",
                    "description": "Home location (routing is optimized for that location). Optional if server_id argument is passed.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "(string) IP Address of the Floating IP.\n"
                },
                "ipNetwork": {
                    "type": "string",
                    "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Floating IP. `ipv4` `ipv6`\n"
                }
            },
            "required": [
                "homeLocation",
                "ipAddress",
                "ipNetwork",
                "name",
                "serverId",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Floating IP.\n"
                },
                "homeLocation": {
                    "type": "string",
                    "description": "Home location (routing is optimized for that location). Optional if server_id argument is passed.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Floating IP. `ipv4` `ipv6`\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FloatingIp resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the Floating IP.\n"
                    },
                    "homeLocation": {
                        "type": "string",
                        "description": "Home location (routing is optimized for that location). Optional if server_id argument is passed.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(string) IP Address of the Floating IP.\n"
                    },
                    "ipNetwork": {
                        "type": "string",
                        "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Floating IP.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to assign the Floating IP to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Floating IP. `ipv4` `ipv6`\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/floatingIpAssignment:FloatingIpAssignment": {
            "description": "Provides a Hetzner Cloud Floating IP Assignment to assign a Floating IP to a Hetzner Cloud Server. Deleting a Floating IP Assignment will unassign the Floating IP from the Server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-9\",\n    serverType: \"cx11\",\n    datacenter: \"fsn1-dc8\",\n});\nconst master = new hcloud.FloatingIp(\"master\", {\n    type: \"ipv4\",\n    homeLocation: \"nbg1\",\n});\nconst main = new hcloud.FloatingIpAssignment(\"main\", {\n    floatingIpId: master.id,\n    serverId: node1.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-9\",\n    server_type=\"cx11\",\n    datacenter=\"fsn1-dc8\")\nmaster = hcloud.FloatingIp(\"master\",\n    type=\"ipv4\",\n    home_location=\"nbg1\")\nmain = hcloud.FloatingIpAssignment(\"main\",\n    floating_ip_id=master.id,\n    server_id=node1.id)\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var node1 = new HCloud.Server(\"node1\", new HCloud.ServerArgs\n        {\n            Image = \"debian-9\",\n            ServerType = \"cx11\",\n            Datacenter = \"fsn1-dc8\",\n        });\n        var master = new HCloud.FloatingIp(\"master\", new HCloud.FloatingIpArgs\n        {\n            Type = \"ipv4\",\n            HomeLocation = \"nbg1\",\n        });\n        var main = new HCloud.FloatingIpAssignment(\"main\", new HCloud.FloatingIpAssignmentArgs\n        {\n            FloatingIpId = master.Id,\n            ServerId = node1.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-9\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tDatacenter: pulumi.String(\"fsn1-dc8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmaster, err := hcloud.NewFloatingIp(ctx, \"master\", \u0026hcloud.FloatingIpArgs{\n\t\t\tType:         pulumi.String(\"ipv4\"),\n\t\t\tHomeLocation: pulumi.String(\"nbg1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewFloatingIpAssignment(ctx, \"main\", \u0026hcloud.FloatingIpAssignmentArgs{\n\t\t\tFloatingIpId: master.ID(),\n\t\t\tServerId:     node1.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "floatingIpId": {
                    "type": "integer",
                    "description": "ID of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                }
            },
            "required": [
                "floatingIpId",
                "serverId"
            ],
            "inputProperties": {
                "floatingIpId": {
                    "type": "integer",
                    "description": "ID of the Floating IP.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to assign the Floating IP to.\n"
                }
            },
            "requiredInputs": [
                "floatingIpId",
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FloatingIpAssignment resources.\n",
                "properties": {
                    "floatingIpId": {
                        "type": "integer",
                        "description": "ID of the Floating IP.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to assign the Floating IP to.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancer:LoadBalancer": {
            "description": "Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst myserver = new hcloud.Server(\"myserver\", {\n    serverType: \"cx11\",\n    image: \"ubuntu-18.04\",\n});\nconst loadBalancer = new hcloud.LoadBalancer(\"loadBalancer\", {\n    loadBalancerType: \"lb11\",\n    location: \"nbg1\",\n    targets: [{\n        type: \"server\",\n        serverId: myserver.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmyserver = hcloud.Server(\"myserver\",\n    server_type=\"cx11\",\n    image=\"ubuntu-18.04\")\nload_balancer = hcloud.LoadBalancer(\"loadBalancer\",\n    load_balancer_type=\"lb11\",\n    location=\"nbg1\",\n    targets=[hcloud.LoadBalancerTargetArgs(\n        type=\"server\",\n        server_id=myserver.id,\n    )])\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myserver = new HCloud.Server(\"myserver\", new HCloud.ServerArgs\n        {\n            ServerType = \"cx11\",\n            Image = \"ubuntu-18.04\",\n        });\n        var loadBalancer = new HCloud.LoadBalancer(\"loadBalancer\", new HCloud.LoadBalancerArgs\n        {\n            LoadBalancerType = \"lb11\",\n            Location = \"nbg1\",\n            Targets = \n            {\n                new HCloud.Inputs.LoadBalancerTargetArgs\n                {\n                    Type = \"server\",\n                    ServerId = myserver.Id,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyserver, err := hcloud.NewServer(ctx, \"myserver\", \u0026hcloud.ServerArgs{\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tImage:      pulumi.String(\"ubuntu-18.04\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewLoadBalancer(ctx, \"loadBalancer\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tLocation:         pulumi.String(\"nbg1\"),\n\t\t\tTargets: hcloud.LoadBalancerTargetArray{\n\t\t\t\t\u0026hcloud.LoadBalancerTargetArgs{\n\t\t\t\t\tType:     pulumi.String(\"server\"),\n\t\t\t\t\tServerId: myserver.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "algorithm": {
                    "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                    "description": "Configuration of the algorithm the Load Balancer use.\n"
                },
                "ipv4": {
                    "type": "string",
                    "description": "(string) IPv4 Address of the Load Balancer.\n"
                },
                "ipv6": {
                    "type": "string",
                    "description": "(string) IPv4 Address of the Load Balancer.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "loadBalancerType": {
                    "type": "string",
                    "description": "Type of the Load Balancer.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the Load Balancer. Require when no network_zone is set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Load Balancer.\n"
                },
                "networkId": {
                    "type": "integer"
                },
                "networkIp": {
                    "type": "string"
                },
                "networkZone": {
                    "type": "string",
                    "description": "Network Zone of the Load Balancer. Require when no location is set.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                    },
                    "description": "List of targets of the Load Balancer.\n"
                }
            },
            "required": [
                "algorithm",
                "ipv4",
                "ipv6",
                "labels",
                "loadBalancerType",
                "location",
                "name",
                "networkId",
                "networkIp",
                "networkZone",
                "targets"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                    "description": "Configuration of the algorithm the Load Balancer use.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "loadBalancerType": {
                    "type": "string",
                    "description": "Type of the Load Balancer.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the Load Balancer. Require when no network_zone is set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Load Balancer.\n"
                },
                "networkZone": {
                    "type": "string",
                    "description": "Network Zone of the Load Balancer. Require when no location is set.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                    },
                    "description": "List of targets of the Load Balancer.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancer resources.\n",
                "properties": {
                    "algorithm": {
                        "$ref": "#/types/hcloud:index/LoadBalancerAlgorithm:LoadBalancerAlgorithm",
                        "description": "Configuration of the algorithm the Load Balancer use.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "loadBalancerType": {
                        "type": "string",
                        "description": "Type of the Load Balancer.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of the Load Balancer. Require when no network_zone is set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Load Balancer.\n"
                    },
                    "networkId": {
                        "type": "integer"
                    },
                    "networkIp": {
                        "type": "string"
                    },
                    "networkZone": {
                        "type": "string",
                        "description": "Network Zone of the Load Balancer. Require when no location is set.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/LoadBalancerTarget:LoadBalancerTarget"
                        },
                        "description": "List of targets of the Load Balancer.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerNetwork:LoadBalancerNetwork": {
            "description": "Provides a Hetzner Cloud Load Balancer Network to represent a private network on a Load Balancer in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst lb1 = new hcloud.LoadBalancer(\"lb1\", {\n    loadBalancerType: \"lb11\",\n    networkZone: \"eu-central\",\n});\nconst mynet = new hcloud.Network(\"mynet\", {ipRange: \"10.0.0.0/8\"});\nconst foonet = new hcloud.NetworkSubnet(\"foonet\", {\n    networkId: mynet.id,\n    type: \"cloud\",\n    networkZone: \"eu-central\",\n    ipRange: \"10.0.1.0/24\",\n});\nconst srvnetwork = new hcloud.LoadBalancerNetwork(\"srvnetwork\", {\n    loadBalancerId: lb1.id,\n    networkId: mynet.id,\n    ip: \"10.0.1.5\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nlb1 = hcloud.LoadBalancer(\"lb1\",\n    load_balancer_type=\"lb11\",\n    network_zone=\"eu-central\")\nmynet = hcloud.Network(\"mynet\", ip_range=\"10.0.0.0/8\")\nfoonet = hcloud.NetworkSubnet(\"foonet\",\n    network_id=mynet.id,\n    type=\"cloud\",\n    network_zone=\"eu-central\",\n    ip_range=\"10.0.1.0/24\")\nsrvnetwork = hcloud.LoadBalancerNetwork(\"srvnetwork\",\n    load_balancer_id=lb1.id,\n    network_id=mynet.id,\n    ip=\"10.0.1.5\")\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var lb1 = new HCloud.LoadBalancer(\"lb1\", new HCloud.LoadBalancerArgs\n        {\n            LoadBalancerType = \"lb11\",\n            NetworkZone = \"eu-central\",\n        });\n        var mynet = new HCloud.Network(\"mynet\", new HCloud.NetworkArgs\n        {\n            IpRange = \"10.0.0.0/8\",\n        });\n        var foonet = new HCloud.NetworkSubnet(\"foonet\", new HCloud.NetworkSubnetArgs\n        {\n            NetworkId = mynet.Id,\n            Type = \"cloud\",\n            NetworkZone = \"eu-central\",\n            IpRange = \"10.0.1.0/24\",\n        });\n        var srvnetwork = new HCloud.LoadBalancerNetwork(\"srvnetwork\", new HCloud.LoadBalancerNetworkArgs\n        {\n            LoadBalancerId = lb1.Id,\n            NetworkId = mynet.Id,\n            Ip = \"10.0.1.5\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlb1, err := hcloud.NewLoadBalancer(ctx, \"lb1\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tNetworkZone:      pulumi.String(\"eu-central\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmynet, err := hcloud.NewNetwork(ctx, \"mynet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkSubnet(ctx, \"foonet\", \u0026hcloud.NetworkSubnetArgs{\n\t\t\tNetworkId:   mynet.ID(),\n\t\t\tType:        pulumi.String(\"cloud\"),\n\t\t\tNetworkZone: pulumi.String(\"eu-central\"),\n\t\t\tIpRange:     pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewLoadBalancerNetwork(ctx, \"srvnetwork\", \u0026hcloud.LoadBalancerNetworkArgs{\n\t\t\tLoadBalancerId: lb1.ID(),\n\t\t\tNetworkId:      mynet.ID(),\n\t\t\tIp:             pulumi.String(\"10.0.1.5\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enablePublicInterface": {
                    "type": "boolean",
                    "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n"
                }
            },
            "required": [
                "ip",
                "loadBalancerId"
            ],
            "inputProperties": {
                "enablePublicInterface": {
                    "type": "boolean",
                    "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerNetwork resources.\n",
                "properties": {
                    "enablePublicInterface": {
                        "type": "boolean",
                        "description": "Enable or disable the\nLoad Balancers public interface. Default: `true`\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP to request to be assigned to this Load\nBalancer. If you do not provide this then you will be auto assigned an\nIP address.\n"
                    },
                    "loadBalancerId": {
                        "type": "integer",
                        "description": "ID of the Load Balancer.\n"
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the network which should be added\nto the Load Balancer. Required if `subnet_id` is not set. Successful\ncreation of the resource depends on the existence of a subnet in the\nHetzner Cloud Backend. Using `network_id` will not create an explicit\ndependency between the Load Balancer and the subnet. Therefore\n`depends_on` may need to be used. Alternatively the `subnet_id`\nproperty can be used, which will create an explicit dependency between\n`hcloud.LoadBalancerNetwork` and the existence of a subnet.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "ID of the sub-network which should be\nadded to the Load Balancer. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Load Balancer is\ncurrently added to the last created subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerService:LoadBalancerService": {
            "description": "Define services for Hetzner Cloud Load Balancers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst loadBalancer = new hcloud.LoadBalancer(\"loadBalancer\", {\n    loadBalancerType: \"lb11\",\n    location: \"nbg1\",\n});\nconst loadBalancerService = new hcloud.LoadBalancerService(\"loadBalancerService\", {\n    loadBalancerId: hcloud_load_balancer.test_load_balancer.id,\n    protocol: \"http\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nload_balancer = hcloud.LoadBalancer(\"loadBalancer\",\n    load_balancer_type=\"lb11\",\n    location=\"nbg1\")\nload_balancer_service = hcloud.LoadBalancerService(\"loadBalancerService\",\n    load_balancer_id=hcloud_load_balancer[\"test_load_balancer\"][\"id\"],\n    protocol=\"http\")\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var loadBalancer = new HCloud.LoadBalancer(\"loadBalancer\", new HCloud.LoadBalancerArgs\n        {\n            LoadBalancerType = \"lb11\",\n            Location = \"nbg1\",\n        });\n        var loadBalancerService = new HCloud.LoadBalancerService(\"loadBalancerService\", new HCloud.LoadBalancerServiceArgs\n        {\n            LoadBalancerId = hcloud_load_balancer.Test_load_balancer.Id,\n            Protocol = \"http\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.NewLoadBalancer(ctx, \"loadBalancer\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tLocation:         pulumi.String(\"nbg1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewLoadBalancerService(ctx, \"loadBalancerService\", \u0026hcloud.LoadBalancerServiceArgs{\n\t\t\tLoadBalancerId: pulumi.Any(hcloud_load_balancer.Test_load_balancer.Id),\n\t\t\tProtocol:       pulumi.String(\"http\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                    "description": "List of health check configurations when `protocol` is `http` or `https`.\n"
                },
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                    "description": "List of http configurations when `protocol` is `http` or `https`.\n"
                },
                "listenPort": {
                    "type": "integer",
                    "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "Id of the load balancer this service belongs to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the service. `http`, `https` or `tcp`\n"
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "Enable proxyprotocol.\n"
                }
            },
            "required": [
                "destinationPort",
                "healthCheck",
                "listenPort",
                "loadBalancerId",
                "protocol",
                "proxyprotocol"
            ],
            "inputProperties": {
                "destinationPort": {
                    "type": "integer",
                    "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                },
                "healthCheck": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                    "description": "List of health check configurations when `protocol` is `http` or `https`.\n"
                },
                "http": {
                    "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                    "description": "List of http configurations when `protocol` is `http` or `https`.\n"
                },
                "listenPort": {
                    "type": "integer",
                    "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n"
                },
                "loadBalancerId": {
                    "type": "string",
                    "description": "Id of the load balancer this service belongs to.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the service. `http`, `https` or `tcp`\n"
                },
                "proxyprotocol": {
                    "type": "boolean",
                    "description": "Enable proxyprotocol.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerService resources.\n",
                "properties": {
                    "destinationPort": {
                        "type": "integer",
                        "description": "Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.\n"
                    },
                    "healthCheck": {
                        "$ref": "#/types/hcloud:index/LoadBalancerServiceHealthCheck:LoadBalancerServiceHealthCheck",
                        "description": "List of health check configurations when `protocol` is `http` or `https`.\n"
                    },
                    "http": {
                        "$ref": "#/types/hcloud:index/LoadBalancerServiceHttp:LoadBalancerServiceHttp",
                        "description": "List of http configurations when `protocol` is `http` or `https`.\n"
                    },
                    "listenPort": {
                        "type": "integer",
                        "description": "Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.\n"
                    },
                    "loadBalancerId": {
                        "type": "string",
                        "description": "Id of the load balancer this service belongs to.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol of the service. `http`, `https` or `tcp`\n"
                    },
                    "proxyprotocol": {
                        "type": "boolean",
                        "description": "Enable proxyprotocol.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/loadBalancerTarget:LoadBalancerTarget": {
            "description": "Adds a target to a Hetzner Cloud Load Balancer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst myServer = new hcloud.Server(\"myServer\", {\n    serverType: \"cx11\",\n    image: \"ubuntu-18.04\",\n});\nconst loadBalancer = new hcloud.LoadBalancer(\"loadBalancer\", {\n    loadBalancerType: \"lb11\",\n    location: \"nbg1\",\n});\nconst loadBalancerTarget = new hcloud.LoadBalancerTarget(\"loadBalancerTarget\", {\n    type: \"server\",\n    loadBalancerId: loadBalancer.id,\n    serverId: myServer.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmy_server = hcloud.Server(\"myServer\",\n    server_type=\"cx11\",\n    image=\"ubuntu-18.04\")\nload_balancer = hcloud.LoadBalancer(\"loadBalancer\",\n    load_balancer_type=\"lb11\",\n    location=\"nbg1\")\nload_balancer_target = hcloud.LoadBalancerTarget(\"loadBalancerTarget\",\n    type=\"server\",\n    load_balancer_id=load_balancer.id,\n    server_id=my_server.id)\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myServer = new HCloud.Server(\"myServer\", new HCloud.ServerArgs\n        {\n            ServerType = \"cx11\",\n            Image = \"ubuntu-18.04\",\n        });\n        var loadBalancer = new HCloud.LoadBalancer(\"loadBalancer\", new HCloud.LoadBalancerArgs\n        {\n            LoadBalancerType = \"lb11\",\n            Location = \"nbg1\",\n        });\n        var loadBalancerTarget = new HCloud.LoadBalancerTarget(\"loadBalancerTarget\", new HCloud.LoadBalancerTargetArgs\n        {\n            Type = \"server\",\n            LoadBalancerId = loadBalancer.Id,\n            ServerId = myServer.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyServer, err := hcloud.NewServer(ctx, \"myServer\", \u0026hcloud.ServerArgs{\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tImage:      pulumi.String(\"ubuntu-18.04\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tloadBalancer, err := hcloud.NewLoadBalancer(ctx, \"loadBalancer\", \u0026hcloud.LoadBalancerArgs{\n\t\t\tLoadBalancerType: pulumi.String(\"lb11\"),\n\t\t\tLocation:         pulumi.String(\"nbg1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewLoadBalancerTarget(ctx, \"loadBalancerTarget\", \u0026hcloud.LoadBalancerTargetArgs{\n\t\t\tType:           pulumi.String(\"server\"),\n\t\t\tLoadBalancerId: loadBalancer.ID(),\n\t\t\tServerId:       myServer.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer to which\nthe target gets attached.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                }
            },
            "required": [
                "loadBalancerId",
                "type",
                "usePrivateIp"
            ],
            "inputProperties": {
                "ip": {
                    "type": "string",
                    "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n"
                },
                "loadBalancerId": {
                    "type": "integer",
                    "description": "ID of the Load Balancer to which\nthe target gets attached.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                },
                "usePrivateIp": {
                    "type": "boolean",
                    "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                }
            },
            "requiredInputs": [
                "loadBalancerId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoadBalancerTarget resources.\n",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": "IP address for an IP Target. Required if\n`type` is `ip`.\n"
                    },
                    "labelSelector": {
                        "type": "string",
                        "description": "Label Selector selecting targets\nfor this Load Balancer. Required if `type` is `label_selector`.\n"
                    },
                    "loadBalancerId": {
                        "type": "integer",
                        "description": "ID of the Load Balancer to which\nthe target gets attached.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "ID of the server which should be a\ntarget for this Load Balancer. Required if `type` is `server`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the target. Possible values\n`server`, `label_selector`, `ip`.\n"
                    },
                    "usePrivateIp": {
                        "type": "boolean",
                        "description": "use the private IP to connect to\nLoad Balancer targets. Only allowed if type is `server` or\n`label_selector`.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/network:Network": {
            "description": "Provides a Hetzner Cloud Network to represent a Network in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst privNet = new hcloud.Network(\"privNet\", {\n    ipRange: \"10.0.1.0/24\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\npriv_net = hcloud.Network(\"privNet\", ip_range=\"10.0.1.0/24\")\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var privNet = new HCloud.Network(\"privNet\", new HCloud.NetworkArgs\n        {\n            IpRange = \"10.0.1.0/24\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := hcloud.NewNetwork(ctx, \"privNet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "ipRange": {
                    "type": "string",
                    "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network to create (must be unique per project).\n"
                }
            },
            "required": [
                "ipRange",
                "name"
            ],
            "inputProperties": {
                "ipRange": {
                    "type": "string",
                    "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network to create (must be unique per project).\n"
                }
            },
            "requiredInputs": [
                "ipRange"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Network resources.\n",
                "properties": {
                    "ipRange": {
                        "type": "string",
                        "description": "IP Range of the whole Network which must span all included subnets and route destinations. Must be one of the private ipv4 ranges of RFC1918.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network to create (must be unique per project).\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/networkRoute:NetworkRoute": {
            "description": "Provides a Hetzner Cloud Network Route to represent a Network route in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst mynet = new hcloud.Network(\"mynet\", {ipRange: \"10.0.0.0/8\"});\nconst privNet = new hcloud.NetworkRoute(\"privNet\", {\n    networkId: mynet.id,\n    destination: \"10.100.1.0/24\",\n    gateway: \"10.0.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmynet = hcloud.Network(\"mynet\", ip_range=\"10.0.0.0/8\")\npriv_net = hcloud.NetworkRoute(\"privNet\",\n    network_id=mynet.id,\n    destination=\"10.100.1.0/24\",\n    gateway=\"10.0.1.1\")\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mynet = new HCloud.Network(\"mynet\", new HCloud.NetworkArgs\n        {\n            IpRange = \"10.0.0.0/8\",\n        });\n        var privNet = new HCloud.NetworkRoute(\"privNet\", new HCloud.NetworkRouteArgs\n        {\n            NetworkId = mynet.Id,\n            Destination = \"10.100.1.0/24\",\n            Gateway = \"10.0.1.1\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmynet, err := hcloud.NewNetwork(ctx, \"mynet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkRoute(ctx, \"privNet\", \u0026hcloud.NetworkRouteArgs{\n\t\t\tNetworkId:   mynet.ID(),\n\t\t\tDestination: pulumi.String(\"10.100.1.0/24\"),\n\t\t\tGateway:     pulumi.String(\"10.0.1.1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "destination": {
                    "type": "string",
                    "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the route should be added to.\n"
                }
            },
            "required": [
                "destination",
                "gateway",
                "networkId"
            ],
            "inputProperties": {
                "destination": {
                    "type": "string",
                    "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the route should be added to.\n"
                }
            },
            "requiredInputs": [
                "destination",
                "gateway",
                "networkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkRoute resources.\n",
                "properties": {
                    "destination": {
                        "type": "string",
                        "description": "Destination network or host of this route. Must be a subnet of the ip_range of the Network. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first ip of the networks ip_range or with 172.31.1.1.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "Gateway for the route. Cannot be the first ip of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.\n"
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the Network the route should be added to.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/networkSubnet:NetworkSubnet": {
            "description": "Provides a Hetzner Cloud Network Subnet to represent a Subnet in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst mynet = new hcloud.Network(\"mynet\", {ipRange: \"10.0.0.0/8\"});\nconst foonet = new hcloud.NetworkSubnet(\"foonet\", {\n    networkId: mynet.id,\n    type: \"cloud\",\n    networkZone: \"eu-central\",\n    ipRange: \"10.0.1.0/24\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nmynet = hcloud.Network(\"mynet\", ip_range=\"10.0.0.0/8\")\nfoonet = hcloud.NetworkSubnet(\"foonet\",\n    network_id=mynet.id,\n    type=\"cloud\",\n    network_zone=\"eu-central\",\n    ip_range=\"10.0.1.0/24\")\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var mynet = new HCloud.Network(\"mynet\", new HCloud.NetworkArgs\n        {\n            IpRange = \"10.0.0.0/8\",\n        });\n        var foonet = new HCloud.NetworkSubnet(\"foonet\", new HCloud.NetworkSubnetArgs\n        {\n            NetworkId = mynet.Id,\n            Type = \"cloud\",\n            NetworkZone = \"eu-central\",\n            IpRange = \"10.0.1.0/24\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmynet, err := hcloud.NewNetwork(ctx, \"mynet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkSubnet(ctx, \"foonet\", \u0026hcloud.NetworkSubnetArgs{\n\t\t\tNetworkId:   mynet.ID(),\n\t\t\tType:        pulumi.String(\"cloud\"),\n\t\t\tNetworkZone: pulumi.String(\"eu-central\"),\n\t\t\tIpRange:     pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "gateway": {
                    "type": "string"
                },
                "ipRange": {
                    "type": "string",
                    "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the subnet should be added to.\n"
                },
                "networkZone": {
                    "type": "string",
                    "description": "Name of network zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of subnet. `server`\n"
                }
            },
            "required": [
                "gateway",
                "ipRange",
                "networkId",
                "networkZone",
                "type"
            ],
            "inputProperties": {
                "ipRange": {
                    "type": "string",
                    "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the Network the subnet should be added to.\n"
                },
                "networkZone": {
                    "type": "string",
                    "description": "Name of network zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of subnet. `server`\n"
                }
            },
            "requiredInputs": [
                "ipRange",
                "networkId",
                "networkZone",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkSubnet resources.\n",
                "properties": {
                    "gateway": {
                        "type": "string"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.\n"
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the Network the subnet should be added to.\n"
                    },
                    "networkZone": {
                        "type": "string",
                        "description": "Name of network zone.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of subnet. `server`\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/rdns:Rdns": {
            "description": "Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Floating IPs or servers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nFor servers:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-9\",\n    serverType: \"cx11\",\n});\nconst master = new hcloud.Rdns(\"master\", {\n    serverId: node1.id,\n    ipAddress: node1.ipv4Address,\n    dnsPtr: \"example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-9\",\n    server_type=\"cx11\")\nmaster = hcloud.Rdns(\"master\",\n    server_id=node1.id,\n    ip_address=node1.ipv4_address,\n    dns_ptr=\"example.com\")\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var node1 = new HCloud.Server(\"node1\", new HCloud.ServerArgs\n        {\n            Image = \"debian-9\",\n            ServerType = \"cx11\",\n        });\n        var master = new HCloud.Rdns(\"master\", new HCloud.RdnsArgs\n        {\n            ServerId = node1.Id,\n            IpAddress = node1.Ipv4Address,\n            DnsPtr = \"example.com\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-9\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewRdns(ctx, \"master\", \u0026hcloud.RdnsArgs{\n\t\t\tServerId:  node1.ID(),\n\t\t\tIpAddress: node1.Ipv4Address,\n\t\t\tDnsPtr:    pulumi.String(\"example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nFor Floating IPs:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst floating1 = new hcloud.FloatingIp(\"floating1\", {\n    homeLocation: \"nbg1\",\n    type: \"ipv4\",\n});\nconst floatingMaster = new hcloud.Rdns(\"floating_master\", {\n    dnsPtr: \"example.com\",\n    floatingIpId: floating1.id.apply(id =\u003e Number.parseFloat(id)),\n    ipAddress: floating1.ipAddress,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nfloating1 = hcloud.FloatingIp(\"floating1\",\n    home_location=\"nbg1\",\n    type=\"ipv4\")\nfloating_master = hcloud.Rdns(\"floatingMaster\",\n    dns_ptr=\"example.com\",\n    floating_ip_id=floating1.id,\n    ip_address=floating1.ip_address)\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var floating1 = new HCloud.FloatingIp(\"floating1\", new HCloud.FloatingIpArgs\n        {\n            HomeLocation = \"nbg1\",\n            Type = \"ipv4\",\n        });\n        var floatingMaster = new HCloud.Rdns(\"floatingMaster\", new HCloud.RdnsArgs\n        {\n            DnsPtr = \"example.com\",\n            FloatingIpId = floating1.Id,\n            IpAddress = floating1.IpAddress,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfloating1, err := hcloud.NewFloatingIp(ctx, \"floating1\", \u0026hcloud.FloatingIpArgs{\n\t\t\tHomeLocation: pulumi.String(\"nbg1\"),\n\t\t\tType:         pulumi.String(\"ipv4\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewRdns(ctx, \"floatingMaster\", \u0026hcloud.RdnsArgs{\n\t\t\tDnsPtr:       pulumi.String(\"example.com\"),\n\t\t\tFloatingIpId: floating1.ID(),\n\t\t\tIpAddress:    floating1.IpAddress,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "dnsPtr": {
                    "type": "string",
                    "description": "The DNS address the `ip_address` should resolve to.\n"
                },
                "floatingIpId": {
                    "type": "integer",
                    "description": "The Floating IP the `ip_address` belongs to.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address that should point to `dns_ptr`.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "The server the `ip_address` belongs to.\n"
                }
            },
            "required": [
                "dnsPtr",
                "ipAddress"
            ],
            "inputProperties": {
                "dnsPtr": {
                    "type": "string",
                    "description": "The DNS address the `ip_address` should resolve to.\n"
                },
                "floatingIpId": {
                    "type": "integer",
                    "description": "The Floating IP the `ip_address` belongs to.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address that should point to `dns_ptr`.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "The server the `ip_address` belongs to.\n"
                }
            },
            "requiredInputs": [
                "dnsPtr",
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rdns resources.\n",
                "properties": {
                    "dnsPtr": {
                        "type": "string",
                        "description": "The DNS address the `ip_address` should resolve to.\n"
                    },
                    "floatingIpId": {
                        "type": "integer",
                        "description": "The Floating IP the `ip_address` belongs to.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IP address that should point to `dns_ptr`.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "The server the `ip_address` belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/server:Server": {
            "properties": {
                "backupWindow": {
                    "type": "string",
                    "description": "(string) The backup window of the server, if enabled.\n",
                    "deprecationMessage": "You should remove this property from your terraform configuration."
                },
                "backups": {
                    "type": "boolean",
                    "description": "Enable or disable backups.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter name to create the server in.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Name or ID of the image the server is created from.\n"
                },
                "ipv4Address": {
                    "type": "string",
                    "description": "(string) The IPv4 address.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "(string) The first IPv6 address of the assigned network.\n"
                },
                "ipv6Network": {
                    "type": "string",
                    "description": "(string) The IPv6 network.\n"
                },
                "iso": {
                    "type": "string",
                    "description": "ID or Name of an ISO image to mount.\n"
                },
                "keepDisk": {
                    "type": "boolean",
                    "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name to create the server in. `nbg1`, `fsn1` or `hel1`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                },
                "rescue": {
                    "type": "string",
                    "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Name of the server type this server should be created with.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSH key IDs or names which should be injected into the server at creation time\n"
                },
                "status": {
                    "type": "string",
                    "description": "(string) The status of the server.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Cloud-Init user data to use during server creation\n"
                }
            },
            "required": [
                "backupWindow",
                "datacenter",
                "image",
                "ipv4Address",
                "ipv6Address",
                "ipv6Network",
                "location",
                "name",
                "serverType",
                "status"
            ],
            "inputProperties": {
                "backups": {
                    "type": "boolean",
                    "description": "Enable or disable backups.\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "The datacenter name to create the server in.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Name or ID of the image the server is created from.\n"
                },
                "iso": {
                    "type": "string",
                    "description": "ID or Name of an ISO image to mount.\n"
                },
                "keepDisk": {
                    "type": "boolean",
                    "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs) should be created with.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The location name to create the server in. `nbg1`, `fsn1` or `hel1`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                },
                "rescue": {
                    "type": "string",
                    "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`\n"
                },
                "serverType": {
                    "type": "string",
                    "description": "Name of the server type this server should be created with.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSH key IDs or names which should be injected into the server at creation time\n"
                },
                "userData": {
                    "type": "string",
                    "description": "Cloud-Init user data to use during server creation\n"
                }
            },
            "requiredInputs": [
                "image",
                "serverType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Server resources.\n",
                "properties": {
                    "backupWindow": {
                        "type": "string",
                        "description": "(string) The backup window of the server, if enabled.\n",
                        "deprecationMessage": "You should remove this property from your terraform configuration."
                    },
                    "backups": {
                        "type": "boolean",
                        "description": "Enable or disable backups.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "The datacenter name to create the server in.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "Name or ID of the image the server is created from.\n"
                    },
                    "ipv4Address": {
                        "type": "string",
                        "description": "(string) The IPv4 address.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "(string) The first IPv6 address of the assigned network.\n"
                    },
                    "ipv6Network": {
                        "type": "string",
                        "description": "(string) The IPv6 network.\n"
                    },
                    "iso": {
                        "type": "string",
                        "description": "ID or Name of an ISO image to mount.\n"
                    },
                    "keepDisk": {
                        "type": "boolean",
                        "description": "If true, do not upgrade the disk. This allows downgrading the server type later.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs) should be created with.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The location name to create the server in. `nbg1`, `fsn1` or `hel1`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).\n"
                    },
                    "rescue": {
                        "type": "string",
                        "description": "Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`\n"
                    },
                    "serverType": {
                        "type": "string",
                        "description": "Name of the server type this server should be created with.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSH key IDs or names which should be injected into the server at creation time\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(string) The status of the server.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "Cloud-Init user data to use during server creation\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/serverNetwork:ServerNetwork": {
            "description": "Provides a Hetzner Cloud Server Network to represent a private network on a server in the Hetzner Cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-9\",\n    serverType: \"cx11\",\n});\nconst mynet = new hcloud.Network(\"mynet\", {ipRange: \"10.0.0.0/8\"});\nconst foonet = new hcloud.NetworkSubnet(\"foonet\", {\n    networkId: mynet.id,\n    type: \"cloud\",\n    networkZone: \"eu-central\",\n    ipRange: \"10.0.1.0/24\",\n});\nconst srvnetwork = new hcloud.ServerNetwork(\"srvnetwork\", {\n    serverId: node1.id,\n    networkId: mynet.id,\n    ip: \"10.0.1.5\",\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-9\",\n    server_type=\"cx11\")\nmynet = hcloud.Network(\"mynet\", ip_range=\"10.0.0.0/8\")\nfoonet = hcloud.NetworkSubnet(\"foonet\",\n    network_id=mynet.id,\n    type=\"cloud\",\n    network_zone=\"eu-central\",\n    ip_range=\"10.0.1.0/24\")\nsrvnetwork = hcloud.ServerNetwork(\"srvnetwork\",\n    server_id=node1.id,\n    network_id=mynet.id,\n    ip=\"10.0.1.5\")\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var node1 = new HCloud.Server(\"node1\", new HCloud.ServerArgs\n        {\n            Image = \"debian-9\",\n            ServerType = \"cx11\",\n        });\n        var mynet = new HCloud.Network(\"mynet\", new HCloud.NetworkArgs\n        {\n            IpRange = \"10.0.0.0/8\",\n        });\n        var foonet = new HCloud.NetworkSubnet(\"foonet\", new HCloud.NetworkSubnetArgs\n        {\n            NetworkId = mynet.Id,\n            Type = \"cloud\",\n            NetworkZone = \"eu-central\",\n            IpRange = \"10.0.1.0/24\",\n        });\n        var srvnetwork = new HCloud.ServerNetwork(\"srvnetwork\", new HCloud.ServerNetworkArgs\n        {\n            ServerId = node1.Id,\n            NetworkId = mynet.Id,\n            Ip = \"10.0.1.5\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-9\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmynet, err := hcloud.NewNetwork(ctx, \"mynet\", \u0026hcloud.NetworkArgs{\n\t\t\tIpRange: pulumi.String(\"10.0.0.0/8\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewNetworkSubnet(ctx, \"foonet\", \u0026hcloud.NetworkSubnetArgs{\n\t\t\tNetworkId:   mynet.ID(),\n\t\t\tType:        pulumi.String(\"cloud\"),\n\t\t\tNetworkZone: pulumi.String(\"eu-central\"),\n\t\t\tIpRange:     pulumi.String(\"10.0.1.0/24\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewServerNetwork(ctx, \"srvnetwork\", \u0026hcloud.ServerNetworkArgs{\n\t\t\tServerId:  node1.ID(),\n\t\t\tNetworkId: mynet.ID(),\n\t\t\tIp:        pulumi.String(\"10.0.1.5\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "aliasIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional IPs to be assigned\nto this server.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n"
                }
            },
            "required": [
                "ip",
                "macAddress",
                "serverId"
            ],
            "inputProperties": {
                "aliasIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional IPs to be assigned\nto this server.\n"
                },
                "ip": {
                    "type": "string",
                    "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n"
                },
                "networkId": {
                    "type": "integer",
                    "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "ID of the server.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n"
                }
            },
            "requiredInputs": [
                "serverId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerNetwork resources.\n",
                "properties": {
                    "aliasIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional IPs to be assigned\nto this server.\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "IP to request to be assigned to this server.\nIf you do not provide this then you will be auto assigned an IP\naddress.\n"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "integer",
                        "description": "ID of the network which should be added\nto the server. Required if `subnet_id` is not set. Successful creation\nof the resource depends on the existence of a subnet in the Hetzner\nCloud Backend. Using `network_id` will not create an explicit\ndependency between server and subnet. Therefore `depends_on` may need\nto be used. Alternatively the `subnet_id` property can be used, which\nwill create an explicit dependency between `hcloud.ServerNetwork` and\nthe existence of a subnet.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "ID of the server.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "ID of the sub-network which should be\nadded to the Server. Required if `network_id` is not set.\n*Note*: if the `ip` property is missing, the Server is currently added\nto the last created subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/sshKey:SshKey": {
            "description": "Provides a Hetzner Cloud SSH key resource to manage SSH keys for server access.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\nimport * from \"fs\";\n\n// Create a new SSH key\nconst _default = new hcloud.SshKey(\"default\", {publicKey: fs.readFileSync(\"~/.ssh/id_rsa.pub\")});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\n# Create a new SSH key\ndefault = hcloud.SshKey(\"default\", public_key=(lambda path: open(path).read())(\"~/.ssh/id_rsa.pub\"))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create a new SSH key\n        var @default = new HCloud.SshKey(\"default\", new HCloud.SshKeyArgs\n        {\n            PublicKey = File.ReadAllText(\"~/.ssh/id_rsa.pub\"),\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "fingerprint": {
                    "type": "string",
                    "description": "(string) The fingerprint of the SSH key\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(map) User-defined labels (key-value pairs)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function\n"
                }
            },
            "required": [
                "fingerprint",
                "name",
                "publicKey"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "(map) User-defined labels (key-value pairs)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the SSH key.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key. If this is a file, it can be read using the file interpolation function\n"
                }
            },
            "requiredInputs": [
                "publicKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) The fingerprint of the SSH key\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SSH key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key. If this is a file, it can be read using the file interpolation function\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/volume:Volume": {
            "description": "Provides a Hetzner Cloud volume resource to manage volumes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-9\",\n    serverType: \"cx11\",\n});\nconst master = new hcloud.Volume(\"master\", {\n    size: 50,\n    serverId: node1.id,\n    automount: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-9\",\n    server_type=\"cx11\")\nmaster = hcloud.Volume(\"master\",\n    size=50,\n    server_id=node1.id,\n    automount=True)\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var node1 = new HCloud.Server(\"node1\", new HCloud.ServerArgs\n        {\n            Image = \"debian-9\",\n            ServerType = \"cx11\",\n        });\n        var master = new HCloud.Volume(\"master\", new HCloud.VolumeArgs\n        {\n            Size = 50,\n            ServerId = node1.Id,\n            Automount = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-9\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewVolume(ctx, \"master\", \u0026hcloud.VolumeArgs{\n\t\t\tSize:      pulumi.Int(50),\n\t\t\tServerId:  node1.ID(),\n\t\t\tAutomount: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                },
                "format": {
                    "type": "string",
                    "description": "Format volume after creation. `xfs` or `ext4`\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs).\n"
                },
                "linuxDevice": {
                    "type": "string",
                    "description": "Device path on the file system for the Volume.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the volume to create, optional if server_id argument is passed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the volume to create (must be unique per project).\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to, optional if location argument is passed.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the volume (in GB).\n"
                }
            },
            "required": [
                "linuxDevice",
                "location",
                "name",
                "serverId",
                "size"
            ],
            "inputProperties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                },
                "format": {
                    "type": "string",
                    "description": "Format volume after creation. `xfs` or `ext4`\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "User-defined labels (key-value pairs).\n"
                },
                "location": {
                    "type": "string",
                    "description": "Location of the volume to create, optional if server_id argument is passed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the volume to create (must be unique per project).\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to, optional if location argument is passed.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Size of the volume (in GB).\n"
                }
            },
            "requiredInputs": [
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Volume resources.\n",
                "properties": {
                    "automount": {
                        "type": "boolean",
                        "description": "Automount the volume upon attaching it (server_id must be provided).\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "Format volume after creation. `xfs` or `ext4`\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "User-defined labels (key-value pairs).\n"
                    },
                    "linuxDevice": {
                        "type": "string",
                        "description": "Device path on the file system for the Volume.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location of the volume to create, optional if server_id argument is passed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the volume to create (must be unique per project).\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to attach the Volume to, optional if location argument is passed.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the volume (in GB).\n"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/volumeAttachment:VolumeAttachment": {
            "description": "Provides a Hetzner Cloud Volume attachment to attach a Volume to a Hetzner Cloud Server. Deleting a Volume Attachment will detach the Volume from the Server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst node1 = new hcloud.Server(\"node1\", {\n    image: \"debian-9\",\n    serverType: \"cx11\",\n    datacenter: \"nbg1-dc3\",\n});\nconst master = new hcloud.Volume(\"master\", {\n    location: \"nbg1\",\n    size: 10,\n});\nconst main = new hcloud.VolumeAttachment(\"main\", {\n    volumeId: master.id,\n    serverId: node1.id,\n    automount: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nnode1 = hcloud.Server(\"node1\",\n    image=\"debian-9\",\n    server_type=\"cx11\",\n    datacenter=\"nbg1-dc3\")\nmaster = hcloud.Volume(\"master\",\n    location=\"nbg1\",\n    size=10)\nmain = hcloud.VolumeAttachment(\"main\",\n    volume_id=master.id,\n    server_id=node1.id,\n    automount=True)\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var node1 = new HCloud.Server(\"node1\", new HCloud.ServerArgs\n        {\n            Image = \"debian-9\",\n            ServerType = \"cx11\",\n            Datacenter = \"nbg1-dc3\",\n        });\n        var master = new HCloud.Volume(\"master\", new HCloud.VolumeArgs\n        {\n            Location = \"nbg1\",\n            Size = 10,\n        });\n        var main = new HCloud.VolumeAttachment(\"main\", new HCloud.VolumeAttachmentArgs\n        {\n            VolumeId = master.Id,\n            ServerId = node1.Id,\n            Automount = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnode1, err := hcloud.NewServer(ctx, \"node1\", \u0026hcloud.ServerArgs{\n\t\t\tImage:      pulumi.String(\"debian-9\"),\n\t\t\tServerType: pulumi.String(\"cx11\"),\n\t\t\tDatacenter: pulumi.String(\"nbg1-dc3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmaster, err := hcloud.NewVolume(ctx, \"master\", \u0026hcloud.VolumeArgs{\n\t\t\tLocation: pulumi.String(\"nbg1\"),\n\t\t\tSize:     pulumi.Int(10),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = hcloud.NewVolumeAttachment(ctx, \"main\", \u0026hcloud.VolumeAttachmentArgs{\n\t\t\tVolumeId:  master.ID(),\n\t\t\tServerId:  node1.ID(),\n\t\t\tAutomount: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "ID of the Volume.\n"
                }
            },
            "required": [
                "automount",
                "serverId",
                "volumeId"
            ],
            "inputProperties": {
                "automount": {
                    "type": "boolean",
                    "description": "Automount the volume upon attaching it.\n"
                },
                "serverId": {
                    "type": "integer",
                    "description": "Server to attach the Volume to.\n"
                },
                "volumeId": {
                    "type": "integer",
                    "description": "ID of the Volume.\n"
                }
            },
            "requiredInputs": [
                "serverId",
                "volumeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeAttachment resources.\n",
                "properties": {
                    "automount": {
                        "type": "boolean",
                        "description": "Automount the volume upon attaching it.\n"
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "Server to attach the Volume to.\n"
                    },
                    "volumeId": {
                        "type": "integer",
                        "description": "ID of the Volume.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "hcloud:index/getCertificate:getCertificate": {
            "description": "Provides details about a specific Hetzner Cloud Certificate.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificate.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the certificate.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCertificate.\n",
                "properties": {
                    "certificate": {
                        "type": "string",
                        "description": "(string) PEM encoded TLS certificate.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) Domains and subdomains covered by the certificate.\n"
                    },
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the certificate.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the certificate.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs) assigned to the certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Certificate.\n"
                    },
                    "notValidAfter": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate stops being valid (in ISO-8601 format).\n"
                    },
                    "notValidBefore": {
                        "type": "string",
                        "description": "(string) Point in time when the Certificate becomes valid (in ISO-8601 format).\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificate",
                    "created",
                    "domainNames",
                    "fingerprint",
                    "labels",
                    "notValidAfter",
                    "notValidBefore"
                ]
            }
        },
        "hcloud:index/getDatacenter:getDatacenter": {
            "description": "Provides details about a specific Hetzner Cloud Datacenter.\nUse this resource to get detailed information about specific datacenter.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ds1 = pulumi.output(hcloud.getDatacenter({\n    name: \"fsn1-dc8\",\n}, { async: true }));\nconst ds2 = pulumi.output(hcloud.getDatacenter({\n    id: 4,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nds1 = hcloud.get_datacenter(name=\"fsn1-dc8\")\nds2 = hcloud.get_datacenter(id=4)\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ds1 = Output.Create(HCloud.GetDatacenter.InvokeAsync(new HCloud.GetDatacenterArgs\n        {\n            Name = \"fsn1-dc8\",\n        }));\n        var ds2 = Output.Create(HCloud.GetDatacenter.InvokeAsync(new HCloud.GetDatacenterArgs\n        {\n            Id = 4,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"fsn1-dc8\"\n\t\t_, err := hcloud.GetDatacenter(ctx, \u0026hcloud.GetDatacenterArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := 4\n\t\t_, err = hcloud.GetDatacenter(ctx, \u0026hcloud.GetDatacenterArgs{\n\t\t\tId: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatacenter.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the datacenter.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the datacenter.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatacenter.\n",
                "properties": {
                    "availableServerTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(list) List of available server types.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the datacenter.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the datacenter.\n"
                    },
                    "location": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) Physical datacenter location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the datacenter.\n"
                    },
                    "supportedServerTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(list) List of server types supported by the datacenter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "availableServerTypeIds",
                    "description",
                    "id",
                    "location",
                    "name",
                    "supportedServerTypeIds"
                ]
            }
        },
        "hcloud:index/getDatacenters:getDatacenters": {
            "description": "Provides a list of available Hetzner Cloud Datacenters.\nThis resource may be useful to create highly available infrastructure, distributed across several datacenters.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ds = hcloud.getDatacenters({});\nconst workers: hcloud.Server[];\nfor (const range = {value: 0}; range.value \u003c 3; range.value++) {\n    workers.push(new hcloud.Server(`workers-${range.value}`, {\n        image: \"debian-9\",\n        serverType: \"cx31\",\n        datacenter: ds.then(ds =\u003e ds.names)[range.value],\n    }));\n}\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nds = hcloud.get_datacenters()\nworkers = []\nfor range in [{\"value\": i} for i in range(0, 3)]:\n    workers.append(hcloud.Server(f\"workers-{range['value']}\",\n        image=\"debian-9\",\n        server_type=\"cx31\",\n        datacenter=ds.names[range[\"value\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ds = Output.Create(HCloud.GetDatacenters.InvokeAsync());\n        var workers = new List\u003cHCloud.Server\u003e();\n        for (var rangeIndex = 0; rangeIndex \u003c 3; rangeIndex++)\n        {\n            var range = new { Value = rangeIndex };\n            workers.Add(new HCloud.Server($\"workers-{range.Value}\", new HCloud.ServerArgs\n            {\n                Image = \"debian-9\",\n                ServerType = \"cx31\",\n                Datacenter = ds.Apply(ds =\u003e ds.Names)[range.Value],\n            }));\n        }\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDatacenters.\n",
                "properties": {
                    "datacenterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique datacenter identifiers.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDatacenters.\n",
                "properties": {
                    "datacenterIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique datacenter identifiers.\n"
                    },
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of all datacenter descriptions.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of datacenter names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "descriptions",
                    "names",
                    "id"
                ]
            }
        },
        "hcloud:index/getFloatingIp:getFloatingIp": {
            "description": "Provides details about a Hetzner Cloud Floating IP.\n\nThis resource can be useful when you need to determine a Floating IP ID based on the IP address.\n\n{{% examples %}}\n## Example Usage\n\n# Data Source: hcloud.FloatingIp\nProvides details about a Hetzner Cloud Floating IP.\nThis resource can be useful when you need to determine a Floating IP ID based on the IP address.\n\n{{% example %}}\n### Additional Examples\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ip1 = hcloud.getFloatingIp({\n    ipAddress: \"1.2.3.4\",\n});\nconst ip2 = hcloud.getFloatingIp({\n    withSelector: \"key=value\",\n});\nconst main: hcloud.FloatingIpAssignment[];\nfor (const range = {value: 0}; range.value \u003c _var.counter; range.value++) {\n    main.push(new hcloud.FloatingIpAssignment(`main-${range.value}`, {\n        floatingIpId: ip1.then(ip1 =\u003e ip1.id),\n        serverId: hcloud_server.main.id,\n    }));\n}\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nip1 = hcloud.get_floating_ip(ip_address=\"1.2.3.4\")\nip2 = hcloud.get_floating_ip(with_selector=\"key=value\")\nmain = []\nfor range in [{\"value\": i} for i in range(0, var.counter)]:\n    main.append(hcloud.FloatingIpAssignment(f\"main-{range['value']}\",\n        floating_ip_id=ip1.id,\n        server_id=hcloud_server[\"main\"][\"id\"]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ip1 = Output.Create(HCloud.GetFloatingIp.InvokeAsync(new HCloud.GetFloatingIpArgs\n        {\n            IpAddress = \"1.2.3.4\",\n        }));\n        var ip2 = Output.Create(HCloud.GetFloatingIp.InvokeAsync(new HCloud.GetFloatingIpArgs\n        {\n            WithSelector = \"key=value\",\n        }));\n        var main = new List\u003cHCloud.FloatingIpAssignment\u003e();\n        for (var rangeIndex = 0; rangeIndex \u003c @var.Counter; rangeIndex++)\n        {\n            var range = new { Value = rangeIndex };\n            main.Add(new HCloud.FloatingIpAssignment($\"main-{range.Value}\", new HCloud.FloatingIpAssignmentArgs\n            {\n                FloatingIpId = ip1.Apply(ip1 =\u003e ip1.Id),\n                ServerId = hcloud_server.Main.Id,\n            }));\n        }\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"1.2.3.4\"\n\t\tip1, err := hcloud.LookupFloatingIp(ctx, \u0026hcloud.LookupFloatingIpArgs{\n\t\t\tIpAddress: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := \"key=value\"\n\t\t_, err = hcloud.LookupFloatingIp(ctx, \u0026hcloud.LookupFloatingIpArgs{\n\t\t\tWithSelector: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar main []*hcloud.FloatingIpAssignment\n\t\tfor key0, _ := range _var.Counter {\n\t\t\t__res, err := hcloud.NewFloatingIpAssignment(ctx, fmt.Sprintf(\"main-%v\", key0), \u0026hcloud.FloatingIpAssignmentArgs{\n\t\t\t\tFloatingIpId: pulumi.Int(ip1.Id),\n\t\t\t\tServerId:     pulumi.Any(hcloud_server.Main.Id),\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tmain = append(main, __res)\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFloatingIp.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Floating IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP address of the Floating IP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Floating IP.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFloatingIp.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the Floating IP.\n"
                    },
                    "homeLocation": {
                        "type": "string",
                        "description": "(string) Home location.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Floating IP.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(string) IP Address of the Floating IP.\n"
                    },
                    "ipNetwork": {
                        "type": "string",
                        "description": "(string) IPv6 subnet. (Only set if `type` is `ipv6`)\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Floating IP.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverId": {
                        "type": "integer",
                        "description": "(int) Server to assign the Floating IP is assigned to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) Type of the Floating IP.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "homeLocation",
                    "ipAddress",
                    "ipNetwork",
                    "labels",
                    "serverId",
                    "type"
                ]
            }
        },
        "hcloud:index/getImage:getImage": {
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Image.\n"
                    },
                    "mostRecent": {
                        "type": "boolean",
                        "description": "If more than one result is returned, use the most recent Image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Image.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only images with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "(string) Date when the Image was created (in ISO-8601 format).\n"
                    },
                    "deprecated": {
                        "type": "string",
                        "description": "(string) Point in time when the image is considered to be deprecated (in ISO-8601 format).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the Image.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Image.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "mostRecent": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Image, only present when the Image is of type `system`.\n"
                    },
                    "osFlavor": {
                        "type": "string",
                        "description": "(string) Flavor of operating system contained in the image, could be `ubuntu`, `centos`, `debian`, `fedora` or `unknown`.\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "(string) Operating system version.\n"
                    },
                    "rapidDeploy": {
                        "type": "boolean",
                        "description": "(bool) Indicates that rapid deploy of the image is available.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) Type of the Image, could be `system`, `backup` or `snapshot`.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "deprecated",
                    "description",
                    "labels",
                    "name",
                    "osFlavor",
                    "osVersion",
                    "rapidDeploy",
                    "type"
                ]
            }
        },
        "hcloud:index/getLoadBalancer:getLoadBalancer": {
            "description": "Provides details about a specific Hetzner Cloud Server.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst lb1 = pulumi.output(hcloud.getLoadBalancer({\n    name: \"my-load-balancer\",\n}, { async: true }));\nconst lb2 = pulumi.output(hcloud.getLoadBalancer({\n    id: 123,\n}, { async: true }));\nconst lb3 = pulumi.output(hcloud.getLoadBalancer({\n    withSelector: \"key=value\",\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nlb1 = hcloud.get_load_balancer(name=\"my-load-balancer\")\nlb2 = hcloud.get_load_balancer(id=123)\nlb3 = hcloud.get_load_balancer(with_selector=\"key=value\")\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var lb1 = Output.Create(HCloud.GetLoadBalancer.InvokeAsync(new HCloud.GetLoadBalancerArgs\n        {\n            Name = \"my-load-balancer\",\n        }));\n        var lb2 = Output.Create(HCloud.GetLoadBalancer.InvokeAsync(new HCloud.GetLoadBalancerArgs\n        {\n            Id = 123,\n        }));\n        var lb3 = Output.Create(HCloud.GetLoadBalancer.InvokeAsync(new HCloud.GetLoadBalancerArgs\n        {\n            WithSelector = \"key=value\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"my-load-balancer\"\n\t\t_, err := hcloud.LookupLoadBalancer(ctx, \u0026hcloud.LookupLoadBalancerArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := 123\n\t\t_, err = hcloud.LookupLoadBalancer(ctx, \u0026hcloud.LookupLoadBalancerArgs{\n\t\t\tId: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt2 := \"key=value\"\n\t\t_, err = hcloud.LookupLoadBalancer(ctx, \u0026hcloud.LookupLoadBalancerArgs{\n\t\t\tWithSelector: \u0026opt2,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoadBalancer.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Load Balancer.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Load Balancer.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoadBalancer.\n",
                "properties": {
                    "algorithm": {
                        "$ref": "#/types/hcloud:index/getLoadBalancerAlgorithm:getLoadBalancerAlgorithm",
                        "description": "(Optional) Configuration of the algorithm the Load Balancer use.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the Load Balancer.\n"
                    },
                    "ipv4": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "ipv6": {
                        "type": "string",
                        "description": "(string) IPv4 Address of the Load Balancer.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs) .\n"
                    },
                    "loadBalancerType": {
                        "type": "string",
                        "description": "(string) Name of the Type of the Load Balancer.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) Name of the location the Load Balancer is in.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the Load Balancer.\n"
                    },
                    "networkZone": {
                        "type": "string"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancerService:getLoadBalancerService"
                        },
                        "description": "(list) List of services a Load Balancer provides.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getLoadBalancerTarget:getLoadBalancerTarget"
                        },
                        "description": "(list) List of targets of the Load Balancer.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "algorithm",
                    "ipv4",
                    "ipv6",
                    "labels",
                    "loadBalancerType",
                    "location",
                    "networkZone",
                    "services",
                    "targets"
                ]
            }
        },
        "hcloud:index/getLocation:getLocation": {
            "description": "Provides details about a specific Hetzner Cloud Location.\nUse this resource to get detailed information about specific location.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst l1 = pulumi.output(hcloud.getLocation({\n    name: \"fsn1\",\n}, { async: true }));\nconst l2 = pulumi.output(hcloud.getLocation({\n    id: 1,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nl1 = hcloud.get_location(name=\"fsn1\")\nl2 = hcloud.get_location(id=1)\n```\n```csharp\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var l1 = Output.Create(HCloud.GetLocation.InvokeAsync(new HCloud.GetLocationArgs\n        {\n            Name = \"fsn1\",\n        }));\n        var l2 = Output.Create(HCloud.GetLocation.InvokeAsync(new HCloud.GetLocationArgs\n        {\n            Id = 1,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"fsn1\"\n\t\t_, err := hcloud.GetLocation(ctx, \u0026hcloud.GetLocationArgs{\n\t\t\tName: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\topt1 := 1\n\t\t_, err = hcloud.GetLocation(ctx, \u0026hcloud.GetLocationArgs{\n\t\t\tId: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLocation.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the location.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocation.\n",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "(string) City of the location.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "(string) Country of the location.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) Description of the location.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the location.\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "(float) Latitude of the city.\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "(float) Longitude of the city.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the location.\n"
                    }
                },
                "type": "object",
                "required": [
                    "city",
                    "country",
                    "description",
                    "id",
                    "latitude",
                    "longitude",
                    "name"
                ]
            }
        },
        "hcloud:index/getLocations:getLocations": {
            "description": "Provides a list of available Hetzner Cloud Locations.\nThis resource may be useful to create highly available infrastructure, distributed across several locations.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as hcloud from \"@pulumi/hcloud\";\n\nconst ds = hcloud.getLocations({});\nconst workers: hcloud.Server[];\nfor (const range = {value: 0}; range.value \u003c 3; range.value++) {\n    workers.push(new hcloud.Server(`workers-${range.value}`, {\n        image: \"debian-9\",\n        serverType: \"cx31\",\n        location: ds.then(ds =\u003e ds.names)[range.value],\n    }));\n}\n```\n```python\nimport pulumi\nimport pulumi_hcloud as hcloud\n\nds = hcloud.get_locations()\nworkers = []\nfor range in [{\"value\": i} for i in range(0, 3)]:\n    workers.append(hcloud.Server(f\"workers-{range['value']}\",\n        image=\"debian-9\",\n        server_type=\"cx31\",\n        location=ds.names[range[\"value\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing HCloud = Pulumi.HCloud;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ds = Output.Create(HCloud.GetLocations.InvokeAsync());\n        var workers = new List\u003cHCloud.Server\u003e();\n        for (var rangeIndex = 0; rangeIndex \u003c 3; rangeIndex++)\n        {\n            var range = new { Value = rangeIndex };\n            workers.Add(new HCloud.Server($\"workers-{range.Value}\", new HCloud.ServerArgs\n            {\n                Image = \"debian-9\",\n                ServerType = \"cx31\",\n                Location = ds.Apply(ds =\u003e ds.Names)[range.Value],\n            }));\n        }\n    }\n\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLocations.\n",
                "properties": {
                    "locationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique location identifiers.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocations.\n",
                "properties": {
                    "descriptions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of all location descriptions.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of unique location identifiers.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(list) List of location names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "descriptions",
                    "names",
                    "id"
                ]
            }
        },
        "hcloud:index/getNetwork:getNetwork": {
            "inputs": {
                "description": "A collection of arguments for invoking getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the Network.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "IPv4 prefix of the Network.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network.\n"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNetwork.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique ID of the Network.\n"
                    },
                    "ipRange": {
                        "type": "string",
                        "description": "IPv4 prefix of the Network.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Network.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "hcloud:index/getServer:getServer": {
            "inputs": {
                "description": "A collection of arguments for invoking getServer.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the server.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the server.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only servers with the specified status, could contain `initializing`, `starting`, `running`, `stopping`, `off`, `deleting`, `rebuilding`, `migrating`, `unknown`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServer.\n",
                "properties": {
                    "backupWindow": {
                        "type": "string",
                        "description": "(string) The backup window of the server, if enabled.\n"
                    },
                    "backups": {
                        "type": "boolean",
                        "description": "(boolean) Whether backups are enabled.\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "(string) The datacenter name.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the server.\n"
                    },
                    "image": {
                        "type": "string",
                        "description": "(string) Name or ID of the image the server was created from.\n"
                    },
                    "ipv4Address": {
                        "type": "string",
                        "description": "(string) The IPv4 address.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "(string) The first IPv6 address of the assigned network.\n"
                    },
                    "ipv6Network": {
                        "type": "string",
                        "description": "(string) The IPv6 network.\n"
                    },
                    "iso": {
                        "type": "string",
                        "description": "(string) ID or Name of the mounted ISO image.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "(map) User-defined labels (key-value pairs)\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "(string) The location name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the server.\n"
                    },
                    "rescue": {
                        "type": "string"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "serverType": {
                        "type": "string",
                        "description": "(string) Name of the server type.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(string) The status of the server.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "backupWindow",
                    "backups",
                    "datacenter",
                    "id",
                    "image",
                    "ipv4Address",
                    "ipv6Address",
                    "ipv6Network",
                    "iso",
                    "labels",
                    "location",
                    "name",
                    "rescue",
                    "serverType",
                    "status"
                ]
            }
        },
        "hcloud:index/getSshKey:getSshKey": {
            "inputs": {
                "description": "A collection of arguments for invoking getSshKey.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "Fingerprint of the SSH Key.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ID of the SSH Key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the SSH Key.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKey.\n",
                "properties": {
                    "fingerprint": {
                        "type": "string",
                        "description": "(string) Fingerprint of the SSH Key.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Unique ID of the SSH Key.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) Name of the SSH Key.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "(string) Public Key of the SSH Key.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fingerprint",
                    "labels",
                    "name",
                    "publicKey"
                ]
            }
        },
        "hcloud:index/getSshKeys:getSshKeys": {
            "inputs": {
                "description": "A collection of arguments for invoking getSshKeys.\n",
                "properties": {
                    "withSelector": {
                        "type": "string",
                        "description": "[Label selector](https://docs.hetzner.cloud/#overview-label-selector)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSshKeys.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/hcloud:index/getSshKeysSshKey:getSshKeysSshKey"
                        },
                        "description": "(list) List of all matches SSH keys. See `data.hcloud_ssh_key` for schema.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "sshKeys",
                    "id"
                ]
            }
        },
        "hcloud:index/getVolume:getVolume": {
            "inputs": {
                "description": "A collection of arguments for invoking getVolume.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "ID of the volume.\n"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the volume.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "server": {
                        "type": "string"
                    },
                    "withSelector": {
                        "type": "string",
                        "description": "Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).\n"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List only volumes with the specified status, could contain `creating` or `available`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVolume.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique ID of the volume.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "linuxDevice": {
                        "type": "string"
                    },
                    "location": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the volume.\n"
                    },
                    "selector": {
                        "type": "string",
                        "deprecationMessage": "Please use the with_selector property instead."
                    },
                    "server": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the volume.\n"
                    },
                    "withSelector": {
                        "type": "string"
                    },
                    "withStatuses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "labels",
                    "linuxDevice",
                    "name",
                    "size"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "hcloud": "HCloud"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing hcloud cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-hcloud` repo](https://github.com/pulumi/pulumi-hcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`hetznercloud/terraform-provider-hcloud` repo](https://github.com/hetznercloud/terraform-provider-hcloud/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hetznercloud/terraform-provider-hcloud)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-hcloud` repo](https://github.com/pulumi/pulumi-hcloud/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`hetznercloud/terraform-provider-hcloud` repo](https://github.com/hetznercloud/terraform-provider-hcloud/issues).",
            "requires": {
                "pulumi": "\u003e=2.9.0,\u003c3.0.0"
            },
            "usesIOClasses": true
        }
    }
}