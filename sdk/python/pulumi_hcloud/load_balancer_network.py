# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['LoadBalancerNetwork']


class LoadBalancerNetwork(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_public_interface: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[int]] = None,
                 network_id: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Provides a Hetzner Cloud Load Balancer Network to represent a private network on a Load Balancer in the Hetzner Cloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_hcloud as hcloud

        lb1 = hcloud.LoadBalancer("lb1",
            load_balancer_type="lb11",
            network_zone="eu-central")
        mynet = hcloud.Network("mynet", ip_range="10.0.0.0/8")
        foonet = hcloud.NetworkSubnet("foonet",
            network_id=mynet.id,
            type="cloud",
            network_zone="eu-central",
            ip_range="10.0.1.0/24")
        srvnetwork = hcloud.LoadBalancerNetwork("srvnetwork",
            load_balancer_id=lb1.id,
            network_id=mynet.id,
            ip="10.0.1.5")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_public_interface: Enable or disable the
               Load Balancers public interface. Default: `true`
        :param pulumi.Input[str] ip: IP to request to be assigned to this Load
               Balancer. If you do not provide this then you will be auto assigned an
               IP address.
        :param pulumi.Input[int] load_balancer_id: ID of the Load Balancer.
        :param pulumi.Input[int] network_id: ID of the network which should be added
               to the Load Balancer. Required if `subnet_id` is not set. Successful
               creation of the resource depends on the existence of a subnet in the
               Hetzner Cloud Backend. Using `network_id` will not create an explicit
               dependency between the Load Balancer and the subnet. Therefore
               `depends_on` may need to be used. Alternatively the `subnet_id`
               property can be used, which will create an explicit dependency between
               `LoadBalancerNetwork` and the existence of a subnet.
        :param pulumi.Input[str] subnet_id: ID of the sub-network which should be
               added to the Load Balancer. Required if `network_id` is not set.
               *Note*: if the `ip` property is missing, the Load Balancer is
               currently added to the last created subnet.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['enable_public_interface'] = enable_public_interface
            __props__['ip'] = ip
            if load_balancer_id is None:
                raise TypeError("Missing required property 'load_balancer_id'")
            __props__['load_balancer_id'] = load_balancer_id
            __props__['network_id'] = network_id
            __props__['subnet_id'] = subnet_id
        super(LoadBalancerNetwork, __self__).__init__(
            'hcloud:index/loadBalancerNetwork:LoadBalancerNetwork',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_public_interface: Optional[pulumi.Input[bool]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            load_balancer_id: Optional[pulumi.Input[int]] = None,
            network_id: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None) -> 'LoadBalancerNetwork':
        """
        Get an existing LoadBalancerNetwork resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_public_interface: Enable or disable the
               Load Balancers public interface. Default: `true`
        :param pulumi.Input[str] ip: IP to request to be assigned to this Load
               Balancer. If you do not provide this then you will be auto assigned an
               IP address.
        :param pulumi.Input[int] load_balancer_id: ID of the Load Balancer.
        :param pulumi.Input[int] network_id: ID of the network which should be added
               to the Load Balancer. Required if `subnet_id` is not set. Successful
               creation of the resource depends on the existence of a subnet in the
               Hetzner Cloud Backend. Using `network_id` will not create an explicit
               dependency between the Load Balancer and the subnet. Therefore
               `depends_on` may need to be used. Alternatively the `subnet_id`
               property can be used, which will create an explicit dependency between
               `LoadBalancerNetwork` and the existence of a subnet.
        :param pulumi.Input[str] subnet_id: ID of the sub-network which should be
               added to the Load Balancer. Required if `network_id` is not set.
               *Note*: if the `ip` property is missing, the Load Balancer is
               currently added to the last created subnet.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["enable_public_interface"] = enable_public_interface
        __props__["ip"] = ip
        __props__["load_balancer_id"] = load_balancer_id
        __props__["network_id"] = network_id
        __props__["subnet_id"] = subnet_id
        return LoadBalancerNetwork(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enablePublicInterface")
    def enable_public_interface(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable or disable the
        Load Balancers public interface. Default: `true`
        """
        return pulumi.get(self, "enable_public_interface")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        IP to request to be assigned to this Load
        Balancer. If you do not provide this then you will be auto assigned an
        IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Output[int]:
        """
        ID of the Load Balancer.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the network which should be added
        to the Load Balancer. Required if `subnet_id` is not set. Successful
        creation of the resource depends on the existence of a subnet in the
        Hetzner Cloud Backend. Using `network_id` will not create an explicit
        dependency between the Load Balancer and the subnet. Therefore
        `depends_on` may need to be used. Alternatively the `subnet_id`
        property can be used, which will create an explicit dependency between
        `LoadBalancerNetwork` and the existence of a subnet.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the sub-network which should be
        added to the Load Balancer. Required if `network_id` is not set.
        *Note*: if the `ip` property is missing, the Load Balancer is
        currently added to the last created subnet.
        """
        return pulumi.get(self, "subnet_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

