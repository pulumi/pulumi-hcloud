// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a list of available Hetzner Cloud Locations.
 *
 * This resource may be useful to create highly available infrastructure, distributed across several locations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const all = hcloud.getLocations({});
 * const workers: hcloud.Server[] = [];
 * for (const range = {value: 0}; range.value < 5; range.value++) {
 *     workers.push(new hcloud.Server(`workers-${range.value}`, {
 *         name: `node${range.value}`,
 *         image: "debian-12",
 *         serverType: "cx22",
 *         location: all.then(all => all.locations[range.value]).then(locations => locations.name),
 *     }));
 * }
 * ```
 */
export function getLocations(opts?: pulumi.InvokeOptions): Promise<GetLocationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcloud:index/getLocations:getLocations", {
    }, opts);
}

/**
 * A collection of values returned by getLocations.
 */
export interface GetLocationsResult {
    /**
     * @deprecated Use locations list instead
     */
    readonly descriptions: string[];
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * @deprecated Use locations list instead
     */
    readonly locationIds: string[];
    readonly locations: outputs.GetLocationsLocation[];
    /**
     * @deprecated Use locations list instead
     */
    readonly names: string[];
}
/**
 * Provides a list of available Hetzner Cloud Locations.
 *
 * This resource may be useful to create highly available infrastructure, distributed across several locations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const all = hcloud.getLocations({});
 * const workers: hcloud.Server[] = [];
 * for (const range = {value: 0}; range.value < 5; range.value++) {
 *     workers.push(new hcloud.Server(`workers-${range.value}`, {
 *         name: `node${range.value}`,
 *         image: "debian-12",
 *         serverType: "cx22",
 *         location: all.then(all => all.locations[range.value]).then(locations => locations.name),
 *     }));
 * }
 * ```
 */
export function getLocationsOutput(opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetLocationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("hcloud:index/getLocations:getLocations", {
    }, opts);
}
