// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const sshKey1 = hcloud.getSshKey({
 *     id: 1234,
 * });
 * const sshKey2 = hcloud.getSshKey({
 *     name: "my-ssh-key",
 * });
 * const sshKey3 = hcloud.getSshKey({
 *     fingerprint: "43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8",
 * });
 * const sshKey4 = hcloud.getSshKey({
 *     withSelector: "key=value",
 * });
 * const main = new hcloud.Server("main", {sshKeys: [
 *     sshKey1.then(sshKey1 => sshKey1.id),
 *     sshKey2.then(sshKey2 => sshKey2.id),
 *     sshKey3.then(sshKey3 => sshKey3.id),
 * ]});
 * ```
 */
export function getSshKey(args?: GetSshKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetSshKeyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcloud:index/getSshKey:getSshKey", {
        "fingerprint": args.fingerprint,
        "id": args.id,
        "labels": args.labels,
        "name": args.name,
        "publicKey": args.publicKey,
        "selector": args.selector,
        "withSelector": args.withSelector,
    }, opts);
}

/**
 * A collection of arguments for invoking getSshKey.
 */
export interface GetSshKeyArgs {
    /**
     * Fingerprint of the SSH Key.
     */
    fingerprint?: string;
    /**
     * ID of the SSH Key.
     */
    id?: number;
    labels?: {[key: string]: string};
    /**
     * Name of the SSH Key.
     */
    name?: string;
    /**
     * (string) Public Key of the SSH Key.
     */
    publicKey?: string;
    /**
     * @deprecated Please use the withSelector property instead.
     */
    selector?: string;
    /**
     * [Label selector](https://docs.hetzner.cloud/#overview-label-selector)
     */
    withSelector?: string;
}

/**
 * A collection of values returned by getSshKey.
 */
export interface GetSshKeyResult {
    /**
     * (string) Fingerprint of the SSH Key.
     */
    readonly fingerprint: string;
    /**
     * (int) Unique ID of the SSH Key.
     */
    readonly id: number;
    readonly labels: {[key: string]: string};
    /**
     * (string) Name of the SSH Key.
     */
    readonly name: string;
    /**
     * (string) Public Key of the SSH Key.
     */
    readonly publicKey: string;
    /**
     * @deprecated Please use the withSelector property instead.
     */
    readonly selector?: string;
    readonly withSelector?: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const sshKey1 = hcloud.getSshKey({
 *     id: 1234,
 * });
 * const sshKey2 = hcloud.getSshKey({
 *     name: "my-ssh-key",
 * });
 * const sshKey3 = hcloud.getSshKey({
 *     fingerprint: "43:51:43:a1:b5:fc:8b:b7:0a:3a:a9:b1:0f:66:73:a8",
 * });
 * const sshKey4 = hcloud.getSshKey({
 *     withSelector: "key=value",
 * });
 * const main = new hcloud.Server("main", {sshKeys: [
 *     sshKey1.then(sshKey1 => sshKey1.id),
 *     sshKey2.then(sshKey2 => sshKey2.id),
 *     sshKey3.then(sshKey3 => sshKey3.id),
 * ]});
 * ```
 */
export function getSshKeyOutput(args?: GetSshKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSshKeyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("hcloud:index/getSshKey:getSshKey", {
        "fingerprint": args.fingerprint,
        "id": args.id,
        "labels": args.labels,
        "name": args.name,
        "publicKey": args.publicKey,
        "selector": args.selector,
        "withSelector": args.withSelector,
    }, opts);
}

/**
 * A collection of arguments for invoking getSshKey.
 */
export interface GetSshKeyOutputArgs {
    /**
     * Fingerprint of the SSH Key.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * ID of the SSH Key.
     */
    id?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the SSH Key.
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Public Key of the SSH Key.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * @deprecated Please use the withSelector property instead.
     */
    selector?: pulumi.Input<string>;
    /**
     * [Label selector](https://docs.hetzner.cloud/#overview-label-selector)
     */
    withSelector?: pulumi.Input<string>;
}
