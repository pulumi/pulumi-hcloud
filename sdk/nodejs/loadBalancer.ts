// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Hetzner Cloud Load Balancer to represent a Load Balancer in the Hetzner Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const myServer = new hcloud.Server("my_server", {
 *     name: "server-%d",
 *     serverType: "cx22",
 *     image: "ubuntu-18.04",
 * });
 * const loadBalancer = new hcloud.LoadBalancer("load_balancer", {
 *     name: "my-load-balancer",
 *     loadBalancerType: "lb11",
 *     location: "nbg1",
 * });
 * const loadBalancerTarget = new hcloud.LoadBalancerTarget("load_balancer_target", {
 *     type: "server",
 *     loadBalancerId: loadBalancer.id,
 *     serverId: myServer.id,
 * });
 * ```
 *
 * ## Import
 *
 * Load Balancers can be imported using its `id`:
 *
 * ```sh
 * $ pulumi import hcloud:index/loadBalancer:LoadBalancer example "$LOAD_BALANCER_ID"
 * ```
 */
export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcloud:index/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    /**
     * Configuration of the algorithm the Load Balancer use.
     */
    declare public readonly algorithm: pulumi.Output<outputs.LoadBalancerAlgorithm>;
    /**
     * Enable or disable delete protection. See "Delete Protection" in the Provider Docs for details.
     */
    declare public readonly deleteProtection: pulumi.Output<boolean | undefined>;
    /**
     * (string) IPv4 Address of the Load Balancer.
     */
    declare public /*out*/ readonly ipv4: pulumi.Output<string>;
    /**
     * (string) IPv6 Address of the Load Balancer.
     */
    declare public /*out*/ readonly ipv6: pulumi.Output<string>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    /**
     * Type of the Load Balancer.
     */
    declare public readonly loadBalancerType: pulumi.Output<string>;
    /**
     * The location name of the Load Balancer. Require when no networkZone is set. See the [Hetzner Docs](https://docs.hetzner.com/cloud/general/locations/#what-locations-are-there) for more details about locations.
     */
    declare public readonly location: pulumi.Output<string>;
    /**
     * Name of the Load Balancer.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (int) ID of the first private network that this Load Balancer is connected to.
     */
    declare public /*out*/ readonly networkId: pulumi.Output<number>;
    /**
     * (string) IP of the Load Balancer in the first private network that it is connected to.
     */
    declare public /*out*/ readonly networkIp: pulumi.Output<string>;
    /**
     * The Network Zone of the Load Balancer. Require when no location is set.
     */
    declare public readonly networkZone: pulumi.Output<string>;
    /**
     * @deprecated Use hcloud.LoadBalancerTarget resource instead. This allows the full control over the selected targets.
     */
    declare public readonly targets: pulumi.Output<outputs.LoadBalancerTarget[]>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["algorithm"] = state?.algorithm;
            resourceInputs["deleteProtection"] = state?.deleteProtection;
            resourceInputs["ipv4"] = state?.ipv4;
            resourceInputs["ipv6"] = state?.ipv6;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["loadBalancerType"] = state?.loadBalancerType;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["networkIp"] = state?.networkIp;
            resourceInputs["networkZone"] = state?.networkZone;
            resourceInputs["targets"] = state?.targets;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if (args?.loadBalancerType === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerType'");
            }
            resourceInputs["algorithm"] = args?.algorithm;
            resourceInputs["deleteProtection"] = args?.deleteProtection;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["loadBalancerType"] = args?.loadBalancerType;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkZone"] = args?.networkZone;
            resourceInputs["targets"] = args?.targets;
            resourceInputs["ipv4"] = undefined /*out*/;
            resourceInputs["ipv6"] = undefined /*out*/;
            resourceInputs["networkId"] = undefined /*out*/;
            resourceInputs["networkIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * Configuration of the algorithm the Load Balancer use.
     */
    algorithm?: pulumi.Input<inputs.LoadBalancerAlgorithm>;
    /**
     * Enable or disable delete protection. See "Delete Protection" in the Provider Docs for details.
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * (string) IPv4 Address of the Load Balancer.
     */
    ipv4?: pulumi.Input<string>;
    /**
     * (string) IPv6 Address of the Load Balancer.
     */
    ipv6?: pulumi.Input<string>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of the Load Balancer.
     */
    loadBalancerType?: pulumi.Input<string>;
    /**
     * The location name of the Load Balancer. Require when no networkZone is set. See the [Hetzner Docs](https://docs.hetzner.com/cloud/general/locations/#what-locations-are-there) for more details about locations.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the Load Balancer.
     */
    name?: pulumi.Input<string>;
    /**
     * (int) ID of the first private network that this Load Balancer is connected to.
     */
    networkId?: pulumi.Input<number>;
    /**
     * (string) IP of the Load Balancer in the first private network that it is connected to.
     */
    networkIp?: pulumi.Input<string>;
    /**
     * The Network Zone of the Load Balancer. Require when no location is set.
     */
    networkZone?: pulumi.Input<string>;
    /**
     * @deprecated Use hcloud.LoadBalancerTarget resource instead. This allows the full control over the selected targets.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTarget>[]>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * Configuration of the algorithm the Load Balancer use.
     */
    algorithm?: pulumi.Input<inputs.LoadBalancerAlgorithm>;
    /**
     * Enable or disable delete protection. See "Delete Protection" in the Provider Docs for details.
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * User-defined labels (key-value pairs) should be created with.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of the Load Balancer.
     */
    loadBalancerType: pulumi.Input<string>;
    /**
     * The location name of the Load Balancer. Require when no networkZone is set. See the [Hetzner Docs](https://docs.hetzner.com/cloud/general/locations/#what-locations-are-there) for more details about locations.
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the Load Balancer.
     */
    name?: pulumi.Input<string>;
    /**
     * The Network Zone of the Load Balancer. Require when no location is set.
     */
    networkZone?: pulumi.Input<string>;
    /**
     * @deprecated Use hcloud.LoadBalancerTarget resource instead. This allows the full control over the selected targets.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTarget>[]>;
}
