// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Obtain a Hetzner Cloud managed TLS certificate.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const managedCert = new hcloud.ManagedCertificate("managed_cert", {
 *     name: "managed_cert",
 *     domainNames: [
 *         "*.example.com",
 *         "example.com",
 *     ],
 *     labels: {
 *         label_1: "value_1",
 *         label_2: "value_2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Managed certificates can be imported using their `id`:
 *
 * ```sh
 * $ pulumi import hcloud:index/managedCertificate:ManagedCertificate example "$CERTIFICATE_ID"
 * ```
 */
export class ManagedCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ManagedCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedCertificateState, opts?: pulumi.CustomResourceOptions): ManagedCertificate {
        return new ManagedCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcloud:index/managedCertificate:ManagedCertificate';

    /**
     * Returns true if the given object is an instance of ManagedCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedCertificate.__pulumiType;
    }

    /**
     * (string) PEM encoded TLS certificate.
     */
    declare public /*out*/ readonly certificate: pulumi.Output<string>;
    /**
     * (string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * Domain names for which a certificate
     * should be obtained.
     */
    declare public readonly domainNames: pulumi.Output<string[]>;
    /**
     * (string) Fingerprint of the certificate.
     */
    declare public /*out*/ readonly fingerprint: pulumi.Output<string>;
    /**
     * User-defined labels (key-value pairs) the
     * certificate should be created with.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the Certificate.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * (string) Point in time when the Certificate stops being valid (in ISO-8601 format).
     */
    declare public /*out*/ readonly notValidAfter: pulumi.Output<string>;
    /**
     * (string) Point in time when the Certificate becomes valid (in ISO-8601 format).
     */
    declare public /*out*/ readonly notValidBefore: pulumi.Output<string>;
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a ManagedCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedCertificateArgs | ManagedCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedCertificateState | undefined;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["created"] = state?.created;
            resourceInputs["domainNames"] = state?.domainNames;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["notValidAfter"] = state?.notValidAfter;
            resourceInputs["notValidBefore"] = state?.notValidBefore;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as ManagedCertificateArgs | undefined;
            if (args?.domainNames === undefined && !opts.urn) {
                throw new Error("Missing required property 'domainNames'");
            }
            resourceInputs["domainNames"] = args?.domainNames;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["notValidAfter"] = undefined /*out*/;
            resourceInputs["notValidBefore"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedCertificate resources.
 */
export interface ManagedCertificateState {
    /**
     * (string) PEM encoded TLS certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * (string) Point in time when the Certificate was created at Hetzner Cloud (in ISO-8601 format).
     */
    created?: pulumi.Input<string>;
    /**
     * Domain names for which a certificate
     * should be obtained.
     */
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (string) Fingerprint of the certificate.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * User-defined labels (key-value pairs) the
     * certificate should be created with.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * (string) Point in time when the Certificate stops being valid (in ISO-8601 format).
     */
    notValidAfter?: pulumi.Input<string>;
    /**
     * (string) Point in time when the Certificate becomes valid (in ISO-8601 format).
     */
    notValidBefore?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedCertificate resource.
 */
export interface ManagedCertificateArgs {
    /**
     * Domain names for which a certificate
     * should be obtained.
     */
    domainNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined labels (key-value pairs) the
     * certificate should be created with.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Certificate.
     */
    name?: pulumi.Input<string>;
}
