// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Attaches resource to a Hetzner Cloud Firewall.
 *
 * *Note*: only one `hcloud.FirewallAttachment` per Firewall is allowed.
 * Any resources that should be attached to that Firewall need to be
 * specified in that `hcloud.FirewallAttachment`.
 *
 * ## Example Usage
 * ### Attach Servers
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const testServer = new hcloud.Server("testServer", {
 *     serverType: "cx11",
 *     image: "ubuntu-20.04",
 * });
 * const basicFirewall = new hcloud.Firewall("basicFirewall", {});
 * const fwRef = new hcloud.FirewallAttachment("fwRef", {
 *     firewallId: basicFirewall.id,
 *     serverIds: [testServer.id],
 * });
 * ```
 * ### Attach Label Selectors
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const testServer = new hcloud.Server("testServer", {
 *     serverType: "cx11",
 *     image: "ubuntu-20.04",
 *     labels: {
 *         "firewall-attachment": "test-server",
 *     },
 * });
 * const basicFirewall = new hcloud.Firewall("basicFirewall", {});
 * const fwRef = new hcloud.FirewallAttachment("fwRef", {
 *     firewallId: basicFirewall.id,
 *     labelSelectors: ["firewall-attachment=test-server"],
 * });
 * ```
 */
export class FirewallAttachment extends pulumi.CustomResource {
    /**
     * Get an existing FirewallAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallAttachmentState, opts?: pulumi.CustomResourceOptions): FirewallAttachment {
        return new FirewallAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcloud:index/firewallAttachment:FirewallAttachment';

    /**
     * Returns true if the given object is an instance of FirewallAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallAttachment.__pulumiType;
    }

    /**
     * ID of the firewall the resources
     * should be attached to.
     */
    public readonly firewallId!: pulumi.Output<number>;
    /**
     * List of label selectors used to
     * select resources to attach to the firewall.
     */
    public readonly labelSelectors!: pulumi.Output<string[] | undefined>;
    /**
     * List of Server IDs to attach to the
     * firewall.
     */
    public readonly serverIds!: pulumi.Output<number[] | undefined>;

    /**
     * Create a FirewallAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallAttachmentArgs | FirewallAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallAttachmentState | undefined;
            resourceInputs["firewallId"] = state ? state.firewallId : undefined;
            resourceInputs["labelSelectors"] = state ? state.labelSelectors : undefined;
            resourceInputs["serverIds"] = state ? state.serverIds : undefined;
        } else {
            const args = argsOrState as FirewallAttachmentArgs | undefined;
            if ((!args || args.firewallId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallId'");
            }
            resourceInputs["firewallId"] = args ? args.firewallId : undefined;
            resourceInputs["labelSelectors"] = args ? args.labelSelectors : undefined;
            resourceInputs["serverIds"] = args ? args.serverIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallAttachment resources.
 */
export interface FirewallAttachmentState {
    /**
     * ID of the firewall the resources
     * should be attached to.
     */
    firewallId?: pulumi.Input<number>;
    /**
     * List of label selectors used to
     * select resources to attach to the firewall.
     */
    labelSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Server IDs to attach to the
     * firewall.
     */
    serverIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a FirewallAttachment resource.
 */
export interface FirewallAttachmentArgs {
    /**
     * ID of the firewall the resources
     * should be attached to.
     */
    firewallId: pulumi.Input<number>;
    /**
     * List of label selectors used to
     * select resources to attach to the firewall.
     */
    labelSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Server IDs to attach to the
     * firewall.
     */
    serverIds?: pulumi.Input<pulumi.Input<number>[]>;
}
