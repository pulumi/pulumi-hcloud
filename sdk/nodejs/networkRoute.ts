// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Hetzner Cloud Network Route to represent a Network route in the Hetzner Cloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcloud from "@pulumi/hcloud";
 *
 * const mynet = new hcloud.Network("mynet", {ipRange: "10.0.0.0/8"});
 * const privNet = new hcloud.NetworkRoute("privNet", {
 *     networkId: mynet.id,
 *     destination: "10.100.1.0/24",
 *     gateway: "10.0.1.1",
 * });
 * ```
 *
 * ## Import
 *
 * Network Route entries can be imported using a compound ID with the following format`<network-id>-<destination>`
 *
 * ```sh
 *  $ pulumi import hcloud:index/networkRoute:NetworkRoute myroute 123-10.0.0.0/16
 * ```
 */
export class NetworkRoute extends pulumi.CustomResource {
    /**
     * Get an existing NetworkRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkRouteState, opts?: pulumi.CustomResourceOptions): NetworkRoute {
        return new NetworkRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcloud:index/networkRoute:NetworkRoute';

    /**
     * Returns true if the given object is an instance of NetworkRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkRoute.__pulumiType;
    }

    /**
     * Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * ID of the Network the route should be added to.
     */
    public readonly networkId!: pulumi.Output<number>;

    /**
     * Create a NetworkRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkRouteArgs | NetworkRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkRouteState | undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
        } else {
            const args = argsOrState as NetworkRouteArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkRoute resources.
 */
export interface NetworkRouteState {
    /**
     * Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
     */
    destination?: pulumi.Input<string>;
    /**
     * Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
     */
    gateway?: pulumi.Input<string>;
    /**
     * ID of the Network the route should be added to.
     */
    networkId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NetworkRoute resource.
 */
export interface NetworkRouteArgs {
    /**
     * Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
     */
    destination: pulumi.Input<string>;
    /**
     * Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
     */
    gateway: pulumi.Input<string>;
    /**
     * ID of the Network the route should be added to.
     */
    networkId: pulumi.Input<number>;
}
