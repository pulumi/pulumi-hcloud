// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := hcloud.LookupVolume(ctx, &GetVolumeArgs{
// 			Id: pulumi.IntRef(1234),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hcloud.LookupVolume(ctx, &GetVolumeArgs{
// 			Name: pulumi.StringRef("my-volume"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hcloud.LookupVolume(ctx, &GetVolumeArgs{
// 			WithSelector: pulumi.StringRef("key=value"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	var rv LookupVolumeResult
	err := ctx.Invoke("hcloud:index/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// ID of the volume.
	Id *int `pulumi:"id"`
	// (string) The location name.
	Location *string `pulumi:"location"`
	// Name of the volume.
	Name *string `pulumi:"name"`
	// Deprecated: Please use the with_selector property instead.
	Selector *string `pulumi:"selector"`
	// (Optional, int) Server ID the volume is attached to
	ServerId *int `pulumi:"serverId"`
	// Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).
	WithSelector *string `pulumi:"withSelector"`
	// List only volumes with the specified status, could contain `creating` or `available`.
	WithStatuses []string `pulumi:"withStatuses"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	// (boolean) Whether delete protection is enabled.
	DeleteProtection bool `pulumi:"deleteProtection"`
	// (int) Unique ID of the volume.
	Id int `pulumi:"id"`
	// (map) User-defined labels (key-value pairs).
	Labels map[string]interface{} `pulumi:"labels"`
	// (string) Device path on the file system for the Volume.
	LinuxDevice string `pulumi:"linuxDevice"`
	// (string) The location name.
	Location *string `pulumi:"location"`
	// (string) Name of the volume.
	Name string `pulumi:"name"`
	// Deprecated: Please use the with_selector property instead.
	Selector *string `pulumi:"selector"`
	// (Optional, int) Server ID the volume is attached to
	ServerId *int `pulumi:"serverId"`
	// (int) Size of the volume.
	Size         int      `pulumi:"size"`
	WithSelector *string  `pulumi:"withSelector"`
	WithStatuses []string `pulumi:"withStatuses"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVolumeResult, error) {
			args := v.(LookupVolumeArgs)
			r, err := LookupVolume(ctx, &args, opts...)
			var s LookupVolumeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// ID of the volume.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// (string) The location name.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of the volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Deprecated: Please use the with_selector property instead.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// (Optional, int) Server ID the volume is attached to
	ServerId pulumi.IntPtrInput `pulumi:"serverId"`
	// Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/#overview-label-selector).
	WithSelector pulumi.StringPtrInput `pulumi:"withSelector"`
	// List only volumes with the specified status, could contain `creating` or `available`.
	WithStatuses pulumi.StringArrayInput `pulumi:"withStatuses"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

// (boolean) Whether delete protection is enabled.
func (o LookupVolumeResultOutput) DeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVolumeResult) bool { return v.DeleteProtection }).(pulumi.BoolOutput)
}

// (int) Unique ID of the volume.
func (o LookupVolumeResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.Id }).(pulumi.IntOutput)
}

// (map) User-defined labels (key-value pairs).
func (o LookupVolumeResultOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v LookupVolumeResult) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

// (string) Device path on the file system for the Volume.
func (o LookupVolumeResultOutput) LinuxDevice() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.LinuxDevice }).(pulumi.StringOutput)
}

// (string) The location name.
func (o LookupVolumeResultOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// (string) Name of the volume.
func (o LookupVolumeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Name }).(pulumi.StringOutput)
}

// Deprecated: Please use the with_selector property instead.
func (o LookupVolumeResultOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// (Optional, int) Server ID the volume is attached to
func (o LookupVolumeResultOutput) ServerId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *int { return v.ServerId }).(pulumi.IntPtrOutput)
}

// (int) Size of the volume.
func (o LookupVolumeResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.Size }).(pulumi.IntOutput)
}

func (o LookupVolumeResultOutput) WithSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.WithSelector }).(pulumi.StringPtrOutput)
}

func (o LookupVolumeResultOutput) WithStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVolumeResult) []string { return v.WithStatuses }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
