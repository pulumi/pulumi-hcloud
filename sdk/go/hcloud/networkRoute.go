// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Hetzner Cloud Network Route to represent a Network route in the Hetzner Cloud.
//
// ## Import
//
// Network Route entries can be imported using a compound ID with the following format`<network-id>-<destination>`
//
// ```sh
//
//	$ pulumi import hcloud:index/networkRoute:NetworkRoute myroute 123-10.0.0.0/16
//
// ```
type NetworkRoute struct {
	pulumi.CustomResourceState

	// Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// ID of the Network the route should be added to.
	NetworkId pulumi.IntOutput `pulumi:"networkId"`
}

// NewNetworkRoute registers a new resource with the given unique name, arguments, and options.
func NewNetworkRoute(ctx *pulumi.Context,
	name string, args *NetworkRouteArgs, opts ...pulumi.ResourceOption) (*NetworkRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Gateway == nil {
		return nil, errors.New("invalid value for required argument 'Gateway'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkRoute
	err := ctx.RegisterResource("hcloud:index/networkRoute:NetworkRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkRoute gets an existing NetworkRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkRouteState, opts ...pulumi.ResourceOption) (*NetworkRoute, error) {
	var resource NetworkRoute
	err := ctx.ReadResource("hcloud:index/networkRoute:NetworkRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkRoute resources.
type networkRouteState struct {
	// Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
	Destination *string `pulumi:"destination"`
	// Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
	Gateway *string `pulumi:"gateway"`
	// ID of the Network the route should be added to.
	NetworkId *int `pulumi:"networkId"`
}

type NetworkRouteState struct {
	// Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
	Destination pulumi.StringPtrInput
	// Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
	Gateway pulumi.StringPtrInput
	// ID of the Network the route should be added to.
	NetworkId pulumi.IntPtrInput
}

func (NetworkRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkRouteState)(nil)).Elem()
}

type networkRouteArgs struct {
	// Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
	Destination string `pulumi:"destination"`
	// Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
	Gateway string `pulumi:"gateway"`
	// ID of the Network the route should be added to.
	NetworkId int `pulumi:"networkId"`
}

// The set of arguments for constructing a NetworkRoute resource.
type NetworkRouteArgs struct {
	// Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
	Destination pulumi.StringInput
	// Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
	Gateway pulumi.StringInput
	// ID of the Network the route should be added to.
	NetworkId pulumi.IntInput
}

func (NetworkRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkRouteArgs)(nil)).Elem()
}

type NetworkRouteInput interface {
	pulumi.Input

	ToNetworkRouteOutput() NetworkRouteOutput
	ToNetworkRouteOutputWithContext(ctx context.Context) NetworkRouteOutput
}

func (*NetworkRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRoute)(nil)).Elem()
}

func (i *NetworkRoute) ToNetworkRouteOutput() NetworkRouteOutput {
	return i.ToNetworkRouteOutputWithContext(context.Background())
}

func (i *NetworkRoute) ToNetworkRouteOutputWithContext(ctx context.Context) NetworkRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouteOutput)
}

func (i *NetworkRoute) ToOutput(ctx context.Context) pulumix.Output[*NetworkRoute] {
	return pulumix.Output[*NetworkRoute]{
		OutputState: i.ToNetworkRouteOutputWithContext(ctx).OutputState,
	}
}

// NetworkRouteArrayInput is an input type that accepts NetworkRouteArray and NetworkRouteArrayOutput values.
// You can construct a concrete instance of `NetworkRouteArrayInput` via:
//
//	NetworkRouteArray{ NetworkRouteArgs{...} }
type NetworkRouteArrayInput interface {
	pulumi.Input

	ToNetworkRouteArrayOutput() NetworkRouteArrayOutput
	ToNetworkRouteArrayOutputWithContext(context.Context) NetworkRouteArrayOutput
}

type NetworkRouteArray []NetworkRouteInput

func (NetworkRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkRoute)(nil)).Elem()
}

func (i NetworkRouteArray) ToNetworkRouteArrayOutput() NetworkRouteArrayOutput {
	return i.ToNetworkRouteArrayOutputWithContext(context.Background())
}

func (i NetworkRouteArray) ToNetworkRouteArrayOutputWithContext(ctx context.Context) NetworkRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouteArrayOutput)
}

func (i NetworkRouteArray) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkRoute] {
	return pulumix.Output[[]*NetworkRoute]{
		OutputState: i.ToNetworkRouteArrayOutputWithContext(ctx).OutputState,
	}
}

// NetworkRouteMapInput is an input type that accepts NetworkRouteMap and NetworkRouteMapOutput values.
// You can construct a concrete instance of `NetworkRouteMapInput` via:
//
//	NetworkRouteMap{ "key": NetworkRouteArgs{...} }
type NetworkRouteMapInput interface {
	pulumi.Input

	ToNetworkRouteMapOutput() NetworkRouteMapOutput
	ToNetworkRouteMapOutputWithContext(context.Context) NetworkRouteMapOutput
}

type NetworkRouteMap map[string]NetworkRouteInput

func (NetworkRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkRoute)(nil)).Elem()
}

func (i NetworkRouteMap) ToNetworkRouteMapOutput() NetworkRouteMapOutput {
	return i.ToNetworkRouteMapOutputWithContext(context.Background())
}

func (i NetworkRouteMap) ToNetworkRouteMapOutputWithContext(ctx context.Context) NetworkRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkRouteMapOutput)
}

func (i NetworkRouteMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkRoute] {
	return pulumix.Output[map[string]*NetworkRoute]{
		OutputState: i.ToNetworkRouteMapOutputWithContext(ctx).OutputState,
	}
}

type NetworkRouteOutput struct{ *pulumi.OutputState }

func (NetworkRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkRoute)(nil)).Elem()
}

func (o NetworkRouteOutput) ToNetworkRouteOutput() NetworkRouteOutput {
	return o
}

func (o NetworkRouteOutput) ToNetworkRouteOutputWithContext(ctx context.Context) NetworkRouteOutput {
	return o
}

func (o NetworkRouteOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkRoute] {
	return pulumix.Output[*NetworkRoute]{
		OutputState: o.OutputState,
	}
}

// Destination network or host of this route. Must be a subnet of the ipRange of the Network. Must not overlap with an existing ipRange in any subnets or with any destinations in other routes or with the first ip of the networks ipRange or with 172.31.1.1.
func (o NetworkRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRoute) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Gateway for the route. Cannot be the first ip of the networks ipRange and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of servers.
func (o NetworkRouteOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkRoute) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// ID of the Network the route should be added to.
func (o NetworkRouteOutput) NetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkRoute) pulumi.IntOutput { return v.NetworkId }).(pulumi.IntOutput)
}

type NetworkRouteArrayOutput struct{ *pulumi.OutputState }

func (NetworkRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkRoute)(nil)).Elem()
}

func (o NetworkRouteArrayOutput) ToNetworkRouteArrayOutput() NetworkRouteArrayOutput {
	return o
}

func (o NetworkRouteArrayOutput) ToNetworkRouteArrayOutputWithContext(ctx context.Context) NetworkRouteArrayOutput {
	return o
}

func (o NetworkRouteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NetworkRoute] {
	return pulumix.Output[[]*NetworkRoute]{
		OutputState: o.OutputState,
	}
}

func (o NetworkRouteArrayOutput) Index(i pulumi.IntInput) NetworkRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkRoute {
		return vs[0].([]*NetworkRoute)[vs[1].(int)]
	}).(NetworkRouteOutput)
}

type NetworkRouteMapOutput struct{ *pulumi.OutputState }

func (NetworkRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkRoute)(nil)).Elem()
}

func (o NetworkRouteMapOutput) ToNetworkRouteMapOutput() NetworkRouteMapOutput {
	return o
}

func (o NetworkRouteMapOutput) ToNetworkRouteMapOutputWithContext(ctx context.Context) NetworkRouteMapOutput {
	return o
}

func (o NetworkRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetworkRoute] {
	return pulumix.Output[map[string]*NetworkRoute]{
		OutputState: o.OutputState,
	}
}

func (o NetworkRouteMapOutput) MapIndex(k pulumi.StringInput) NetworkRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkRoute {
		return vs[0].(map[string]*NetworkRoute)[vs[1].(string)]
	}).(NetworkRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouteInput)(nil)).Elem(), &NetworkRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouteArrayInput)(nil)).Elem(), NetworkRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkRouteMapInput)(nil)).Elem(), NetworkRouteMap{})
	pulumi.RegisterOutputType(NetworkRouteOutput{})
	pulumi.RegisterOutputType(NetworkRouteArrayOutput{})
	pulumi.RegisterOutputType(NetworkRouteMapOutput{})
}
