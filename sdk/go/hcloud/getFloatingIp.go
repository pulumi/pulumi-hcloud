// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a Hetzner Cloud Floating IP.
//
// This resource can be useful when you need to determine a Floating IP ID based on the IP address.
//
// ## Example Usage
//
// # Data Source: FloatingIp
// Provides details about a Hetzner Cloud Floating IP.
// This resource can be useful when you need to determine a Floating IP ID based on the IP address.
// ### Additional Examples
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		ip1, err := hcloud.LookupFloatingIp(ctx, &GetFloatingIpArgs{
// 			IpAddress: pulumi.StringRef("1.2.3.4"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hcloud.LookupFloatingIp(ctx, &GetFloatingIpArgs{
// 			WithSelector: pulumi.StringRef("key=value"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		var main []*hcloud.FloatingIpAssignment
// 		for key0, _ := range _var.Counter {
// 			__res, err := hcloud.NewFloatingIpAssignment(ctx, fmt.Sprintf("main-%v", key0), &hcloud.FloatingIpAssignmentArgs{
// 				FloatingIpId: pulumi.Int(ip1.Id),
// 				ServerId:     pulumi.Any(hcloud_server.Main.Id),
// 			})
// 			if err != nil {
// 				return err
// 			}
// 			main = append(main, __res)
// 		}
// 		return nil
// 	})
// }
// ```
func LookupFloatingIp(ctx *pulumi.Context, args *LookupFloatingIpArgs, opts ...pulumi.InvokeOption) (*LookupFloatingIpResult, error) {
	var rv LookupFloatingIpResult
	err := ctx.Invoke("hcloud:index/getFloatingIp:getFloatingIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFloatingIp.
type LookupFloatingIpArgs struct {
	// ID of the Floating IP.
	Id *int `pulumi:"id"`
	// IP address of the Floating IP.
	IpAddress *string `pulumi:"ipAddress"`
	// Name of the Floating IP.
	Name *string `pulumi:"name"`
	// Deprecated: Please use the with_selector property instead.
	Selector *string `pulumi:"selector"`
	// [Label selector](https://docs.hetzner.cloud/#overview-label-selector)
	WithSelector *string `pulumi:"withSelector"`
}

// A collection of values returned by getFloatingIp.
type LookupFloatingIpResult struct {
	// (boolean) Whether delete protection is enabled.
	DeleteProtection bool `pulumi:"deleteProtection"`
	// (string) Description of the Floating IP.
	Description string `pulumi:"description"`
	// (string) Home location.
	HomeLocation string `pulumi:"homeLocation"`
	// (int) Unique ID of the Floating IP.
	Id int `pulumi:"id"`
	// (string) IP Address of the Floating IP.
	IpAddress string `pulumi:"ipAddress"`
	// (string) IPv6 subnet. (Only set if `type` is `ipv6`)
	IpNetwork string `pulumi:"ipNetwork"`
	// (map) User-defined labels (key-value pairs).
	Labels map[string]interface{} `pulumi:"labels"`
	// (string) Name of the Floating IP.
	Name *string `pulumi:"name"`
	// Deprecated: Please use the with_selector property instead.
	Selector *string `pulumi:"selector"`
	// (int) Server to assign the Floating IP is assigned to.
	ServerId int `pulumi:"serverId"`
	// (string) Type of the Floating IP.
	Type         string  `pulumi:"type"`
	WithSelector *string `pulumi:"withSelector"`
}

func LookupFloatingIpOutput(ctx *pulumi.Context, args LookupFloatingIpOutputArgs, opts ...pulumi.InvokeOption) LookupFloatingIpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFloatingIpResult, error) {
			args := v.(LookupFloatingIpArgs)
			r, err := LookupFloatingIp(ctx, &args, opts...)
			return *r, err
		}).(LookupFloatingIpResultOutput)
}

// A collection of arguments for invoking getFloatingIp.
type LookupFloatingIpOutputArgs struct {
	// ID of the Floating IP.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// IP address of the Floating IP.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Name of the Floating IP.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Deprecated: Please use the with_selector property instead.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// [Label selector](https://docs.hetzner.cloud/#overview-label-selector)
	WithSelector pulumi.StringPtrInput `pulumi:"withSelector"`
}

func (LookupFloatingIpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFloatingIpArgs)(nil)).Elem()
}

// A collection of values returned by getFloatingIp.
type LookupFloatingIpResultOutput struct{ *pulumi.OutputState }

func (LookupFloatingIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFloatingIpResult)(nil)).Elem()
}

func (o LookupFloatingIpResultOutput) ToLookupFloatingIpResultOutput() LookupFloatingIpResultOutput {
	return o
}

func (o LookupFloatingIpResultOutput) ToLookupFloatingIpResultOutputWithContext(ctx context.Context) LookupFloatingIpResultOutput {
	return o
}

// (boolean) Whether delete protection is enabled.
func (o LookupFloatingIpResultOutput) DeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) bool { return v.DeleteProtection }).(pulumi.BoolOutput)
}

// (string) Description of the Floating IP.
func (o LookupFloatingIpResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) string { return v.Description }).(pulumi.StringOutput)
}

// (string) Home location.
func (o LookupFloatingIpResultOutput) HomeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) string { return v.HomeLocation }).(pulumi.StringOutput)
}

// (int) Unique ID of the Floating IP.
func (o LookupFloatingIpResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) int { return v.Id }).(pulumi.IntOutput)
}

// (string) IP Address of the Floating IP.
func (o LookupFloatingIpResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

// (string) IPv6 subnet. (Only set if `type` is `ipv6`)
func (o LookupFloatingIpResultOutput) IpNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) string { return v.IpNetwork }).(pulumi.StringOutput)
}

// (map) User-defined labels (key-value pairs).
func (o LookupFloatingIpResultOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

// (string) Name of the Floating IP.
func (o LookupFloatingIpResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Deprecated: Please use the with_selector property instead.
func (o LookupFloatingIpResultOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// (int) Server to assign the Floating IP is assigned to.
func (o LookupFloatingIpResultOutput) ServerId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) int { return v.ServerId }).(pulumi.IntOutput)
}

// (string) Type of the Floating IP.
func (o LookupFloatingIpResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupFloatingIpResultOutput) WithSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFloatingIpResult) *string { return v.WithSelector }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFloatingIpResultOutput{})
}
