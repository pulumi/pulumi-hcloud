// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a specific Hetzner Cloud Location.
// Use this resource to get detailed information about specific location.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := hcloud.GetLocation(ctx, &GetLocationArgs{
// 			Name: pulumi.StringRef("fsn1"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hcloud.GetLocation(ctx, &GetLocationArgs{
// 			Id: pulumi.IntRef(1),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetLocation(ctx *pulumi.Context, args *GetLocationArgs, opts ...pulumi.InvokeOption) (*GetLocationResult, error) {
	var rv GetLocationResult
	err := ctx.Invoke("hcloud:index/getLocation:getLocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLocation.
type GetLocationArgs struct {
	// ID of the location.
	Id *int `pulumi:"id"`
	// Name of the location.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getLocation.
type GetLocationResult struct {
	// (string) City of the location.
	City string `pulumi:"city"`
	// (string) Country of the location.
	Country string `pulumi:"country"`
	// (string) Description of the location.
	Description string `pulumi:"description"`
	// (int) Unique ID of the location.
	Id int `pulumi:"id"`
	// (float) Latitude of the city.
	Latitude float64 `pulumi:"latitude"`
	// (float) Longitude of the city.
	Longitude float64 `pulumi:"longitude"`
	// (string) Name of the location.
	Name string `pulumi:"name"`
	// (string) Network Zone of the location.
	NetworkZone string `pulumi:"networkZone"`
}

func GetLocationOutput(ctx *pulumi.Context, args GetLocationOutputArgs, opts ...pulumi.InvokeOption) GetLocationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLocationResult, error) {
			args := v.(GetLocationArgs)
			r, err := GetLocation(ctx, &args, opts...)
			return *r, err
		}).(GetLocationResultOutput)
}

// A collection of arguments for invoking getLocation.
type GetLocationOutputArgs struct {
	// ID of the location.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Name of the location.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetLocationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationArgs)(nil)).Elem()
}

// A collection of values returned by getLocation.
type GetLocationResultOutput struct{ *pulumi.OutputState }

func (GetLocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationResult)(nil)).Elem()
}

func (o GetLocationResultOutput) ToGetLocationResultOutput() GetLocationResultOutput {
	return o
}

func (o GetLocationResultOutput) ToGetLocationResultOutputWithContext(ctx context.Context) GetLocationResultOutput {
	return o
}

// (string) City of the location.
func (o GetLocationResultOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationResult) string { return v.City }).(pulumi.StringOutput)
}

// (string) Country of the location.
func (o GetLocationResultOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationResult) string { return v.Country }).(pulumi.StringOutput)
}

// (string) Description of the location.
func (o GetLocationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationResult) string { return v.Description }).(pulumi.StringOutput)
}

// (int) Unique ID of the location.
func (o GetLocationResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetLocationResult) int { return v.Id }).(pulumi.IntOutput)
}

// (float) Latitude of the city.
func (o GetLocationResultOutput) Latitude() pulumi.Float64Output {
	return o.ApplyT(func(v GetLocationResult) float64 { return v.Latitude }).(pulumi.Float64Output)
}

// (float) Longitude of the city.
func (o GetLocationResultOutput) Longitude() pulumi.Float64Output {
	return o.ApplyT(func(v GetLocationResult) float64 { return v.Longitude }).(pulumi.Float64Output)
}

// (string) Name of the location.
func (o GetLocationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationResult) string { return v.Name }).(pulumi.StringOutput)
}

// (string) Network Zone of the location.
func (o GetLocationResultOutput) NetworkZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationResult) string { return v.NetworkZone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLocationResultOutput{})
}
