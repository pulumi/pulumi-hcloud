// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Hetzner Cloud Network Subnet to represent a Subnet in the Hetzner Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		mynet, err := hcloud.NewNetwork(ctx, "mynet", &hcloud.NetworkArgs{
// 			IpRange: pulumi.String("10.0.0.0/8"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = hcloud.NewNetworkSubnet(ctx, "foonet", &hcloud.NetworkSubnetArgs{
// 			NetworkId:   mynet.ID(),
// 			Type:        pulumi.String("cloud"),
// 			NetworkZone: pulumi.String("eu-central"),
// 			IpRange:     pulumi.String("10.0.1.0/24"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Network Subnet entries can be imported using a compound ID with the following format`<network-id>-<ip_range>`
//
// ```sh
//  $ pulumi import hcloud:index/networkSubnet:NetworkSubnet mysubnet 123-10.0.0.0/24
// ```
type NetworkSubnet struct {
	pulumi.CustomResourceState

	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Range to allocate IPs from. Must be a subnet of the ipRange of the Network and must not overlap with any other subnets or with any destinations in routes.
	IpRange pulumi.StringOutput `pulumi:"ipRange"`
	// ID of the Network the subnet should be added to.
	NetworkId pulumi.IntOutput `pulumi:"networkId"`
	// Name of network zone.
	NetworkZone pulumi.StringOutput `pulumi:"networkZone"`
	// Type of subnet. `server`, `cloud` or `vswitch`
	Type pulumi.StringOutput `pulumi:"type"`
	// ID of the vswitch, Required if type is `vswitch`
	VswitchId pulumi.IntPtrOutput `pulumi:"vswitchId"`
}

// NewNetworkSubnet registers a new resource with the given unique name, arguments, and options.
func NewNetworkSubnet(ctx *pulumi.Context,
	name string, args *NetworkSubnetArgs, opts ...pulumi.ResourceOption) (*NetworkSubnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpRange == nil {
		return nil, errors.New("invalid value for required argument 'IpRange'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.NetworkZone == nil {
		return nil, errors.New("invalid value for required argument 'NetworkZone'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource NetworkSubnet
	err := ctx.RegisterResource("hcloud:index/networkSubnet:NetworkSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSubnet gets an existing NetworkSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSubnetState, opts ...pulumi.ResourceOption) (*NetworkSubnet, error) {
	var resource NetworkSubnet
	err := ctx.ReadResource("hcloud:index/networkSubnet:NetworkSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSubnet resources.
type networkSubnetState struct {
	Gateway *string `pulumi:"gateway"`
	// Range to allocate IPs from. Must be a subnet of the ipRange of the Network and must not overlap with any other subnets or with any destinations in routes.
	IpRange *string `pulumi:"ipRange"`
	// ID of the Network the subnet should be added to.
	NetworkId *int `pulumi:"networkId"`
	// Name of network zone.
	NetworkZone *string `pulumi:"networkZone"`
	// Type of subnet. `server`, `cloud` or `vswitch`
	Type *string `pulumi:"type"`
	// ID of the vswitch, Required if type is `vswitch`
	VswitchId *int `pulumi:"vswitchId"`
}

type NetworkSubnetState struct {
	Gateway pulumi.StringPtrInput
	// Range to allocate IPs from. Must be a subnet of the ipRange of the Network and must not overlap with any other subnets or with any destinations in routes.
	IpRange pulumi.StringPtrInput
	// ID of the Network the subnet should be added to.
	NetworkId pulumi.IntPtrInput
	// Name of network zone.
	NetworkZone pulumi.StringPtrInput
	// Type of subnet. `server`, `cloud` or `vswitch`
	Type pulumi.StringPtrInput
	// ID of the vswitch, Required if type is `vswitch`
	VswitchId pulumi.IntPtrInput
}

func (NetworkSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSubnetState)(nil)).Elem()
}

type networkSubnetArgs struct {
	// Range to allocate IPs from. Must be a subnet of the ipRange of the Network and must not overlap with any other subnets or with any destinations in routes.
	IpRange string `pulumi:"ipRange"`
	// ID of the Network the subnet should be added to.
	NetworkId int `pulumi:"networkId"`
	// Name of network zone.
	NetworkZone string `pulumi:"networkZone"`
	// Type of subnet. `server`, `cloud` or `vswitch`
	Type string `pulumi:"type"`
	// ID of the vswitch, Required if type is `vswitch`
	VswitchId *int `pulumi:"vswitchId"`
}

// The set of arguments for constructing a NetworkSubnet resource.
type NetworkSubnetArgs struct {
	// Range to allocate IPs from. Must be a subnet of the ipRange of the Network and must not overlap with any other subnets or with any destinations in routes.
	IpRange pulumi.StringInput
	// ID of the Network the subnet should be added to.
	NetworkId pulumi.IntInput
	// Name of network zone.
	NetworkZone pulumi.StringInput
	// Type of subnet. `server`, `cloud` or `vswitch`
	Type pulumi.StringInput
	// ID of the vswitch, Required if type is `vswitch`
	VswitchId pulumi.IntPtrInput
}

func (NetworkSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSubnetArgs)(nil)).Elem()
}

type NetworkSubnetInput interface {
	pulumi.Input

	ToNetworkSubnetOutput() NetworkSubnetOutput
	ToNetworkSubnetOutputWithContext(ctx context.Context) NetworkSubnetOutput
}

func (*NetworkSubnet) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSubnet)(nil)).Elem()
}

func (i *NetworkSubnet) ToNetworkSubnetOutput() NetworkSubnetOutput {
	return i.ToNetworkSubnetOutputWithContext(context.Background())
}

func (i *NetworkSubnet) ToNetworkSubnetOutputWithContext(ctx context.Context) NetworkSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSubnetOutput)
}

// NetworkSubnetArrayInput is an input type that accepts NetworkSubnetArray and NetworkSubnetArrayOutput values.
// You can construct a concrete instance of `NetworkSubnetArrayInput` via:
//
//          NetworkSubnetArray{ NetworkSubnetArgs{...} }
type NetworkSubnetArrayInput interface {
	pulumi.Input

	ToNetworkSubnetArrayOutput() NetworkSubnetArrayOutput
	ToNetworkSubnetArrayOutputWithContext(context.Context) NetworkSubnetArrayOutput
}

type NetworkSubnetArray []NetworkSubnetInput

func (NetworkSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSubnet)(nil)).Elem()
}

func (i NetworkSubnetArray) ToNetworkSubnetArrayOutput() NetworkSubnetArrayOutput {
	return i.ToNetworkSubnetArrayOutputWithContext(context.Background())
}

func (i NetworkSubnetArray) ToNetworkSubnetArrayOutputWithContext(ctx context.Context) NetworkSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSubnetArrayOutput)
}

// NetworkSubnetMapInput is an input type that accepts NetworkSubnetMap and NetworkSubnetMapOutput values.
// You can construct a concrete instance of `NetworkSubnetMapInput` via:
//
//          NetworkSubnetMap{ "key": NetworkSubnetArgs{...} }
type NetworkSubnetMapInput interface {
	pulumi.Input

	ToNetworkSubnetMapOutput() NetworkSubnetMapOutput
	ToNetworkSubnetMapOutputWithContext(context.Context) NetworkSubnetMapOutput
}

type NetworkSubnetMap map[string]NetworkSubnetInput

func (NetworkSubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSubnet)(nil)).Elem()
}

func (i NetworkSubnetMap) ToNetworkSubnetMapOutput() NetworkSubnetMapOutput {
	return i.ToNetworkSubnetMapOutputWithContext(context.Background())
}

func (i NetworkSubnetMap) ToNetworkSubnetMapOutputWithContext(ctx context.Context) NetworkSubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSubnetMapOutput)
}

type NetworkSubnetOutput struct{ *pulumi.OutputState }

func (NetworkSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSubnet)(nil)).Elem()
}

func (o NetworkSubnetOutput) ToNetworkSubnetOutput() NetworkSubnetOutput {
	return o
}

func (o NetworkSubnetOutput) ToNetworkSubnetOutputWithContext(ctx context.Context) NetworkSubnetOutput {
	return o
}

func (o NetworkSubnetOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Range to allocate IPs from. Must be a subnet of the ipRange of the Network and must not overlap with any other subnets or with any destinations in routes.
func (o NetworkSubnetOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.IpRange }).(pulumi.StringOutput)
}

// ID of the Network the subnet should be added to.
func (o NetworkSubnetOutput) NetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.IntOutput { return v.NetworkId }).(pulumi.IntOutput)
}

// Name of network zone.
func (o NetworkSubnetOutput) NetworkZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.NetworkZone }).(pulumi.StringOutput)
}

// Type of subnet. `server`, `cloud` or `vswitch`
func (o NetworkSubnetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// ID of the vswitch, Required if type is `vswitch`
func (o NetworkSubnetOutput) VswitchId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.IntPtrOutput { return v.VswitchId }).(pulumi.IntPtrOutput)
}

type NetworkSubnetArrayOutput struct{ *pulumi.OutputState }

func (NetworkSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSubnet)(nil)).Elem()
}

func (o NetworkSubnetArrayOutput) ToNetworkSubnetArrayOutput() NetworkSubnetArrayOutput {
	return o
}

func (o NetworkSubnetArrayOutput) ToNetworkSubnetArrayOutputWithContext(ctx context.Context) NetworkSubnetArrayOutput {
	return o
}

func (o NetworkSubnetArrayOutput) Index(i pulumi.IntInput) NetworkSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSubnet {
		return vs[0].([]*NetworkSubnet)[vs[1].(int)]
	}).(NetworkSubnetOutput)
}

type NetworkSubnetMapOutput struct{ *pulumi.OutputState }

func (NetworkSubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSubnet)(nil)).Elem()
}

func (o NetworkSubnetMapOutput) ToNetworkSubnetMapOutput() NetworkSubnetMapOutput {
	return o
}

func (o NetworkSubnetMapOutput) ToNetworkSubnetMapOutputWithContext(ctx context.Context) NetworkSubnetMapOutput {
	return o
}

func (o NetworkSubnetMapOutput) MapIndex(k pulumi.StringInput) NetworkSubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSubnet {
		return vs[0].(map[string]*NetworkSubnet)[vs[1].(string)]
	}).(NetworkSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSubnetInput)(nil)).Elem(), &NetworkSubnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSubnetArrayInput)(nil)).Elem(), NetworkSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSubnetMapInput)(nil)).Elem(), NetworkSubnetMap{})
	pulumi.RegisterOutputType(NetworkSubnetOutput{})
	pulumi.RegisterOutputType(NetworkSubnetArrayOutput{})
	pulumi.RegisterOutputType(NetworkSubnetMapOutput{})
}
