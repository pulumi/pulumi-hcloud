// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a specific Hetzner Cloud Datacenter.
//
// Use this resource to get detailed information about a specific Datacenter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := hcloud.GetDatacenter(ctx, &hcloud.GetDatacenterArgs{
//				Id: pulumi.IntRef(4),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = hcloud.GetDatacenter(ctx, &hcloud.GetDatacenterArgs{
//				Name: pulumi.StringRef("fsn1-dc14"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDatacenter(ctx *pulumi.Context, args *GetDatacenterArgs, opts ...pulumi.InvokeOption) (*GetDatacenterResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatacenterResult
	err := ctx.Invoke("hcloud:index/getDatacenter:getDatacenter", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatacenter.
type GetDatacenterArgs struct {
	// ID of the Datacenter.
	Id *int `pulumi:"id"`
	// Name of the Datacenter.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getDatacenter.
type GetDatacenterResult struct {
	// List of currently available Server Types in the Datacenter.
	AvailableServerTypeIds []int `pulumi:"availableServerTypeIds"`
	// Description of the Datacenter.
	Description string `pulumi:"description"`
	// ID of the Datacenter.
	Id *int `pulumi:"id"`
	// Location of the Datacenter. See the [Hetzner Docs](https://docs.hetzner.com/cloud/general/locations/#what-locations-are-there) for more details about locations.
	Location map[string]string `pulumi:"location"`
	// Name of the Datacenter.
	Name *string `pulumi:"name"`
	// List of supported Server Types in the Datacenter.
	SupportedServerTypeIds []int `pulumi:"supportedServerTypeIds"`
}

func GetDatacenterOutput(ctx *pulumi.Context, args GetDatacenterOutputArgs, opts ...pulumi.InvokeOption) GetDatacenterResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDatacenterResultOutput, error) {
			args := v.(GetDatacenterArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("hcloud:index/getDatacenter:getDatacenter", args, GetDatacenterResultOutput{}, options).(GetDatacenterResultOutput), nil
		}).(GetDatacenterResultOutput)
}

// A collection of arguments for invoking getDatacenter.
type GetDatacenterOutputArgs struct {
	// ID of the Datacenter.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Name of the Datacenter.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetDatacenterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatacenterArgs)(nil)).Elem()
}

// A collection of values returned by getDatacenter.
type GetDatacenterResultOutput struct{ *pulumi.OutputState }

func (GetDatacenterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatacenterResult)(nil)).Elem()
}

func (o GetDatacenterResultOutput) ToGetDatacenterResultOutput() GetDatacenterResultOutput {
	return o
}

func (o GetDatacenterResultOutput) ToGetDatacenterResultOutputWithContext(ctx context.Context) GetDatacenterResultOutput {
	return o
}

// List of currently available Server Types in the Datacenter.
func (o GetDatacenterResultOutput) AvailableServerTypeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDatacenterResult) []int { return v.AvailableServerTypeIds }).(pulumi.IntArrayOutput)
}

// Description of the Datacenter.
func (o GetDatacenterResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatacenterResult) string { return v.Description }).(pulumi.StringOutput)
}

// ID of the Datacenter.
func (o GetDatacenterResultOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDatacenterResult) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Location of the Datacenter. See the [Hetzner Docs](https://docs.hetzner.com/cloud/general/locations/#what-locations-are-there) for more details about locations.
func (o GetDatacenterResultOutput) Location() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDatacenterResult) map[string]string { return v.Location }).(pulumi.StringMapOutput)
}

// Name of the Datacenter.
func (o GetDatacenterResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatacenterResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of supported Server Types in the Datacenter.
func (o GetDatacenterResultOutput) SupportedServerTypeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDatacenterResult) []int { return v.SupportedServerTypeIds }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatacenterResultOutput{})
}
