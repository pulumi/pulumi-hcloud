// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "hcloud:index/certificate:Certificate":
		r, err = NewCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/firewall:Firewall":
		r, err = NewFirewall(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/floatingIp:FloatingIp":
		r, err = NewFloatingIp(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/floatingIpAssignment:FloatingIpAssignment":
		r, err = NewFloatingIpAssignment(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/loadBalancer:LoadBalancer":
		r, err = NewLoadBalancer(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/loadBalancerNetwork:LoadBalancerNetwork":
		r, err = NewLoadBalancerNetwork(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/loadBalancerService:LoadBalancerService":
		r, err = NewLoadBalancerService(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/loadBalancerTarget:LoadBalancerTarget":
		r, err = NewLoadBalancerTarget(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/managedCertificate:ManagedCertificate":
		r, err = NewManagedCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/network:Network":
		r, err = NewNetwork(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/networkRoute:NetworkRoute":
		r, err = NewNetworkRoute(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/networkSubnet:NetworkSubnet":
		r, err = NewNetworkSubnet(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/rdns:Rdns":
		r, err = NewRdns(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/server:Server":
		r, err = NewServer(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/serverNetwork:ServerNetwork":
		r, err = NewServerNetwork(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/snapshot:Snapshot":
		r, err = NewSnapshot(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/sshKey:SshKey":
		r, err = NewSshKey(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/uploadedCertificate:UploadedCertificate":
		r, err = NewUploadedCertificate(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/volume:Volume":
		r, err = NewVolume(ctx, name, nil, pulumi.URN_(urn))
	case "hcloud:index/volumeAttachment:VolumeAttachment":
		r, err = NewVolumeAttachment(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:hcloud" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/certificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/firewall",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/floatingIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/floatingIpAssignment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/loadBalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/loadBalancerNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/loadBalancerService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/loadBalancerTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/managedCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/network",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/networkRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/networkSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/rdns",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/server",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/serverNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/snapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/sshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/uploadedCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/volume",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/volumeAttachment",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"hcloud",
		&pkg{version},
	)
}
