// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "hcloud:index/certificate:Certificate":
		r = &Certificate{}
	case "hcloud:index/firewall:Firewall":
		r = &Firewall{}
	case "hcloud:index/firewallAttachment:FirewallAttachment":
		r = &FirewallAttachment{}
	case "hcloud:index/floatingIp:FloatingIp":
		r = &FloatingIp{}
	case "hcloud:index/floatingIpAssignment:FloatingIpAssignment":
		r = &FloatingIpAssignment{}
	case "hcloud:index/loadBalancer:LoadBalancer":
		r = &LoadBalancer{}
	case "hcloud:index/loadBalancerNetwork:LoadBalancerNetwork":
		r = &LoadBalancerNetwork{}
	case "hcloud:index/loadBalancerService:LoadBalancerService":
		r = &LoadBalancerService{}
	case "hcloud:index/loadBalancerTarget:LoadBalancerTarget":
		r = &LoadBalancerTarget{}
	case "hcloud:index/managedCertificate:ManagedCertificate":
		r = &ManagedCertificate{}
	case "hcloud:index/network:Network":
		r = &Network{}
	case "hcloud:index/networkRoute:NetworkRoute":
		r = &NetworkRoute{}
	case "hcloud:index/networkSubnet:NetworkSubnet":
		r = &NetworkSubnet{}
	case "hcloud:index/placementGroup:PlacementGroup":
		r = &PlacementGroup{}
	case "hcloud:index/rdns:Rdns":
		r = &Rdns{}
	case "hcloud:index/server:Server":
		r = &Server{}
	case "hcloud:index/serverNetwork:ServerNetwork":
		r = &ServerNetwork{}
	case "hcloud:index/snapshot:Snapshot":
		r = &Snapshot{}
	case "hcloud:index/sshKey:SshKey":
		r = &SshKey{}
	case "hcloud:index/uploadedCertificate:UploadedCertificate":
		r = &UploadedCertificate{}
	case "hcloud:index/volume:Volume":
		r = &Volume{}
	case "hcloud:index/volumeAttachment:VolumeAttachment":
		r = &VolumeAttachment{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:hcloud" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/certificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/firewall",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/firewallAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/floatingIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/floatingIpAssignment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/loadBalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/loadBalancerNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/loadBalancerService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/loadBalancerTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/managedCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/network",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/networkRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/networkSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/placementGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/rdns",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/server",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/serverNetwork",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/snapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/sshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/uploadedCertificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/volume",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"hcloud",
		"index/volumeAttachment",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"hcloud",
		&pkg{version},
	)
}
