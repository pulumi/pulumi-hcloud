// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides details about a specific Hetzner Cloud Load Balancer Type.
// Use this resource to get detailed information about specific Load Balancer Type.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-hcloud/sdk/go/hcloud"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := hcloud.GetLoadBalancerType(ctx, &hcloud.GetLoadBalancerTypeArgs{
//				Name: pulumi.StringRef("cx22"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = hcloud.GetLoadBalancerType(ctx, &hcloud.GetLoadBalancerTypeArgs{
//				Id: pulumi.IntRef(1),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = hcloud.NewLoadBalancer(ctx, "load_balancer", &hcloud.LoadBalancerArgs{
//				Name:             pulumi.String("my-load-balancer"),
//				LoadBalancerType: pulumi.Any(name),
//				Location:         pulumi.String("nbg1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetLoadBalancerType(ctx *pulumi.Context, args *GetLoadBalancerTypeArgs, opts ...pulumi.InvokeOption) (*GetLoadBalancerTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLoadBalancerTypeResult
	err := ctx.Invoke("hcloud:index/getLoadBalancerType:getLoadBalancerType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancerType.
type GetLoadBalancerTypeArgs struct {
	// ID of the load_balancer_type.
	Id *int `pulumi:"id"`
	// Name of the load_balancer_type.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getLoadBalancerType.
type GetLoadBalancerTypeResult struct {
	// (string) Description of the load_balancer_type.
	Description string `pulumi:"description"`
	// (int) Unique ID of the load_balancer_type.
	Id int `pulumi:"id"`
	// (int) Maximum number of SSL Certificates that can be assigned to the Load Balancer of this type.
	MaxAssignedCertificates int `pulumi:"maxAssignedCertificates"`
	// (int) Maximum number of simultaneous open connections for the Load Balancer of this type.
	MaxConnections int `pulumi:"maxConnections"`
	// (int) Maximum number of services for the Load Balancer of this type.
	MaxServices int `pulumi:"maxServices"`
	// (int) Maximum number of targets for the Load Balancer of this type.
	MaxTargets int `pulumi:"maxTargets"`
	// (string) Name of the load_balancer_type.
	Name string `pulumi:"name"`
}

func GetLoadBalancerTypeOutput(ctx *pulumi.Context, args GetLoadBalancerTypeOutputArgs, opts ...pulumi.InvokeOption) GetLoadBalancerTypeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetLoadBalancerTypeResultOutput, error) {
			args := v.(GetLoadBalancerTypeArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetLoadBalancerTypeResult
			secret, err := ctx.InvokePackageRaw("hcloud:index/getLoadBalancerType:getLoadBalancerType", args, &rv, "", opts...)
			if err != nil {
				return GetLoadBalancerTypeResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetLoadBalancerTypeResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetLoadBalancerTypeResultOutput), nil
			}
			return output, nil
		}).(GetLoadBalancerTypeResultOutput)
}

// A collection of arguments for invoking getLoadBalancerType.
type GetLoadBalancerTypeOutputArgs struct {
	// ID of the load_balancer_type.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Name of the load_balancer_type.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetLoadBalancerTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerTypeArgs)(nil)).Elem()
}

// A collection of values returned by getLoadBalancerType.
type GetLoadBalancerTypeResultOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerTypeResult)(nil)).Elem()
}

func (o GetLoadBalancerTypeResultOutput) ToGetLoadBalancerTypeResultOutput() GetLoadBalancerTypeResultOutput {
	return o
}

func (o GetLoadBalancerTypeResultOutput) ToGetLoadBalancerTypeResultOutputWithContext(ctx context.Context) GetLoadBalancerTypeResultOutput {
	return o
}

// (string) Description of the load_balancer_type.
func (o GetLoadBalancerTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

// (int) Unique ID of the load_balancer_type.
func (o GetLoadBalancerTypeResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerTypeResult) int { return v.Id }).(pulumi.IntOutput)
}

// (int) Maximum number of SSL Certificates that can be assigned to the Load Balancer of this type.
func (o GetLoadBalancerTypeResultOutput) MaxAssignedCertificates() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerTypeResult) int { return v.MaxAssignedCertificates }).(pulumi.IntOutput)
}

// (int) Maximum number of simultaneous open connections for the Load Balancer of this type.
func (o GetLoadBalancerTypeResultOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerTypeResult) int { return v.MaxConnections }).(pulumi.IntOutput)
}

// (int) Maximum number of services for the Load Balancer of this type.
func (o GetLoadBalancerTypeResultOutput) MaxServices() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerTypeResult) int { return v.MaxServices }).(pulumi.IntOutput)
}

// (int) Maximum number of targets for the Load Balancer of this type.
func (o GetLoadBalancerTypeResultOutput) MaxTargets() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerTypeResult) int { return v.MaxTargets }).(pulumi.IntOutput)
}

// (string) Name of the load_balancer_type.
func (o GetLoadBalancerTypeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerTypeResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLoadBalancerTypeResultOutput{})
}
