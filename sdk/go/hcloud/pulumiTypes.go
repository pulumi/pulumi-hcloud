// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FirewallApplyTo struct {
	// Label Selector to select servers the firewall should be applied to (only one
	// of `server` and `labelSelector`can be applied in one block)
	LabelSelector *string `pulumi:"labelSelector"`
	// ID of the server you want to apply the firewall to (only one of `server`
	// and `labelSelector`can be applied in one block)
	Server *int `pulumi:"server"`
}

// FirewallApplyToInput is an input type that accepts FirewallApplyToArgs and FirewallApplyToOutput values.
// You can construct a concrete instance of `FirewallApplyToInput` via:
//
//          FirewallApplyToArgs{...}
type FirewallApplyToInput interface {
	pulumi.Input

	ToFirewallApplyToOutput() FirewallApplyToOutput
	ToFirewallApplyToOutputWithContext(context.Context) FirewallApplyToOutput
}

type FirewallApplyToArgs struct {
	// Label Selector to select servers the firewall should be applied to (only one
	// of `server` and `labelSelector`can be applied in one block)
	LabelSelector pulumi.StringPtrInput `pulumi:"labelSelector"`
	// ID of the server you want to apply the firewall to (only one of `server`
	// and `labelSelector`can be applied in one block)
	Server pulumi.IntPtrInput `pulumi:"server"`
}

func (FirewallApplyToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallApplyTo)(nil)).Elem()
}

func (i FirewallApplyToArgs) ToFirewallApplyToOutput() FirewallApplyToOutput {
	return i.ToFirewallApplyToOutputWithContext(context.Background())
}

func (i FirewallApplyToArgs) ToFirewallApplyToOutputWithContext(ctx context.Context) FirewallApplyToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallApplyToOutput)
}

// FirewallApplyToArrayInput is an input type that accepts FirewallApplyToArray and FirewallApplyToArrayOutput values.
// You can construct a concrete instance of `FirewallApplyToArrayInput` via:
//
//          FirewallApplyToArray{ FirewallApplyToArgs{...} }
type FirewallApplyToArrayInput interface {
	pulumi.Input

	ToFirewallApplyToArrayOutput() FirewallApplyToArrayOutput
	ToFirewallApplyToArrayOutputWithContext(context.Context) FirewallApplyToArrayOutput
}

type FirewallApplyToArray []FirewallApplyToInput

func (FirewallApplyToArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallApplyTo)(nil)).Elem()
}

func (i FirewallApplyToArray) ToFirewallApplyToArrayOutput() FirewallApplyToArrayOutput {
	return i.ToFirewallApplyToArrayOutputWithContext(context.Background())
}

func (i FirewallApplyToArray) ToFirewallApplyToArrayOutputWithContext(ctx context.Context) FirewallApplyToArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallApplyToArrayOutput)
}

type FirewallApplyToOutput struct{ *pulumi.OutputState }

func (FirewallApplyToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallApplyTo)(nil)).Elem()
}

func (o FirewallApplyToOutput) ToFirewallApplyToOutput() FirewallApplyToOutput {
	return o
}

func (o FirewallApplyToOutput) ToFirewallApplyToOutputWithContext(ctx context.Context) FirewallApplyToOutput {
	return o
}

// Label Selector to select servers the firewall should be applied to (only one
// of `server` and `labelSelector`can be applied in one block)
func (o FirewallApplyToOutput) LabelSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallApplyTo) *string { return v.LabelSelector }).(pulumi.StringPtrOutput)
}

// ID of the server you want to apply the firewall to (only one of `server`
// and `labelSelector`can be applied in one block)
func (o FirewallApplyToOutput) Server() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FirewallApplyTo) *int { return v.Server }).(pulumi.IntPtrOutput)
}

type FirewallApplyToArrayOutput struct{ *pulumi.OutputState }

func (FirewallApplyToArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallApplyTo)(nil)).Elem()
}

func (o FirewallApplyToArrayOutput) ToFirewallApplyToArrayOutput() FirewallApplyToArrayOutput {
	return o
}

func (o FirewallApplyToArrayOutput) ToFirewallApplyToArrayOutputWithContext(ctx context.Context) FirewallApplyToArrayOutput {
	return o
}

func (o FirewallApplyToArrayOutput) Index(i pulumi.IntInput) FirewallApplyToOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallApplyTo {
		return vs[0].([]FirewallApplyTo)[vs[1].(int)]
	}).(FirewallApplyToOutput)
}

type FirewallRule struct {
	// Description of the firewall rule
	Description *string `pulumi:"description"`
	// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction`
	// is `out`)
	DestinationIps []string `pulumi:"destinationIps"`
	// Direction of the Firewall Rule. `in`
	Direction string `pulumi:"direction"`
	// Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`
	// to allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and
	// 85.
	Port *string `pulumi:"port"`
	// Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
	Protocol string `pulumi:"protocol"`
	// List of CIDRs that are allowed within this Firewall Rule
	SourceIps []string `pulumi:"sourceIps"`
}

// FirewallRuleInput is an input type that accepts FirewallRuleArgs and FirewallRuleOutput values.
// You can construct a concrete instance of `FirewallRuleInput` via:
//
//          FirewallRuleArgs{...}
type FirewallRuleInput interface {
	pulumi.Input

	ToFirewallRuleOutput() FirewallRuleOutput
	ToFirewallRuleOutputWithContext(context.Context) FirewallRuleOutput
}

type FirewallRuleArgs struct {
	// Description of the firewall rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction`
	// is `out`)
	DestinationIps pulumi.StringArrayInput `pulumi:"destinationIps"`
	// Direction of the Firewall Rule. `in`
	Direction pulumi.StringInput `pulumi:"direction"`
	// Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`
	// to allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and
	// 85.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// List of CIDRs that are allowed within this Firewall Rule
	SourceIps pulumi.StringArrayInput `pulumi:"sourceIps"`
}

func (FirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRule)(nil)).Elem()
}

func (i FirewallRuleArgs) ToFirewallRuleOutput() FirewallRuleOutput {
	return i.ToFirewallRuleOutputWithContext(context.Background())
}

func (i FirewallRuleArgs) ToFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleOutput)
}

// FirewallRuleArrayInput is an input type that accepts FirewallRuleArray and FirewallRuleArrayOutput values.
// You can construct a concrete instance of `FirewallRuleArrayInput` via:
//
//          FirewallRuleArray{ FirewallRuleArgs{...} }
type FirewallRuleArrayInput interface {
	pulumi.Input

	ToFirewallRuleArrayOutput() FirewallRuleArrayOutput
	ToFirewallRuleArrayOutputWithContext(context.Context) FirewallRuleArrayOutput
}

type FirewallRuleArray []FirewallRuleInput

func (FirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRule)(nil)).Elem()
}

func (i FirewallRuleArray) ToFirewallRuleArrayOutput() FirewallRuleArrayOutput {
	return i.ToFirewallRuleArrayOutputWithContext(context.Background())
}

func (i FirewallRuleArray) ToFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRuleArrayOutput)
}

type FirewallRuleOutput struct{ *pulumi.OutputState }

func (FirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRule)(nil)).Elem()
}

func (o FirewallRuleOutput) ToFirewallRuleOutput() FirewallRuleOutput {
	return o
}

func (o FirewallRuleOutput) ToFirewallRuleOutputWithContext(ctx context.Context) FirewallRuleOutput {
	return o
}

// Description of the firewall rule
func (o FirewallRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction`
// is `out`)
func (o FirewallRuleOutput) DestinationIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallRule) []string { return v.DestinationIps }).(pulumi.StringArrayOutput)
}

// Direction of the Firewall Rule. `in`
func (o FirewallRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallRule) string { return v.Direction }).(pulumi.StringOutput)
}

// Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`
// to allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and
// 85.
func (o FirewallRuleOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRule) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
func (o FirewallRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v FirewallRule) string { return v.Protocol }).(pulumi.StringOutput)
}

// List of CIDRs that are allowed within this Firewall Rule
func (o FirewallRuleOutput) SourceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallRule) []string { return v.SourceIps }).(pulumi.StringArrayOutput)
}

type FirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FirewallRule)(nil)).Elem()
}

func (o FirewallRuleArrayOutput) ToFirewallRuleArrayOutput() FirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleArrayOutput) ToFirewallRuleArrayOutputWithContext(ctx context.Context) FirewallRuleArrayOutput {
	return o
}

func (o FirewallRuleArrayOutput) Index(i pulumi.IntInput) FirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FirewallRule {
		return vs[0].([]FirewallRule)[vs[1].(int)]
	}).(FirewallRuleOutput)
}

type LoadBalancerAlgorithm struct {
	// Type of the Load Balancer Algorithm. `roundRobin` or `leastConnections`
	Type *string `pulumi:"type"`
}

// LoadBalancerAlgorithmInput is an input type that accepts LoadBalancerAlgorithmArgs and LoadBalancerAlgorithmOutput values.
// You can construct a concrete instance of `LoadBalancerAlgorithmInput` via:
//
//          LoadBalancerAlgorithmArgs{...}
type LoadBalancerAlgorithmInput interface {
	pulumi.Input

	ToLoadBalancerAlgorithmOutput() LoadBalancerAlgorithmOutput
	ToLoadBalancerAlgorithmOutputWithContext(context.Context) LoadBalancerAlgorithmOutput
}

type LoadBalancerAlgorithmArgs struct {
	// Type of the Load Balancer Algorithm. `roundRobin` or `leastConnections`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LoadBalancerAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAlgorithm)(nil)).Elem()
}

func (i LoadBalancerAlgorithmArgs) ToLoadBalancerAlgorithmOutput() LoadBalancerAlgorithmOutput {
	return i.ToLoadBalancerAlgorithmOutputWithContext(context.Background())
}

func (i LoadBalancerAlgorithmArgs) ToLoadBalancerAlgorithmOutputWithContext(ctx context.Context) LoadBalancerAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAlgorithmOutput)
}

func (i LoadBalancerAlgorithmArgs) ToLoadBalancerAlgorithmPtrOutput() LoadBalancerAlgorithmPtrOutput {
	return i.ToLoadBalancerAlgorithmPtrOutputWithContext(context.Background())
}

func (i LoadBalancerAlgorithmArgs) ToLoadBalancerAlgorithmPtrOutputWithContext(ctx context.Context) LoadBalancerAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAlgorithmOutput).ToLoadBalancerAlgorithmPtrOutputWithContext(ctx)
}

// LoadBalancerAlgorithmPtrInput is an input type that accepts LoadBalancerAlgorithmArgs, LoadBalancerAlgorithmPtr and LoadBalancerAlgorithmPtrOutput values.
// You can construct a concrete instance of `LoadBalancerAlgorithmPtrInput` via:
//
//          LoadBalancerAlgorithmArgs{...}
//
//  or:
//
//          nil
type LoadBalancerAlgorithmPtrInput interface {
	pulumi.Input

	ToLoadBalancerAlgorithmPtrOutput() LoadBalancerAlgorithmPtrOutput
	ToLoadBalancerAlgorithmPtrOutputWithContext(context.Context) LoadBalancerAlgorithmPtrOutput
}

type loadBalancerAlgorithmPtrType LoadBalancerAlgorithmArgs

func LoadBalancerAlgorithmPtr(v *LoadBalancerAlgorithmArgs) LoadBalancerAlgorithmPtrInput {
	return (*loadBalancerAlgorithmPtrType)(v)
}

func (*loadBalancerAlgorithmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerAlgorithm)(nil)).Elem()
}

func (i *loadBalancerAlgorithmPtrType) ToLoadBalancerAlgorithmPtrOutput() LoadBalancerAlgorithmPtrOutput {
	return i.ToLoadBalancerAlgorithmPtrOutputWithContext(context.Background())
}

func (i *loadBalancerAlgorithmPtrType) ToLoadBalancerAlgorithmPtrOutputWithContext(ctx context.Context) LoadBalancerAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAlgorithmPtrOutput)
}

type LoadBalancerAlgorithmOutput struct{ *pulumi.OutputState }

func (LoadBalancerAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerAlgorithm)(nil)).Elem()
}

func (o LoadBalancerAlgorithmOutput) ToLoadBalancerAlgorithmOutput() LoadBalancerAlgorithmOutput {
	return o
}

func (o LoadBalancerAlgorithmOutput) ToLoadBalancerAlgorithmOutputWithContext(ctx context.Context) LoadBalancerAlgorithmOutput {
	return o
}

func (o LoadBalancerAlgorithmOutput) ToLoadBalancerAlgorithmPtrOutput() LoadBalancerAlgorithmPtrOutput {
	return o.ToLoadBalancerAlgorithmPtrOutputWithContext(context.Background())
}

func (o LoadBalancerAlgorithmOutput) ToLoadBalancerAlgorithmPtrOutputWithContext(ctx context.Context) LoadBalancerAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerAlgorithm) *LoadBalancerAlgorithm {
		return &v
	}).(LoadBalancerAlgorithmPtrOutput)
}

// Type of the Load Balancer Algorithm. `roundRobin` or `leastConnections`
func (o LoadBalancerAlgorithmOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerAlgorithm) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LoadBalancerAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerAlgorithm)(nil)).Elem()
}

func (o LoadBalancerAlgorithmPtrOutput) ToLoadBalancerAlgorithmPtrOutput() LoadBalancerAlgorithmPtrOutput {
	return o
}

func (o LoadBalancerAlgorithmPtrOutput) ToLoadBalancerAlgorithmPtrOutputWithContext(ctx context.Context) LoadBalancerAlgorithmPtrOutput {
	return o
}

func (o LoadBalancerAlgorithmPtrOutput) Elem() LoadBalancerAlgorithmOutput {
	return o.ApplyT(func(v *LoadBalancerAlgorithm) LoadBalancerAlgorithm {
		if v != nil {
			return *v
		}
		var ret LoadBalancerAlgorithm
		return ret
	}).(LoadBalancerAlgorithmOutput)
}

// Type of the Load Balancer Algorithm. `roundRobin` or `leastConnections`
func (o LoadBalancerAlgorithmPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerAlgorithm) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type LoadBalancerServiceHealthCheck struct {
	// List of http configurations. Required if `protocol` is `http`.
	Http *LoadBalancerServiceHealthCheckHttp `pulumi:"http"`
	// Interval how often the health check will be performed, in seconds.
	Interval int `pulumi:"interval"`
	// Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
	Port int `pulumi:"port"`
	// Protocol the health check uses. `http` or `tcp`
	Protocol string `pulumi:"protocol"`
	// Number of tries a health check will be performed until a target will be listed as `unhealthy`.
	Retries *int `pulumi:"retries"`
	// Timeout when a health check try will be canceled if there is no response, in seconds.
	Timeout int `pulumi:"timeout"`
}

// LoadBalancerServiceHealthCheckInput is an input type that accepts LoadBalancerServiceHealthCheckArgs and LoadBalancerServiceHealthCheckOutput values.
// You can construct a concrete instance of `LoadBalancerServiceHealthCheckInput` via:
//
//          LoadBalancerServiceHealthCheckArgs{...}
type LoadBalancerServiceHealthCheckInput interface {
	pulumi.Input

	ToLoadBalancerServiceHealthCheckOutput() LoadBalancerServiceHealthCheckOutput
	ToLoadBalancerServiceHealthCheckOutputWithContext(context.Context) LoadBalancerServiceHealthCheckOutput
}

type LoadBalancerServiceHealthCheckArgs struct {
	// List of http configurations. Required if `protocol` is `http`.
	Http LoadBalancerServiceHealthCheckHttpPtrInput `pulumi:"http"`
	// Interval how often the health check will be performed, in seconds.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
	Port pulumi.IntInput `pulumi:"port"`
	// Protocol the health check uses. `http` or `tcp`
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Number of tries a health check will be performed until a target will be listed as `unhealthy`.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// Timeout when a health check try will be canceled if there is no response, in seconds.
	Timeout pulumi.IntInput `pulumi:"timeout"`
}

func (LoadBalancerServiceHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (i LoadBalancerServiceHealthCheckArgs) ToLoadBalancerServiceHealthCheckOutput() LoadBalancerServiceHealthCheckOutput {
	return i.ToLoadBalancerServiceHealthCheckOutputWithContext(context.Background())
}

func (i LoadBalancerServiceHealthCheckArgs) ToLoadBalancerServiceHealthCheckOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHealthCheckOutput)
}

func (i LoadBalancerServiceHealthCheckArgs) ToLoadBalancerServiceHealthCheckPtrOutput() LoadBalancerServiceHealthCheckPtrOutput {
	return i.ToLoadBalancerServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (i LoadBalancerServiceHealthCheckArgs) ToLoadBalancerServiceHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHealthCheckOutput).ToLoadBalancerServiceHealthCheckPtrOutputWithContext(ctx)
}

// LoadBalancerServiceHealthCheckPtrInput is an input type that accepts LoadBalancerServiceHealthCheckArgs, LoadBalancerServiceHealthCheckPtr and LoadBalancerServiceHealthCheckPtrOutput values.
// You can construct a concrete instance of `LoadBalancerServiceHealthCheckPtrInput` via:
//
//          LoadBalancerServiceHealthCheckArgs{...}
//
//  or:
//
//          nil
type LoadBalancerServiceHealthCheckPtrInput interface {
	pulumi.Input

	ToLoadBalancerServiceHealthCheckPtrOutput() LoadBalancerServiceHealthCheckPtrOutput
	ToLoadBalancerServiceHealthCheckPtrOutputWithContext(context.Context) LoadBalancerServiceHealthCheckPtrOutput
}

type loadBalancerServiceHealthCheckPtrType LoadBalancerServiceHealthCheckArgs

func LoadBalancerServiceHealthCheckPtr(v *LoadBalancerServiceHealthCheckArgs) LoadBalancerServiceHealthCheckPtrInput {
	return (*loadBalancerServiceHealthCheckPtrType)(v)
}

func (*loadBalancerServiceHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (i *loadBalancerServiceHealthCheckPtrType) ToLoadBalancerServiceHealthCheckPtrOutput() LoadBalancerServiceHealthCheckPtrOutput {
	return i.ToLoadBalancerServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (i *loadBalancerServiceHealthCheckPtrType) ToLoadBalancerServiceHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHealthCheckPtrOutput)
}

type LoadBalancerServiceHealthCheckOutput struct{ *pulumi.OutputState }

func (LoadBalancerServiceHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (o LoadBalancerServiceHealthCheckOutput) ToLoadBalancerServiceHealthCheckOutput() LoadBalancerServiceHealthCheckOutput {
	return o
}

func (o LoadBalancerServiceHealthCheckOutput) ToLoadBalancerServiceHealthCheckOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckOutput {
	return o
}

func (o LoadBalancerServiceHealthCheckOutput) ToLoadBalancerServiceHealthCheckPtrOutput() LoadBalancerServiceHealthCheckPtrOutput {
	return o.ToLoadBalancerServiceHealthCheckPtrOutputWithContext(context.Background())
}

func (o LoadBalancerServiceHealthCheckOutput) ToLoadBalancerServiceHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerServiceHealthCheck) *LoadBalancerServiceHealthCheck {
		return &v
	}).(LoadBalancerServiceHealthCheckPtrOutput)
}

// List of http configurations. Required if `protocol` is `http`.
func (o LoadBalancerServiceHealthCheckOutput) Http() LoadBalancerServiceHealthCheckHttpPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheck) *LoadBalancerServiceHealthCheckHttp { return v.Http }).(LoadBalancerServiceHealthCheckHttpPtrOutput)
}

// Interval how often the health check will be performed, in seconds.
func (o LoadBalancerServiceHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
func (o LoadBalancerServiceHealthCheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheck) int { return v.Port }).(pulumi.IntOutput)
}

// Protocol the health check uses. `http` or `tcp`
func (o LoadBalancerServiceHealthCheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheck) string { return v.Protocol }).(pulumi.StringOutput)
}

// Number of tries a health check will be performed until a target will be listed as `unhealthy`.
func (o LoadBalancerServiceHealthCheckOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheck) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// Timeout when a health check try will be canceled if there is no response, in seconds.
func (o LoadBalancerServiceHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

type LoadBalancerServiceHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerServiceHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (o LoadBalancerServiceHealthCheckPtrOutput) ToLoadBalancerServiceHealthCheckPtrOutput() LoadBalancerServiceHealthCheckPtrOutput {
	return o
}

func (o LoadBalancerServiceHealthCheckPtrOutput) ToLoadBalancerServiceHealthCheckPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckPtrOutput {
	return o
}

func (o LoadBalancerServiceHealthCheckPtrOutput) Elem() LoadBalancerServiceHealthCheckOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheck) LoadBalancerServiceHealthCheck {
		if v != nil {
			return *v
		}
		var ret LoadBalancerServiceHealthCheck
		return ret
	}).(LoadBalancerServiceHealthCheckOutput)
}

// List of http configurations. Required if `protocol` is `http`.
func (o LoadBalancerServiceHealthCheckPtrOutput) Http() LoadBalancerServiceHealthCheckHttpPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheck) *LoadBalancerServiceHealthCheckHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(LoadBalancerServiceHealthCheckHttpPtrOutput)
}

// Interval how often the health check will be performed, in seconds.
func (o LoadBalancerServiceHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
func (o LoadBalancerServiceHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Protocol the health check uses. `http` or `tcp`
func (o LoadBalancerServiceHealthCheckPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheck) *string {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Number of tries a health check will be performed until a target will be listed as `unhealthy`.
func (o LoadBalancerServiceHealthCheckPtrOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Retries
	}).(pulumi.IntPtrOutput)
}

// Timeout when a health check try will be canceled if there is no response, in seconds.
func (o LoadBalancerServiceHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheck) *int {
		if v == nil {
			return nil
		}
		return &v.Timeout
	}).(pulumi.IntPtrOutput)
}

type LoadBalancerServiceHealthCheckHttp struct {
	// Domain we try to access when performing the Health Check.
	Domain *string `pulumi:"domain"`
	// Path we try to access when performing the Health Check.
	Path *string `pulumi:"path"`
	// Response we expect to be included in the Target response when a Health Check was performed.
	Response *string `pulumi:"response"`
	// We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
	StatusCodes []string `pulumi:"statusCodes"`
	// Enable TLS certificate checking.
	Tls *bool `pulumi:"tls"`
}

// LoadBalancerServiceHealthCheckHttpInput is an input type that accepts LoadBalancerServiceHealthCheckHttpArgs and LoadBalancerServiceHealthCheckHttpOutput values.
// You can construct a concrete instance of `LoadBalancerServiceHealthCheckHttpInput` via:
//
//          LoadBalancerServiceHealthCheckHttpArgs{...}
type LoadBalancerServiceHealthCheckHttpInput interface {
	pulumi.Input

	ToLoadBalancerServiceHealthCheckHttpOutput() LoadBalancerServiceHealthCheckHttpOutput
	ToLoadBalancerServiceHealthCheckHttpOutputWithContext(context.Context) LoadBalancerServiceHealthCheckHttpOutput
}

type LoadBalancerServiceHealthCheckHttpArgs struct {
	// Domain we try to access when performing the Health Check.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Path we try to access when performing the Health Check.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Response we expect to be included in the Target response when a Health Check was performed.
	Response pulumi.StringPtrInput `pulumi:"response"`
	// We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
	StatusCodes pulumi.StringArrayInput `pulumi:"statusCodes"`
	// Enable TLS certificate checking.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
}

func (LoadBalancerServiceHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (i LoadBalancerServiceHealthCheckHttpArgs) ToLoadBalancerServiceHealthCheckHttpOutput() LoadBalancerServiceHealthCheckHttpOutput {
	return i.ToLoadBalancerServiceHealthCheckHttpOutputWithContext(context.Background())
}

func (i LoadBalancerServiceHealthCheckHttpArgs) ToLoadBalancerServiceHealthCheckHttpOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHealthCheckHttpOutput)
}

func (i LoadBalancerServiceHealthCheckHttpArgs) ToLoadBalancerServiceHealthCheckHttpPtrOutput() LoadBalancerServiceHealthCheckHttpPtrOutput {
	return i.ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (i LoadBalancerServiceHealthCheckHttpArgs) ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHealthCheckHttpOutput).ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(ctx)
}

// LoadBalancerServiceHealthCheckHttpPtrInput is an input type that accepts LoadBalancerServiceHealthCheckHttpArgs, LoadBalancerServiceHealthCheckHttpPtr and LoadBalancerServiceHealthCheckHttpPtrOutput values.
// You can construct a concrete instance of `LoadBalancerServiceHealthCheckHttpPtrInput` via:
//
//          LoadBalancerServiceHealthCheckHttpArgs{...}
//
//  or:
//
//          nil
type LoadBalancerServiceHealthCheckHttpPtrInput interface {
	pulumi.Input

	ToLoadBalancerServiceHealthCheckHttpPtrOutput() LoadBalancerServiceHealthCheckHttpPtrOutput
	ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(context.Context) LoadBalancerServiceHealthCheckHttpPtrOutput
}

type loadBalancerServiceHealthCheckHttpPtrType LoadBalancerServiceHealthCheckHttpArgs

func LoadBalancerServiceHealthCheckHttpPtr(v *LoadBalancerServiceHealthCheckHttpArgs) LoadBalancerServiceHealthCheckHttpPtrInput {
	return (*loadBalancerServiceHealthCheckHttpPtrType)(v)
}

func (*loadBalancerServiceHealthCheckHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (i *loadBalancerServiceHealthCheckHttpPtrType) ToLoadBalancerServiceHealthCheckHttpPtrOutput() LoadBalancerServiceHealthCheckHttpPtrOutput {
	return i.ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (i *loadBalancerServiceHealthCheckHttpPtrType) ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHealthCheckHttpPtrOutput)
}

type LoadBalancerServiceHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (LoadBalancerServiceHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (o LoadBalancerServiceHealthCheckHttpOutput) ToLoadBalancerServiceHealthCheckHttpOutput() LoadBalancerServiceHealthCheckHttpOutput {
	return o
}

func (o LoadBalancerServiceHealthCheckHttpOutput) ToLoadBalancerServiceHealthCheckHttpOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckHttpOutput {
	return o
}

func (o LoadBalancerServiceHealthCheckHttpOutput) ToLoadBalancerServiceHealthCheckHttpPtrOutput() LoadBalancerServiceHealthCheckHttpPtrOutput {
	return o.ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(context.Background())
}

func (o LoadBalancerServiceHealthCheckHttpOutput) ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerServiceHealthCheckHttp) *LoadBalancerServiceHealthCheckHttp {
		return &v
	}).(LoadBalancerServiceHealthCheckHttpPtrOutput)
}

// Domain we try to access when performing the Health Check.
func (o LoadBalancerServiceHealthCheckHttpOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheckHttp) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Path we try to access when performing the Health Check.
func (o LoadBalancerServiceHealthCheckHttpOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheckHttp) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Response we expect to be included in the Target response when a Health Check was performed.
func (o LoadBalancerServiceHealthCheckHttpOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheckHttp) *string { return v.Response }).(pulumi.StringPtrOutput)
}

// We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
func (o LoadBalancerServiceHealthCheckHttpOutput) StatusCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheckHttp) []string { return v.StatusCodes }).(pulumi.StringArrayOutput)
}

// Enable TLS certificate checking.
func (o LoadBalancerServiceHealthCheckHttpOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHealthCheckHttp) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

type LoadBalancerServiceHealthCheckHttpPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerServiceHealthCheckHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (o LoadBalancerServiceHealthCheckHttpPtrOutput) ToLoadBalancerServiceHealthCheckHttpPtrOutput() LoadBalancerServiceHealthCheckHttpPtrOutput {
	return o
}

func (o LoadBalancerServiceHealthCheckHttpPtrOutput) ToLoadBalancerServiceHealthCheckHttpPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHealthCheckHttpPtrOutput {
	return o
}

func (o LoadBalancerServiceHealthCheckHttpPtrOutput) Elem() LoadBalancerServiceHealthCheckHttpOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheckHttp) LoadBalancerServiceHealthCheckHttp {
		if v != nil {
			return *v
		}
		var ret LoadBalancerServiceHealthCheckHttp
		return ret
	}).(LoadBalancerServiceHealthCheckHttpOutput)
}

// Domain we try to access when performing the Health Check.
func (o LoadBalancerServiceHealthCheckHttpPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// Path we try to access when performing the Health Check.
func (o LoadBalancerServiceHealthCheckHttpPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Response we expect to be included in the Target response when a Health Check was performed.
func (o LoadBalancerServiceHealthCheckHttpPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheckHttp) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

// We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
func (o LoadBalancerServiceHealthCheckHttpPtrOutput) StatusCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheckHttp) []string {
		if v == nil {
			return nil
		}
		return v.StatusCodes
	}).(pulumi.StringArrayOutput)
}

// Enable TLS certificate checking.
func (o LoadBalancerServiceHealthCheckHttpPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHealthCheckHttp) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

type LoadBalancerServiceHttp struct {
	// List of IDs from certificates which the Load Balancer has.
	Certificates []int `pulumi:"certificates"`
	// Lifetime of the cookie for sticky session (in seconds). Default: `300`
	CookieLifetime *int `pulumi:"cookieLifetime"`
	// Name of the cookie for sticky session. Default: `HCLBSTICKY`
	CookieName *string `pulumi:"cookieName"`
	// Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.
	RedirectHttp *bool `pulumi:"redirectHttp"`
	// Enable sticky sessions
	StickySessions *bool `pulumi:"stickySessions"`
}

// LoadBalancerServiceHttpInput is an input type that accepts LoadBalancerServiceHttpArgs and LoadBalancerServiceHttpOutput values.
// You can construct a concrete instance of `LoadBalancerServiceHttpInput` via:
//
//          LoadBalancerServiceHttpArgs{...}
type LoadBalancerServiceHttpInput interface {
	pulumi.Input

	ToLoadBalancerServiceHttpOutput() LoadBalancerServiceHttpOutput
	ToLoadBalancerServiceHttpOutputWithContext(context.Context) LoadBalancerServiceHttpOutput
}

type LoadBalancerServiceHttpArgs struct {
	// List of IDs from certificates which the Load Balancer has.
	Certificates pulumi.IntArrayInput `pulumi:"certificates"`
	// Lifetime of the cookie for sticky session (in seconds). Default: `300`
	CookieLifetime pulumi.IntPtrInput `pulumi:"cookieLifetime"`
	// Name of the cookie for sticky session. Default: `HCLBSTICKY`
	CookieName pulumi.StringPtrInput `pulumi:"cookieName"`
	// Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.
	RedirectHttp pulumi.BoolPtrInput `pulumi:"redirectHttp"`
	// Enable sticky sessions
	StickySessions pulumi.BoolPtrInput `pulumi:"stickySessions"`
}

func (LoadBalancerServiceHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerServiceHttp)(nil)).Elem()
}

func (i LoadBalancerServiceHttpArgs) ToLoadBalancerServiceHttpOutput() LoadBalancerServiceHttpOutput {
	return i.ToLoadBalancerServiceHttpOutputWithContext(context.Background())
}

func (i LoadBalancerServiceHttpArgs) ToLoadBalancerServiceHttpOutputWithContext(ctx context.Context) LoadBalancerServiceHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHttpOutput)
}

func (i LoadBalancerServiceHttpArgs) ToLoadBalancerServiceHttpPtrOutput() LoadBalancerServiceHttpPtrOutput {
	return i.ToLoadBalancerServiceHttpPtrOutputWithContext(context.Background())
}

func (i LoadBalancerServiceHttpArgs) ToLoadBalancerServiceHttpPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHttpOutput).ToLoadBalancerServiceHttpPtrOutputWithContext(ctx)
}

// LoadBalancerServiceHttpPtrInput is an input type that accepts LoadBalancerServiceHttpArgs, LoadBalancerServiceHttpPtr and LoadBalancerServiceHttpPtrOutput values.
// You can construct a concrete instance of `LoadBalancerServiceHttpPtrInput` via:
//
//          LoadBalancerServiceHttpArgs{...}
//
//  or:
//
//          nil
type LoadBalancerServiceHttpPtrInput interface {
	pulumi.Input

	ToLoadBalancerServiceHttpPtrOutput() LoadBalancerServiceHttpPtrOutput
	ToLoadBalancerServiceHttpPtrOutputWithContext(context.Context) LoadBalancerServiceHttpPtrOutput
}

type loadBalancerServiceHttpPtrType LoadBalancerServiceHttpArgs

func LoadBalancerServiceHttpPtr(v *LoadBalancerServiceHttpArgs) LoadBalancerServiceHttpPtrInput {
	return (*loadBalancerServiceHttpPtrType)(v)
}

func (*loadBalancerServiceHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerServiceHttp)(nil)).Elem()
}

func (i *loadBalancerServiceHttpPtrType) ToLoadBalancerServiceHttpPtrOutput() LoadBalancerServiceHttpPtrOutput {
	return i.ToLoadBalancerServiceHttpPtrOutputWithContext(context.Background())
}

func (i *loadBalancerServiceHttpPtrType) ToLoadBalancerServiceHttpPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerServiceHttpPtrOutput)
}

type LoadBalancerServiceHttpOutput struct{ *pulumi.OutputState }

func (LoadBalancerServiceHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerServiceHttp)(nil)).Elem()
}

func (o LoadBalancerServiceHttpOutput) ToLoadBalancerServiceHttpOutput() LoadBalancerServiceHttpOutput {
	return o
}

func (o LoadBalancerServiceHttpOutput) ToLoadBalancerServiceHttpOutputWithContext(ctx context.Context) LoadBalancerServiceHttpOutput {
	return o
}

func (o LoadBalancerServiceHttpOutput) ToLoadBalancerServiceHttpPtrOutput() LoadBalancerServiceHttpPtrOutput {
	return o.ToLoadBalancerServiceHttpPtrOutputWithContext(context.Background())
}

func (o LoadBalancerServiceHttpOutput) ToLoadBalancerServiceHttpPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerServiceHttp) *LoadBalancerServiceHttp {
		return &v
	}).(LoadBalancerServiceHttpPtrOutput)
}

// List of IDs from certificates which the Load Balancer has.
func (o LoadBalancerServiceHttpOutput) Certificates() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LoadBalancerServiceHttp) []int { return v.Certificates }).(pulumi.IntArrayOutput)
}

// Lifetime of the cookie for sticky session (in seconds). Default: `300`
func (o LoadBalancerServiceHttpOutput) CookieLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHttp) *int { return v.CookieLifetime }).(pulumi.IntPtrOutput)
}

// Name of the cookie for sticky session. Default: `HCLBSTICKY`
func (o LoadBalancerServiceHttpOutput) CookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHttp) *string { return v.CookieName }).(pulumi.StringPtrOutput)
}

// Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.
func (o LoadBalancerServiceHttpOutput) RedirectHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHttp) *bool { return v.RedirectHttp }).(pulumi.BoolPtrOutput)
}

// Enable sticky sessions
func (o LoadBalancerServiceHttpOutput) StickySessions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerServiceHttp) *bool { return v.StickySessions }).(pulumi.BoolPtrOutput)
}

type LoadBalancerServiceHttpPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerServiceHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerServiceHttp)(nil)).Elem()
}

func (o LoadBalancerServiceHttpPtrOutput) ToLoadBalancerServiceHttpPtrOutput() LoadBalancerServiceHttpPtrOutput {
	return o
}

func (o LoadBalancerServiceHttpPtrOutput) ToLoadBalancerServiceHttpPtrOutputWithContext(ctx context.Context) LoadBalancerServiceHttpPtrOutput {
	return o
}

func (o LoadBalancerServiceHttpPtrOutput) Elem() LoadBalancerServiceHttpOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHttp) LoadBalancerServiceHttp {
		if v != nil {
			return *v
		}
		var ret LoadBalancerServiceHttp
		return ret
	}).(LoadBalancerServiceHttpOutput)
}

// List of IDs from certificates which the Load Balancer has.
func (o LoadBalancerServiceHttpPtrOutput) Certificates() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHttp) []int {
		if v == nil {
			return nil
		}
		return v.Certificates
	}).(pulumi.IntArrayOutput)
}

// Lifetime of the cookie for sticky session (in seconds). Default: `300`
func (o LoadBalancerServiceHttpPtrOutput) CookieLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHttp) *int {
		if v == nil {
			return nil
		}
		return v.CookieLifetime
	}).(pulumi.IntPtrOutput)
}

// Name of the cookie for sticky session. Default: `HCLBSTICKY`
func (o LoadBalancerServiceHttpPtrOutput) CookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHttp) *string {
		if v == nil {
			return nil
		}
		return v.CookieName
	}).(pulumi.StringPtrOutput)
}

// Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.
func (o LoadBalancerServiceHttpPtrOutput) RedirectHttp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHttp) *bool {
		if v == nil {
			return nil
		}
		return v.RedirectHttp
	}).(pulumi.BoolPtrOutput)
}

// Enable sticky sessions
func (o LoadBalancerServiceHttpPtrOutput) StickySessions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LoadBalancerServiceHttp) *bool {
		if v == nil {
			return nil
		}
		return v.StickySessions
	}).(pulumi.BoolPtrOutput)
}

type LoadBalancerTargetType struct {
	ServerId *int `pulumi:"serverId"`
	// Type of the Load Balancer Algorithm. `roundRobin` or `leastConnections`
	Type string `pulumi:"type"`
	// Deprecated: Does not work. Use the hcloud_load_balancer_target resource instead.
	UsePrivateIp *bool `pulumi:"usePrivateIp"`
}

// LoadBalancerTargetTypeInput is an input type that accepts LoadBalancerTargetTypeArgs and LoadBalancerTargetTypeOutput values.
// You can construct a concrete instance of `LoadBalancerTargetTypeInput` via:
//
//          LoadBalancerTargetTypeArgs{...}
type LoadBalancerTargetTypeInput interface {
	pulumi.Input

	ToLoadBalancerTargetTypeOutput() LoadBalancerTargetTypeOutput
	ToLoadBalancerTargetTypeOutputWithContext(context.Context) LoadBalancerTargetTypeOutput
}

type LoadBalancerTargetTypeArgs struct {
	ServerId pulumi.IntPtrInput `pulumi:"serverId"`
	// Type of the Load Balancer Algorithm. `roundRobin` or `leastConnections`
	Type pulumi.StringInput `pulumi:"type"`
	// Deprecated: Does not work. Use the hcloud_load_balancer_target resource instead.
	UsePrivateIp pulumi.BoolPtrInput `pulumi:"usePrivateIp"`
}

func (LoadBalancerTargetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerTargetType)(nil)).Elem()
}

func (i LoadBalancerTargetTypeArgs) ToLoadBalancerTargetTypeOutput() LoadBalancerTargetTypeOutput {
	return i.ToLoadBalancerTargetTypeOutputWithContext(context.Background())
}

func (i LoadBalancerTargetTypeArgs) ToLoadBalancerTargetTypeOutputWithContext(ctx context.Context) LoadBalancerTargetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerTargetTypeOutput)
}

// LoadBalancerTargetTypeArrayInput is an input type that accepts LoadBalancerTargetTypeArray and LoadBalancerTargetTypeArrayOutput values.
// You can construct a concrete instance of `LoadBalancerTargetTypeArrayInput` via:
//
//          LoadBalancerTargetTypeArray{ LoadBalancerTargetTypeArgs{...} }
type LoadBalancerTargetTypeArrayInput interface {
	pulumi.Input

	ToLoadBalancerTargetTypeArrayOutput() LoadBalancerTargetTypeArrayOutput
	ToLoadBalancerTargetTypeArrayOutputWithContext(context.Context) LoadBalancerTargetTypeArrayOutput
}

type LoadBalancerTargetTypeArray []LoadBalancerTargetTypeInput

func (LoadBalancerTargetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerTargetType)(nil)).Elem()
}

func (i LoadBalancerTargetTypeArray) ToLoadBalancerTargetTypeArrayOutput() LoadBalancerTargetTypeArrayOutput {
	return i.ToLoadBalancerTargetTypeArrayOutputWithContext(context.Background())
}

func (i LoadBalancerTargetTypeArray) ToLoadBalancerTargetTypeArrayOutputWithContext(ctx context.Context) LoadBalancerTargetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerTargetTypeArrayOutput)
}

type LoadBalancerTargetTypeOutput struct{ *pulumi.OutputState }

func (LoadBalancerTargetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerTargetType)(nil)).Elem()
}

func (o LoadBalancerTargetTypeOutput) ToLoadBalancerTargetTypeOutput() LoadBalancerTargetTypeOutput {
	return o
}

func (o LoadBalancerTargetTypeOutput) ToLoadBalancerTargetTypeOutputWithContext(ctx context.Context) LoadBalancerTargetTypeOutput {
	return o
}

func (o LoadBalancerTargetTypeOutput) ServerId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerTargetType) *int { return v.ServerId }).(pulumi.IntPtrOutput)
}

// Type of the Load Balancer Algorithm. `roundRobin` or `leastConnections`
func (o LoadBalancerTargetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerTargetType) string { return v.Type }).(pulumi.StringOutput)
}

// Deprecated: Does not work. Use the hcloud_load_balancer_target resource instead.
func (o LoadBalancerTargetTypeOutput) UsePrivateIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LoadBalancerTargetType) *bool { return v.UsePrivateIp }).(pulumi.BoolPtrOutput)
}

type LoadBalancerTargetTypeArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerTargetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerTargetType)(nil)).Elem()
}

func (o LoadBalancerTargetTypeArrayOutput) ToLoadBalancerTargetTypeArrayOutput() LoadBalancerTargetTypeArrayOutput {
	return o
}

func (o LoadBalancerTargetTypeArrayOutput) ToLoadBalancerTargetTypeArrayOutputWithContext(ctx context.Context) LoadBalancerTargetTypeArrayOutput {
	return o
}

func (o LoadBalancerTargetTypeArrayOutput) Index(i pulumi.IntInput) LoadBalancerTargetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerTargetType {
		return vs[0].([]LoadBalancerTargetType)[vs[1].(int)]
	}).(LoadBalancerTargetTypeOutput)
}

type ServerNetworkType struct {
	// Alias IPs the server should have in the Network.
	AliasIps []string `pulumi:"aliasIps"`
	// Specify the IP the server should get in the network
	Ip *string `pulumi:"ip"`
	// (Optional, string) The MAC address the private interface of the server has
	MacAddress *string `pulumi:"macAddress"`
	// ID of the network
	NetworkId int `pulumi:"networkId"`
}

// ServerNetworkTypeInput is an input type that accepts ServerNetworkTypeArgs and ServerNetworkTypeOutput values.
// You can construct a concrete instance of `ServerNetworkTypeInput` via:
//
//          ServerNetworkTypeArgs{...}
type ServerNetworkTypeInput interface {
	pulumi.Input

	ToServerNetworkTypeOutput() ServerNetworkTypeOutput
	ToServerNetworkTypeOutputWithContext(context.Context) ServerNetworkTypeOutput
}

type ServerNetworkTypeArgs struct {
	// Alias IPs the server should have in the Network.
	AliasIps pulumi.StringArrayInput `pulumi:"aliasIps"`
	// Specify the IP the server should get in the network
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// (Optional, string) The MAC address the private interface of the server has
	MacAddress pulumi.StringPtrInput `pulumi:"macAddress"`
	// ID of the network
	NetworkId pulumi.IntInput `pulumi:"networkId"`
}

func (ServerNetworkTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerNetworkType)(nil)).Elem()
}

func (i ServerNetworkTypeArgs) ToServerNetworkTypeOutput() ServerNetworkTypeOutput {
	return i.ToServerNetworkTypeOutputWithContext(context.Background())
}

func (i ServerNetworkTypeArgs) ToServerNetworkTypeOutputWithContext(ctx context.Context) ServerNetworkTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNetworkTypeOutput)
}

// ServerNetworkTypeArrayInput is an input type that accepts ServerNetworkTypeArray and ServerNetworkTypeArrayOutput values.
// You can construct a concrete instance of `ServerNetworkTypeArrayInput` via:
//
//          ServerNetworkTypeArray{ ServerNetworkTypeArgs{...} }
type ServerNetworkTypeArrayInput interface {
	pulumi.Input

	ToServerNetworkTypeArrayOutput() ServerNetworkTypeArrayOutput
	ToServerNetworkTypeArrayOutputWithContext(context.Context) ServerNetworkTypeArrayOutput
}

type ServerNetworkTypeArray []ServerNetworkTypeInput

func (ServerNetworkTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerNetworkType)(nil)).Elem()
}

func (i ServerNetworkTypeArray) ToServerNetworkTypeArrayOutput() ServerNetworkTypeArrayOutput {
	return i.ToServerNetworkTypeArrayOutputWithContext(context.Background())
}

func (i ServerNetworkTypeArray) ToServerNetworkTypeArrayOutputWithContext(ctx context.Context) ServerNetworkTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerNetworkTypeArrayOutput)
}

type ServerNetworkTypeOutput struct{ *pulumi.OutputState }

func (ServerNetworkTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerNetworkType)(nil)).Elem()
}

func (o ServerNetworkTypeOutput) ToServerNetworkTypeOutput() ServerNetworkTypeOutput {
	return o
}

func (o ServerNetworkTypeOutput) ToServerNetworkTypeOutputWithContext(ctx context.Context) ServerNetworkTypeOutput {
	return o
}

// Alias IPs the server should have in the Network.
func (o ServerNetworkTypeOutput) AliasIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerNetworkType) []string { return v.AliasIps }).(pulumi.StringArrayOutput)
}

// Specify the IP the server should get in the network
func (o ServerNetworkTypeOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNetworkType) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// (Optional, string) The MAC address the private interface of the server has
func (o ServerNetworkTypeOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerNetworkType) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

// ID of the network
func (o ServerNetworkTypeOutput) NetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v ServerNetworkType) int { return v.NetworkId }).(pulumi.IntOutput)
}

type ServerNetworkTypeArrayOutput struct{ *pulumi.OutputState }

func (ServerNetworkTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerNetworkType)(nil)).Elem()
}

func (o ServerNetworkTypeArrayOutput) ToServerNetworkTypeArrayOutput() ServerNetworkTypeArrayOutput {
	return o
}

func (o ServerNetworkTypeArrayOutput) ToServerNetworkTypeArrayOutputWithContext(ctx context.Context) ServerNetworkTypeArrayOutput {
	return o
}

func (o ServerNetworkTypeArrayOutput) Index(i pulumi.IntInput) ServerNetworkTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerNetworkType {
		return vs[0].([]ServerNetworkType)[vs[1].(int)]
	}).(ServerNetworkTypeOutput)
}

type GetCertificatesCertificate struct {
	Certificate    string                 `pulumi:"certificate"`
	Created        string                 `pulumi:"created"`
	DomainNames    []string               `pulumi:"domainNames"`
	Fingerprint    string                 `pulumi:"fingerprint"`
	Id             int                    `pulumi:"id"`
	Labels         map[string]interface{} `pulumi:"labels"`
	Name           *string                `pulumi:"name"`
	NotValidAfter  string                 `pulumi:"notValidAfter"`
	NotValidBefore string                 `pulumi:"notValidBefore"`
	Type           string                 `pulumi:"type"`
}

// GetCertificatesCertificateInput is an input type that accepts GetCertificatesCertificateArgs and GetCertificatesCertificateOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateInput` via:
//
//          GetCertificatesCertificateArgs{...}
type GetCertificatesCertificateInput interface {
	pulumi.Input

	ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput
	ToGetCertificatesCertificateOutputWithContext(context.Context) GetCertificatesCertificateOutput
}

type GetCertificatesCertificateArgs struct {
	Certificate    pulumi.StringInput      `pulumi:"certificate"`
	Created        pulumi.StringInput      `pulumi:"created"`
	DomainNames    pulumi.StringArrayInput `pulumi:"domainNames"`
	Fingerprint    pulumi.StringInput      `pulumi:"fingerprint"`
	Id             pulumi.IntInput         `pulumi:"id"`
	Labels         pulumi.MapInput         `pulumi:"labels"`
	Name           pulumi.StringPtrInput   `pulumi:"name"`
	NotValidAfter  pulumi.StringInput      `pulumi:"notValidAfter"`
	NotValidBefore pulumi.StringInput      `pulumi:"notValidBefore"`
	Type           pulumi.StringInput      `pulumi:"type"`
}

func (GetCertificatesCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificate)(nil)).Elem()
}

func (i GetCertificatesCertificateArgs) ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput {
	return i.ToGetCertificatesCertificateOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateArgs) ToGetCertificatesCertificateOutputWithContext(ctx context.Context) GetCertificatesCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateOutput)
}

// GetCertificatesCertificateArrayInput is an input type that accepts GetCertificatesCertificateArray and GetCertificatesCertificateArrayOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateArrayInput` via:
//
//          GetCertificatesCertificateArray{ GetCertificatesCertificateArgs{...} }
type GetCertificatesCertificateArrayInput interface {
	pulumi.Input

	ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput
	ToGetCertificatesCertificateArrayOutputWithContext(context.Context) GetCertificatesCertificateArrayOutput
}

type GetCertificatesCertificateArray []GetCertificatesCertificateInput

func (GetCertificatesCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificate)(nil)).Elem()
}

func (i GetCertificatesCertificateArray) ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput {
	return i.ToGetCertificatesCertificateArrayOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateArray) ToGetCertificatesCertificateArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateArrayOutput)
}

type GetCertificatesCertificateOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificate)(nil)).Elem()
}

func (o GetCertificatesCertificateOutput) ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput {
	return o
}

func (o GetCertificatesCertificateOutput) ToGetCertificatesCertificateOutputWithContext(ctx context.Context) GetCertificatesCertificateOutput {
	return o
}

func (o GetCertificatesCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Certificate }).(pulumi.StringOutput)
}

func (o GetCertificatesCertificateOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Created }).(pulumi.StringOutput)
}

func (o GetCertificatesCertificateOutput) DomainNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) []string { return v.DomainNames }).(pulumi.StringArrayOutput)
}

func (o GetCertificatesCertificateOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o GetCertificatesCertificateOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetCertificatesCertificateOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetCertificatesCertificateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetCertificatesCertificateOutput) NotValidAfter() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.NotValidAfter }).(pulumi.StringOutput)
}

func (o GetCertificatesCertificateOutput) NotValidBefore() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.NotValidBefore }).(pulumi.StringOutput)
}

func (o GetCertificatesCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Type }).(pulumi.StringOutput)
}

type GetCertificatesCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificate)(nil)).Elem()
}

func (o GetCertificatesCertificateArrayOutput) ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput {
	return o
}

func (o GetCertificatesCertificateArrayOutput) ToGetCertificatesCertificateArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateArrayOutput {
	return o
}

func (o GetCertificatesCertificateArrayOutput) Index(i pulumi.IntInput) GetCertificatesCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificatesCertificate {
		return vs[0].([]GetCertificatesCertificate)[vs[1].(int)]
	}).(GetCertificatesCertificateOutput)
}

type GetDatacentersDatacenter struct {
	AvailableServerTypeIds []int                  `pulumi:"availableServerTypeIds"`
	Description            string                 `pulumi:"description"`
	Id                     int                    `pulumi:"id"`
	Location               map[string]interface{} `pulumi:"location"`
	Name                   string                 `pulumi:"name"`
	SupportedServerTypeIds []int                  `pulumi:"supportedServerTypeIds"`
}

// GetDatacentersDatacenterInput is an input type that accepts GetDatacentersDatacenterArgs and GetDatacentersDatacenterOutput values.
// You can construct a concrete instance of `GetDatacentersDatacenterInput` via:
//
//          GetDatacentersDatacenterArgs{...}
type GetDatacentersDatacenterInput interface {
	pulumi.Input

	ToGetDatacentersDatacenterOutput() GetDatacentersDatacenterOutput
	ToGetDatacentersDatacenterOutputWithContext(context.Context) GetDatacentersDatacenterOutput
}

type GetDatacentersDatacenterArgs struct {
	AvailableServerTypeIds pulumi.IntArrayInput `pulumi:"availableServerTypeIds"`
	Description            pulumi.StringInput   `pulumi:"description"`
	Id                     pulumi.IntInput      `pulumi:"id"`
	Location               pulumi.MapInput      `pulumi:"location"`
	Name                   pulumi.StringInput   `pulumi:"name"`
	SupportedServerTypeIds pulumi.IntArrayInput `pulumi:"supportedServerTypeIds"`
}

func (GetDatacentersDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatacentersDatacenter)(nil)).Elem()
}

func (i GetDatacentersDatacenterArgs) ToGetDatacentersDatacenterOutput() GetDatacentersDatacenterOutput {
	return i.ToGetDatacentersDatacenterOutputWithContext(context.Background())
}

func (i GetDatacentersDatacenterArgs) ToGetDatacentersDatacenterOutputWithContext(ctx context.Context) GetDatacentersDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatacentersDatacenterOutput)
}

// GetDatacentersDatacenterArrayInput is an input type that accepts GetDatacentersDatacenterArray and GetDatacentersDatacenterArrayOutput values.
// You can construct a concrete instance of `GetDatacentersDatacenterArrayInput` via:
//
//          GetDatacentersDatacenterArray{ GetDatacentersDatacenterArgs{...} }
type GetDatacentersDatacenterArrayInput interface {
	pulumi.Input

	ToGetDatacentersDatacenterArrayOutput() GetDatacentersDatacenterArrayOutput
	ToGetDatacentersDatacenterArrayOutputWithContext(context.Context) GetDatacentersDatacenterArrayOutput
}

type GetDatacentersDatacenterArray []GetDatacentersDatacenterInput

func (GetDatacentersDatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatacentersDatacenter)(nil)).Elem()
}

func (i GetDatacentersDatacenterArray) ToGetDatacentersDatacenterArrayOutput() GetDatacentersDatacenterArrayOutput {
	return i.ToGetDatacentersDatacenterArrayOutputWithContext(context.Background())
}

func (i GetDatacentersDatacenterArray) ToGetDatacentersDatacenterArrayOutputWithContext(ctx context.Context) GetDatacentersDatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatacentersDatacenterArrayOutput)
}

type GetDatacentersDatacenterOutput struct{ *pulumi.OutputState }

func (GetDatacentersDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatacentersDatacenter)(nil)).Elem()
}

func (o GetDatacentersDatacenterOutput) ToGetDatacentersDatacenterOutput() GetDatacentersDatacenterOutput {
	return o
}

func (o GetDatacentersDatacenterOutput) ToGetDatacentersDatacenterOutputWithContext(ctx context.Context) GetDatacentersDatacenterOutput {
	return o
}

func (o GetDatacentersDatacenterOutput) AvailableServerTypeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDatacentersDatacenter) []int { return v.AvailableServerTypeIds }).(pulumi.IntArrayOutput)
}

func (o GetDatacentersDatacenterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatacentersDatacenter) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetDatacentersDatacenterOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDatacentersDatacenter) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetDatacentersDatacenterOutput) Location() pulumi.MapOutput {
	return o.ApplyT(func(v GetDatacentersDatacenter) map[string]interface{} { return v.Location }).(pulumi.MapOutput)
}

func (o GetDatacentersDatacenterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatacentersDatacenter) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDatacentersDatacenterOutput) SupportedServerTypeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDatacentersDatacenter) []int { return v.SupportedServerTypeIds }).(pulumi.IntArrayOutput)
}

type GetDatacentersDatacenterArrayOutput struct{ *pulumi.OutputState }

func (GetDatacentersDatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatacentersDatacenter)(nil)).Elem()
}

func (o GetDatacentersDatacenterArrayOutput) ToGetDatacentersDatacenterArrayOutput() GetDatacentersDatacenterArrayOutput {
	return o
}

func (o GetDatacentersDatacenterArrayOutput) ToGetDatacentersDatacenterArrayOutputWithContext(ctx context.Context) GetDatacentersDatacenterArrayOutput {
	return o
}

func (o GetDatacentersDatacenterArrayOutput) Index(i pulumi.IntInput) GetDatacentersDatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatacentersDatacenter {
		return vs[0].([]GetDatacentersDatacenter)[vs[1].(int)]
	}).(GetDatacentersDatacenterOutput)
}

type GetFirewallApplyTo struct {
	// (string) Label Selector to select servers the firewall is applied to. Empty if a server is directly
	// referenced
	LabelSelector string `pulumi:"labelSelector"`
	// (int) ID of a server where the firewall is applied to. `0` if applied to a label_selector
	Server int `pulumi:"server"`
}

// GetFirewallApplyToInput is an input type that accepts GetFirewallApplyToArgs and GetFirewallApplyToOutput values.
// You can construct a concrete instance of `GetFirewallApplyToInput` via:
//
//          GetFirewallApplyToArgs{...}
type GetFirewallApplyToInput interface {
	pulumi.Input

	ToGetFirewallApplyToOutput() GetFirewallApplyToOutput
	ToGetFirewallApplyToOutputWithContext(context.Context) GetFirewallApplyToOutput
}

type GetFirewallApplyToArgs struct {
	// (string) Label Selector to select servers the firewall is applied to. Empty if a server is directly
	// referenced
	LabelSelector pulumi.StringInput `pulumi:"labelSelector"`
	// (int) ID of a server where the firewall is applied to. `0` if applied to a label_selector
	Server pulumi.IntInput `pulumi:"server"`
}

func (GetFirewallApplyToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallApplyTo)(nil)).Elem()
}

func (i GetFirewallApplyToArgs) ToGetFirewallApplyToOutput() GetFirewallApplyToOutput {
	return i.ToGetFirewallApplyToOutputWithContext(context.Background())
}

func (i GetFirewallApplyToArgs) ToGetFirewallApplyToOutputWithContext(ctx context.Context) GetFirewallApplyToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallApplyToOutput)
}

// GetFirewallApplyToArrayInput is an input type that accepts GetFirewallApplyToArray and GetFirewallApplyToArrayOutput values.
// You can construct a concrete instance of `GetFirewallApplyToArrayInput` via:
//
//          GetFirewallApplyToArray{ GetFirewallApplyToArgs{...} }
type GetFirewallApplyToArrayInput interface {
	pulumi.Input

	ToGetFirewallApplyToArrayOutput() GetFirewallApplyToArrayOutput
	ToGetFirewallApplyToArrayOutputWithContext(context.Context) GetFirewallApplyToArrayOutput
}

type GetFirewallApplyToArray []GetFirewallApplyToInput

func (GetFirewallApplyToArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallApplyTo)(nil)).Elem()
}

func (i GetFirewallApplyToArray) ToGetFirewallApplyToArrayOutput() GetFirewallApplyToArrayOutput {
	return i.ToGetFirewallApplyToArrayOutputWithContext(context.Background())
}

func (i GetFirewallApplyToArray) ToGetFirewallApplyToArrayOutputWithContext(ctx context.Context) GetFirewallApplyToArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallApplyToArrayOutput)
}

type GetFirewallApplyToOutput struct{ *pulumi.OutputState }

func (GetFirewallApplyToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallApplyTo)(nil)).Elem()
}

func (o GetFirewallApplyToOutput) ToGetFirewallApplyToOutput() GetFirewallApplyToOutput {
	return o
}

func (o GetFirewallApplyToOutput) ToGetFirewallApplyToOutputWithContext(ctx context.Context) GetFirewallApplyToOutput {
	return o
}

// (string) Label Selector to select servers the firewall is applied to. Empty if a server is directly
// referenced
func (o GetFirewallApplyToOutput) LabelSelector() pulumi.StringOutput {
	return o.ApplyT(func(v GetFirewallApplyTo) string { return v.LabelSelector }).(pulumi.StringOutput)
}

// (int) ID of a server where the firewall is applied to. `0` if applied to a label_selector
func (o GetFirewallApplyToOutput) Server() pulumi.IntOutput {
	return o.ApplyT(func(v GetFirewallApplyTo) int { return v.Server }).(pulumi.IntOutput)
}

type GetFirewallApplyToArrayOutput struct{ *pulumi.OutputState }

func (GetFirewallApplyToArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallApplyTo)(nil)).Elem()
}

func (o GetFirewallApplyToArrayOutput) ToGetFirewallApplyToArrayOutput() GetFirewallApplyToArrayOutput {
	return o
}

func (o GetFirewallApplyToArrayOutput) ToGetFirewallApplyToArrayOutputWithContext(ctx context.Context) GetFirewallApplyToArrayOutput {
	return o
}

func (o GetFirewallApplyToArrayOutput) Index(i pulumi.IntInput) GetFirewallApplyToOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFirewallApplyTo {
		return vs[0].([]GetFirewallApplyTo)[vs[1].(int)]
	}).(GetFirewallApplyToOutput)
}

type GetFirewallRule struct {
	// (Optional, string) Description of the firewall rule
	Description *string `pulumi:"description"`
	// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)
	DestinationIps []string `pulumi:"destinationIps"`
	// (Required, string) Direction of the Firewall Rule. `in`, `out`
	Direction string `pulumi:"direction"`
	// (Required, string) Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`
	Port *string `pulumi:"port"`
	// (Required, string) Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
	Protocol *string `pulumi:"protocol"`
	// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)
	SourceIps []string `pulumi:"sourceIps"`
}

// GetFirewallRuleInput is an input type that accepts GetFirewallRuleArgs and GetFirewallRuleOutput values.
// You can construct a concrete instance of `GetFirewallRuleInput` via:
//
//          GetFirewallRuleArgs{...}
type GetFirewallRuleInput interface {
	pulumi.Input

	ToGetFirewallRuleOutput() GetFirewallRuleOutput
	ToGetFirewallRuleOutputWithContext(context.Context) GetFirewallRuleOutput
}

type GetFirewallRuleArgs struct {
	// (Optional, string) Description of the firewall rule
	Description pulumi.StringPtrInput `pulumi:"description"`
	// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)
	DestinationIps pulumi.StringArrayInput `pulumi:"destinationIps"`
	// (Required, string) Direction of the Firewall Rule. `in`, `out`
	Direction pulumi.StringInput `pulumi:"direction"`
	// (Required, string) Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`
	Port pulumi.StringPtrInput `pulumi:"port"`
	// (Required, string) Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)
	SourceIps pulumi.StringArrayInput `pulumi:"sourceIps"`
}

func (GetFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallRule)(nil)).Elem()
}

func (i GetFirewallRuleArgs) ToGetFirewallRuleOutput() GetFirewallRuleOutput {
	return i.ToGetFirewallRuleOutputWithContext(context.Background())
}

func (i GetFirewallRuleArgs) ToGetFirewallRuleOutputWithContext(ctx context.Context) GetFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallRuleOutput)
}

// GetFirewallRuleArrayInput is an input type that accepts GetFirewallRuleArray and GetFirewallRuleArrayOutput values.
// You can construct a concrete instance of `GetFirewallRuleArrayInput` via:
//
//          GetFirewallRuleArray{ GetFirewallRuleArgs{...} }
type GetFirewallRuleArrayInput interface {
	pulumi.Input

	ToGetFirewallRuleArrayOutput() GetFirewallRuleArrayOutput
	ToGetFirewallRuleArrayOutputWithContext(context.Context) GetFirewallRuleArrayOutput
}

type GetFirewallRuleArray []GetFirewallRuleInput

func (GetFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallRule)(nil)).Elem()
}

func (i GetFirewallRuleArray) ToGetFirewallRuleArrayOutput() GetFirewallRuleArrayOutput {
	return i.ToGetFirewallRuleArrayOutputWithContext(context.Background())
}

func (i GetFirewallRuleArray) ToGetFirewallRuleArrayOutputWithContext(ctx context.Context) GetFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallRuleArrayOutput)
}

type GetFirewallRuleOutput struct{ *pulumi.OutputState }

func (GetFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallRule)(nil)).Elem()
}

func (o GetFirewallRuleOutput) ToGetFirewallRuleOutput() GetFirewallRuleOutput {
	return o
}

func (o GetFirewallRuleOutput) ToGetFirewallRuleOutputWithContext(ctx context.Context) GetFirewallRuleOutput {
	return o
}

// (Optional, string) Description of the firewall rule
func (o GetFirewallRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFirewallRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)
func (o GetFirewallRuleOutput) DestinationIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFirewallRule) []string { return v.DestinationIps }).(pulumi.StringArrayOutput)
}

// (Required, string) Direction of the Firewall Rule. `in`, `out`
func (o GetFirewallRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetFirewallRule) string { return v.Direction }).(pulumi.StringOutput)
}

// (Required, string) Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`
func (o GetFirewallRuleOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFirewallRule) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// (Required, string) Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
func (o GetFirewallRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFirewallRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)
func (o GetFirewallRuleOutput) SourceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFirewallRule) []string { return v.SourceIps }).(pulumi.StringArrayOutput)
}

type GetFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (GetFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallRule)(nil)).Elem()
}

func (o GetFirewallRuleArrayOutput) ToGetFirewallRuleArrayOutput() GetFirewallRuleArrayOutput {
	return o
}

func (o GetFirewallRuleArrayOutput) ToGetFirewallRuleArrayOutputWithContext(ctx context.Context) GetFirewallRuleArrayOutput {
	return o
}

func (o GetFirewallRuleArrayOutput) Index(i pulumi.IntInput) GetFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFirewallRule {
		return vs[0].([]GetFirewallRule)[vs[1].(int)]
	}).(GetFirewallRuleOutput)
}

type GetFirewallsFirewall struct {
	ApplyTos []GetFirewallsFirewallApplyTo `pulumi:"applyTos"`
	Id       *int                          `pulumi:"id"`
	Labels   map[string]interface{}        `pulumi:"labels"`
	Name     string                        `pulumi:"name"`
	Rules    []GetFirewallsFirewallRule    `pulumi:"rules"`
}

// GetFirewallsFirewallInput is an input type that accepts GetFirewallsFirewallArgs and GetFirewallsFirewallOutput values.
// You can construct a concrete instance of `GetFirewallsFirewallInput` via:
//
//          GetFirewallsFirewallArgs{...}
type GetFirewallsFirewallInput interface {
	pulumi.Input

	ToGetFirewallsFirewallOutput() GetFirewallsFirewallOutput
	ToGetFirewallsFirewallOutputWithContext(context.Context) GetFirewallsFirewallOutput
}

type GetFirewallsFirewallArgs struct {
	ApplyTos GetFirewallsFirewallApplyToArrayInput `pulumi:"applyTos"`
	Id       pulumi.IntPtrInput                    `pulumi:"id"`
	Labels   pulumi.MapInput                       `pulumi:"labels"`
	Name     pulumi.StringInput                    `pulumi:"name"`
	Rules    GetFirewallsFirewallRuleArrayInput    `pulumi:"rules"`
}

func (GetFirewallsFirewallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallsFirewall)(nil)).Elem()
}

func (i GetFirewallsFirewallArgs) ToGetFirewallsFirewallOutput() GetFirewallsFirewallOutput {
	return i.ToGetFirewallsFirewallOutputWithContext(context.Background())
}

func (i GetFirewallsFirewallArgs) ToGetFirewallsFirewallOutputWithContext(ctx context.Context) GetFirewallsFirewallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallsFirewallOutput)
}

// GetFirewallsFirewallArrayInput is an input type that accepts GetFirewallsFirewallArray and GetFirewallsFirewallArrayOutput values.
// You can construct a concrete instance of `GetFirewallsFirewallArrayInput` via:
//
//          GetFirewallsFirewallArray{ GetFirewallsFirewallArgs{...} }
type GetFirewallsFirewallArrayInput interface {
	pulumi.Input

	ToGetFirewallsFirewallArrayOutput() GetFirewallsFirewallArrayOutput
	ToGetFirewallsFirewallArrayOutputWithContext(context.Context) GetFirewallsFirewallArrayOutput
}

type GetFirewallsFirewallArray []GetFirewallsFirewallInput

func (GetFirewallsFirewallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallsFirewall)(nil)).Elem()
}

func (i GetFirewallsFirewallArray) ToGetFirewallsFirewallArrayOutput() GetFirewallsFirewallArrayOutput {
	return i.ToGetFirewallsFirewallArrayOutputWithContext(context.Background())
}

func (i GetFirewallsFirewallArray) ToGetFirewallsFirewallArrayOutputWithContext(ctx context.Context) GetFirewallsFirewallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallsFirewallArrayOutput)
}

type GetFirewallsFirewallOutput struct{ *pulumi.OutputState }

func (GetFirewallsFirewallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallsFirewall)(nil)).Elem()
}

func (o GetFirewallsFirewallOutput) ToGetFirewallsFirewallOutput() GetFirewallsFirewallOutput {
	return o
}

func (o GetFirewallsFirewallOutput) ToGetFirewallsFirewallOutputWithContext(ctx context.Context) GetFirewallsFirewallOutput {
	return o
}

func (o GetFirewallsFirewallOutput) ApplyTos() GetFirewallsFirewallApplyToArrayOutput {
	return o.ApplyT(func(v GetFirewallsFirewall) []GetFirewallsFirewallApplyTo { return v.ApplyTos }).(GetFirewallsFirewallApplyToArrayOutput)
}

func (o GetFirewallsFirewallOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFirewallsFirewall) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o GetFirewallsFirewallOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetFirewallsFirewall) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetFirewallsFirewallOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFirewallsFirewall) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetFirewallsFirewallOutput) Rules() GetFirewallsFirewallRuleArrayOutput {
	return o.ApplyT(func(v GetFirewallsFirewall) []GetFirewallsFirewallRule { return v.Rules }).(GetFirewallsFirewallRuleArrayOutput)
}

type GetFirewallsFirewallArrayOutput struct{ *pulumi.OutputState }

func (GetFirewallsFirewallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallsFirewall)(nil)).Elem()
}

func (o GetFirewallsFirewallArrayOutput) ToGetFirewallsFirewallArrayOutput() GetFirewallsFirewallArrayOutput {
	return o
}

func (o GetFirewallsFirewallArrayOutput) ToGetFirewallsFirewallArrayOutputWithContext(ctx context.Context) GetFirewallsFirewallArrayOutput {
	return o
}

func (o GetFirewallsFirewallArrayOutput) Index(i pulumi.IntInput) GetFirewallsFirewallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFirewallsFirewall {
		return vs[0].([]GetFirewallsFirewall)[vs[1].(int)]
	}).(GetFirewallsFirewallOutput)
}

type GetFirewallsFirewallApplyTo struct {
	LabelSelector string `pulumi:"labelSelector"`
	Server        int    `pulumi:"server"`
}

// GetFirewallsFirewallApplyToInput is an input type that accepts GetFirewallsFirewallApplyToArgs and GetFirewallsFirewallApplyToOutput values.
// You can construct a concrete instance of `GetFirewallsFirewallApplyToInput` via:
//
//          GetFirewallsFirewallApplyToArgs{...}
type GetFirewallsFirewallApplyToInput interface {
	pulumi.Input

	ToGetFirewallsFirewallApplyToOutput() GetFirewallsFirewallApplyToOutput
	ToGetFirewallsFirewallApplyToOutputWithContext(context.Context) GetFirewallsFirewallApplyToOutput
}

type GetFirewallsFirewallApplyToArgs struct {
	LabelSelector pulumi.StringInput `pulumi:"labelSelector"`
	Server        pulumi.IntInput    `pulumi:"server"`
}

func (GetFirewallsFirewallApplyToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallsFirewallApplyTo)(nil)).Elem()
}

func (i GetFirewallsFirewallApplyToArgs) ToGetFirewallsFirewallApplyToOutput() GetFirewallsFirewallApplyToOutput {
	return i.ToGetFirewallsFirewallApplyToOutputWithContext(context.Background())
}

func (i GetFirewallsFirewallApplyToArgs) ToGetFirewallsFirewallApplyToOutputWithContext(ctx context.Context) GetFirewallsFirewallApplyToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallsFirewallApplyToOutput)
}

// GetFirewallsFirewallApplyToArrayInput is an input type that accepts GetFirewallsFirewallApplyToArray and GetFirewallsFirewallApplyToArrayOutput values.
// You can construct a concrete instance of `GetFirewallsFirewallApplyToArrayInput` via:
//
//          GetFirewallsFirewallApplyToArray{ GetFirewallsFirewallApplyToArgs{...} }
type GetFirewallsFirewallApplyToArrayInput interface {
	pulumi.Input

	ToGetFirewallsFirewallApplyToArrayOutput() GetFirewallsFirewallApplyToArrayOutput
	ToGetFirewallsFirewallApplyToArrayOutputWithContext(context.Context) GetFirewallsFirewallApplyToArrayOutput
}

type GetFirewallsFirewallApplyToArray []GetFirewallsFirewallApplyToInput

func (GetFirewallsFirewallApplyToArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallsFirewallApplyTo)(nil)).Elem()
}

func (i GetFirewallsFirewallApplyToArray) ToGetFirewallsFirewallApplyToArrayOutput() GetFirewallsFirewallApplyToArrayOutput {
	return i.ToGetFirewallsFirewallApplyToArrayOutputWithContext(context.Background())
}

func (i GetFirewallsFirewallApplyToArray) ToGetFirewallsFirewallApplyToArrayOutputWithContext(ctx context.Context) GetFirewallsFirewallApplyToArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallsFirewallApplyToArrayOutput)
}

type GetFirewallsFirewallApplyToOutput struct{ *pulumi.OutputState }

func (GetFirewallsFirewallApplyToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallsFirewallApplyTo)(nil)).Elem()
}

func (o GetFirewallsFirewallApplyToOutput) ToGetFirewallsFirewallApplyToOutput() GetFirewallsFirewallApplyToOutput {
	return o
}

func (o GetFirewallsFirewallApplyToOutput) ToGetFirewallsFirewallApplyToOutputWithContext(ctx context.Context) GetFirewallsFirewallApplyToOutput {
	return o
}

func (o GetFirewallsFirewallApplyToOutput) LabelSelector() pulumi.StringOutput {
	return o.ApplyT(func(v GetFirewallsFirewallApplyTo) string { return v.LabelSelector }).(pulumi.StringOutput)
}

func (o GetFirewallsFirewallApplyToOutput) Server() pulumi.IntOutput {
	return o.ApplyT(func(v GetFirewallsFirewallApplyTo) int { return v.Server }).(pulumi.IntOutput)
}

type GetFirewallsFirewallApplyToArrayOutput struct{ *pulumi.OutputState }

func (GetFirewallsFirewallApplyToArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallsFirewallApplyTo)(nil)).Elem()
}

func (o GetFirewallsFirewallApplyToArrayOutput) ToGetFirewallsFirewallApplyToArrayOutput() GetFirewallsFirewallApplyToArrayOutput {
	return o
}

func (o GetFirewallsFirewallApplyToArrayOutput) ToGetFirewallsFirewallApplyToArrayOutputWithContext(ctx context.Context) GetFirewallsFirewallApplyToArrayOutput {
	return o
}

func (o GetFirewallsFirewallApplyToArrayOutput) Index(i pulumi.IntInput) GetFirewallsFirewallApplyToOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFirewallsFirewallApplyTo {
		return vs[0].([]GetFirewallsFirewallApplyTo)[vs[1].(int)]
	}).(GetFirewallsFirewallApplyToOutput)
}

type GetFirewallsFirewallRule struct {
	Description    *string  `pulumi:"description"`
	DestinationIps []string `pulumi:"destinationIps"`
	Direction      string   `pulumi:"direction"`
	Port           *string  `pulumi:"port"`
	Protocol       *string  `pulumi:"protocol"`
	SourceIps      []string `pulumi:"sourceIps"`
}

// GetFirewallsFirewallRuleInput is an input type that accepts GetFirewallsFirewallRuleArgs and GetFirewallsFirewallRuleOutput values.
// You can construct a concrete instance of `GetFirewallsFirewallRuleInput` via:
//
//          GetFirewallsFirewallRuleArgs{...}
type GetFirewallsFirewallRuleInput interface {
	pulumi.Input

	ToGetFirewallsFirewallRuleOutput() GetFirewallsFirewallRuleOutput
	ToGetFirewallsFirewallRuleOutputWithContext(context.Context) GetFirewallsFirewallRuleOutput
}

type GetFirewallsFirewallRuleArgs struct {
	Description    pulumi.StringPtrInput   `pulumi:"description"`
	DestinationIps pulumi.StringArrayInput `pulumi:"destinationIps"`
	Direction      pulumi.StringInput      `pulumi:"direction"`
	Port           pulumi.StringPtrInput   `pulumi:"port"`
	Protocol       pulumi.StringPtrInput   `pulumi:"protocol"`
	SourceIps      pulumi.StringArrayInput `pulumi:"sourceIps"`
}

func (GetFirewallsFirewallRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallsFirewallRule)(nil)).Elem()
}

func (i GetFirewallsFirewallRuleArgs) ToGetFirewallsFirewallRuleOutput() GetFirewallsFirewallRuleOutput {
	return i.ToGetFirewallsFirewallRuleOutputWithContext(context.Background())
}

func (i GetFirewallsFirewallRuleArgs) ToGetFirewallsFirewallRuleOutputWithContext(ctx context.Context) GetFirewallsFirewallRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallsFirewallRuleOutput)
}

// GetFirewallsFirewallRuleArrayInput is an input type that accepts GetFirewallsFirewallRuleArray and GetFirewallsFirewallRuleArrayOutput values.
// You can construct a concrete instance of `GetFirewallsFirewallRuleArrayInput` via:
//
//          GetFirewallsFirewallRuleArray{ GetFirewallsFirewallRuleArgs{...} }
type GetFirewallsFirewallRuleArrayInput interface {
	pulumi.Input

	ToGetFirewallsFirewallRuleArrayOutput() GetFirewallsFirewallRuleArrayOutput
	ToGetFirewallsFirewallRuleArrayOutputWithContext(context.Context) GetFirewallsFirewallRuleArrayOutput
}

type GetFirewallsFirewallRuleArray []GetFirewallsFirewallRuleInput

func (GetFirewallsFirewallRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallsFirewallRule)(nil)).Elem()
}

func (i GetFirewallsFirewallRuleArray) ToGetFirewallsFirewallRuleArrayOutput() GetFirewallsFirewallRuleArrayOutput {
	return i.ToGetFirewallsFirewallRuleArrayOutputWithContext(context.Background())
}

func (i GetFirewallsFirewallRuleArray) ToGetFirewallsFirewallRuleArrayOutputWithContext(ctx context.Context) GetFirewallsFirewallRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFirewallsFirewallRuleArrayOutput)
}

type GetFirewallsFirewallRuleOutput struct{ *pulumi.OutputState }

func (GetFirewallsFirewallRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFirewallsFirewallRule)(nil)).Elem()
}

func (o GetFirewallsFirewallRuleOutput) ToGetFirewallsFirewallRuleOutput() GetFirewallsFirewallRuleOutput {
	return o
}

func (o GetFirewallsFirewallRuleOutput) ToGetFirewallsFirewallRuleOutputWithContext(ctx context.Context) GetFirewallsFirewallRuleOutput {
	return o
}

func (o GetFirewallsFirewallRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFirewallsFirewallRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GetFirewallsFirewallRuleOutput) DestinationIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFirewallsFirewallRule) []string { return v.DestinationIps }).(pulumi.StringArrayOutput)
}

func (o GetFirewallsFirewallRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetFirewallsFirewallRule) string { return v.Direction }).(pulumi.StringOutput)
}

func (o GetFirewallsFirewallRuleOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFirewallsFirewallRule) *string { return v.Port }).(pulumi.StringPtrOutput)
}

func (o GetFirewallsFirewallRuleOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFirewallsFirewallRule) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o GetFirewallsFirewallRuleOutput) SourceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFirewallsFirewallRule) []string { return v.SourceIps }).(pulumi.StringArrayOutput)
}

type GetFirewallsFirewallRuleArrayOutput struct{ *pulumi.OutputState }

func (GetFirewallsFirewallRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFirewallsFirewallRule)(nil)).Elem()
}

func (o GetFirewallsFirewallRuleArrayOutput) ToGetFirewallsFirewallRuleArrayOutput() GetFirewallsFirewallRuleArrayOutput {
	return o
}

func (o GetFirewallsFirewallRuleArrayOutput) ToGetFirewallsFirewallRuleArrayOutputWithContext(ctx context.Context) GetFirewallsFirewallRuleArrayOutput {
	return o
}

func (o GetFirewallsFirewallRuleArrayOutput) Index(i pulumi.IntInput) GetFirewallsFirewallRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFirewallsFirewallRule {
		return vs[0].([]GetFirewallsFirewallRule)[vs[1].(int)]
	}).(GetFirewallsFirewallRuleOutput)
}

type GetFloatingIpsFloatingIp struct {
	DeleteProtection bool                   `pulumi:"deleteProtection"`
	Description      string                 `pulumi:"description"`
	HomeLocation     string                 `pulumi:"homeLocation"`
	Id               int                    `pulumi:"id"`
	IpAddress        string                 `pulumi:"ipAddress"`
	IpNetwork        string                 `pulumi:"ipNetwork"`
	Labels           map[string]interface{} `pulumi:"labels"`
	Name             *string                `pulumi:"name"`
	ServerId         int                    `pulumi:"serverId"`
	Type             string                 `pulumi:"type"`
}

// GetFloatingIpsFloatingIpInput is an input type that accepts GetFloatingIpsFloatingIpArgs and GetFloatingIpsFloatingIpOutput values.
// You can construct a concrete instance of `GetFloatingIpsFloatingIpInput` via:
//
//          GetFloatingIpsFloatingIpArgs{...}
type GetFloatingIpsFloatingIpInput interface {
	pulumi.Input

	ToGetFloatingIpsFloatingIpOutput() GetFloatingIpsFloatingIpOutput
	ToGetFloatingIpsFloatingIpOutputWithContext(context.Context) GetFloatingIpsFloatingIpOutput
}

type GetFloatingIpsFloatingIpArgs struct {
	DeleteProtection pulumi.BoolInput      `pulumi:"deleteProtection"`
	Description      pulumi.StringInput    `pulumi:"description"`
	HomeLocation     pulumi.StringInput    `pulumi:"homeLocation"`
	Id               pulumi.IntInput       `pulumi:"id"`
	IpAddress        pulumi.StringInput    `pulumi:"ipAddress"`
	IpNetwork        pulumi.StringInput    `pulumi:"ipNetwork"`
	Labels           pulumi.MapInput       `pulumi:"labels"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	ServerId         pulumi.IntInput       `pulumi:"serverId"`
	Type             pulumi.StringInput    `pulumi:"type"`
}

func (GetFloatingIpsFloatingIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFloatingIpsFloatingIp)(nil)).Elem()
}

func (i GetFloatingIpsFloatingIpArgs) ToGetFloatingIpsFloatingIpOutput() GetFloatingIpsFloatingIpOutput {
	return i.ToGetFloatingIpsFloatingIpOutputWithContext(context.Background())
}

func (i GetFloatingIpsFloatingIpArgs) ToGetFloatingIpsFloatingIpOutputWithContext(ctx context.Context) GetFloatingIpsFloatingIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFloatingIpsFloatingIpOutput)
}

// GetFloatingIpsFloatingIpArrayInput is an input type that accepts GetFloatingIpsFloatingIpArray and GetFloatingIpsFloatingIpArrayOutput values.
// You can construct a concrete instance of `GetFloatingIpsFloatingIpArrayInput` via:
//
//          GetFloatingIpsFloatingIpArray{ GetFloatingIpsFloatingIpArgs{...} }
type GetFloatingIpsFloatingIpArrayInput interface {
	pulumi.Input

	ToGetFloatingIpsFloatingIpArrayOutput() GetFloatingIpsFloatingIpArrayOutput
	ToGetFloatingIpsFloatingIpArrayOutputWithContext(context.Context) GetFloatingIpsFloatingIpArrayOutput
}

type GetFloatingIpsFloatingIpArray []GetFloatingIpsFloatingIpInput

func (GetFloatingIpsFloatingIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFloatingIpsFloatingIp)(nil)).Elem()
}

func (i GetFloatingIpsFloatingIpArray) ToGetFloatingIpsFloatingIpArrayOutput() GetFloatingIpsFloatingIpArrayOutput {
	return i.ToGetFloatingIpsFloatingIpArrayOutputWithContext(context.Background())
}

func (i GetFloatingIpsFloatingIpArray) ToGetFloatingIpsFloatingIpArrayOutputWithContext(ctx context.Context) GetFloatingIpsFloatingIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFloatingIpsFloatingIpArrayOutput)
}

type GetFloatingIpsFloatingIpOutput struct{ *pulumi.OutputState }

func (GetFloatingIpsFloatingIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFloatingIpsFloatingIp)(nil)).Elem()
}

func (o GetFloatingIpsFloatingIpOutput) ToGetFloatingIpsFloatingIpOutput() GetFloatingIpsFloatingIpOutput {
	return o
}

func (o GetFloatingIpsFloatingIpOutput) ToGetFloatingIpsFloatingIpOutputWithContext(ctx context.Context) GetFloatingIpsFloatingIpOutput {
	return o
}

func (o GetFloatingIpsFloatingIpOutput) DeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) bool { return v.DeleteProtection }).(pulumi.BoolOutput)
}

func (o GetFloatingIpsFloatingIpOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetFloatingIpsFloatingIpOutput) HomeLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) string { return v.HomeLocation }).(pulumi.StringOutput)
}

func (o GetFloatingIpsFloatingIpOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetFloatingIpsFloatingIpOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o GetFloatingIpsFloatingIpOutput) IpNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) string { return v.IpNetwork }).(pulumi.StringOutput)
}

func (o GetFloatingIpsFloatingIpOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetFloatingIpsFloatingIpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetFloatingIpsFloatingIpOutput) ServerId() pulumi.IntOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) int { return v.ServerId }).(pulumi.IntOutput)
}

func (o GetFloatingIpsFloatingIpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFloatingIpsFloatingIp) string { return v.Type }).(pulumi.StringOutput)
}

type GetFloatingIpsFloatingIpArrayOutput struct{ *pulumi.OutputState }

func (GetFloatingIpsFloatingIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFloatingIpsFloatingIp)(nil)).Elem()
}

func (o GetFloatingIpsFloatingIpArrayOutput) ToGetFloatingIpsFloatingIpArrayOutput() GetFloatingIpsFloatingIpArrayOutput {
	return o
}

func (o GetFloatingIpsFloatingIpArrayOutput) ToGetFloatingIpsFloatingIpArrayOutputWithContext(ctx context.Context) GetFloatingIpsFloatingIpArrayOutput {
	return o
}

func (o GetFloatingIpsFloatingIpArrayOutput) Index(i pulumi.IntInput) GetFloatingIpsFloatingIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFloatingIpsFloatingIp {
		return vs[0].([]GetFloatingIpsFloatingIp)[vs[1].(int)]
	}).(GetFloatingIpsFloatingIpOutput)
}

type GetImagesImage struct {
	Created     string                 `pulumi:"created"`
	Deprecated  string                 `pulumi:"deprecated"`
	Description string                 `pulumi:"description"`
	Id          int                    `pulumi:"id"`
	Labels      map[string]interface{} `pulumi:"labels"`
	Name        string                 `pulumi:"name"`
	OsFlavor    string                 `pulumi:"osFlavor"`
	OsVersion   string                 `pulumi:"osVersion"`
	RapidDeploy bool                   `pulumi:"rapidDeploy"`
	// Deprecated: Please use the with_selector property instead.
	Selector *string `pulumi:"selector"`
	Type     string  `pulumi:"type"`
}

// GetImagesImageInput is an input type that accepts GetImagesImageArgs and GetImagesImageOutput values.
// You can construct a concrete instance of `GetImagesImageInput` via:
//
//          GetImagesImageArgs{...}
type GetImagesImageInput interface {
	pulumi.Input

	ToGetImagesImageOutput() GetImagesImageOutput
	ToGetImagesImageOutputWithContext(context.Context) GetImagesImageOutput
}

type GetImagesImageArgs struct {
	Created     pulumi.StringInput `pulumi:"created"`
	Deprecated  pulumi.StringInput `pulumi:"deprecated"`
	Description pulumi.StringInput `pulumi:"description"`
	Id          pulumi.IntInput    `pulumi:"id"`
	Labels      pulumi.MapInput    `pulumi:"labels"`
	Name        pulumi.StringInput `pulumi:"name"`
	OsFlavor    pulumi.StringInput `pulumi:"osFlavor"`
	OsVersion   pulumi.StringInput `pulumi:"osVersion"`
	RapidDeploy pulumi.BoolInput   `pulumi:"rapidDeploy"`
	// Deprecated: Please use the with_selector property instead.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	Type     pulumi.StringInput    `pulumi:"type"`
}

func (GetImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImage)(nil)).Elem()
}

func (i GetImagesImageArgs) ToGetImagesImageOutput() GetImagesImageOutput {
	return i.ToGetImagesImageOutputWithContext(context.Background())
}

func (i GetImagesImageArgs) ToGetImagesImageOutputWithContext(ctx context.Context) GetImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageOutput)
}

// GetImagesImageArrayInput is an input type that accepts GetImagesImageArray and GetImagesImageArrayOutput values.
// You can construct a concrete instance of `GetImagesImageArrayInput` via:
//
//          GetImagesImageArray{ GetImagesImageArgs{...} }
type GetImagesImageArrayInput interface {
	pulumi.Input

	ToGetImagesImageArrayOutput() GetImagesImageArrayOutput
	ToGetImagesImageArrayOutputWithContext(context.Context) GetImagesImageArrayOutput
}

type GetImagesImageArray []GetImagesImageInput

func (GetImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImage)(nil)).Elem()
}

func (i GetImagesImageArray) ToGetImagesImageArrayOutput() GetImagesImageArrayOutput {
	return i.ToGetImagesImageArrayOutputWithContext(context.Background())
}

func (i GetImagesImageArray) ToGetImagesImageArrayOutputWithContext(ctx context.Context) GetImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageArrayOutput)
}

type GetImagesImageOutput struct{ *pulumi.OutputState }

func (GetImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImage)(nil)).Elem()
}

func (o GetImagesImageOutput) ToGetImagesImageOutput() GetImagesImageOutput {
	return o
}

func (o GetImagesImageOutput) ToGetImagesImageOutputWithContext(ctx context.Context) GetImagesImageOutput {
	return o
}

func (o GetImagesImageOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Created }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) Deprecated() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Deprecated }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetImagesImage) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetImagesImageOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetImagesImage) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetImagesImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) OsFlavor() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.OsFlavor }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.OsVersion }).(pulumi.StringOutput)
}

func (o GetImagesImageOutput) RapidDeploy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImagesImage) bool { return v.RapidDeploy }).(pulumi.BoolOutput)
}

// Deprecated: Please use the with_selector property instead.
func (o GetImagesImageOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesImage) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

func (o GetImagesImageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Type }).(pulumi.StringOutput)
}

type GetImagesImageArrayOutput struct{ *pulumi.OutputState }

func (GetImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImage)(nil)).Elem()
}

func (o GetImagesImageArrayOutput) ToGetImagesImageArrayOutput() GetImagesImageArrayOutput {
	return o
}

func (o GetImagesImageArrayOutput) ToGetImagesImageArrayOutputWithContext(ctx context.Context) GetImagesImageArrayOutput {
	return o
}

func (o GetImagesImageArrayOutput) Index(i pulumi.IntInput) GetImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImagesImage {
		return vs[0].([]GetImagesImage)[vs[1].(int)]
	}).(GetImagesImageOutput)
}

type GetLoadBalancerAlgorithm struct {
	// (string) Type of the target. `server` or `labelSelector`
	Type string `pulumi:"type"`
}

// GetLoadBalancerAlgorithmInput is an input type that accepts GetLoadBalancerAlgorithmArgs and GetLoadBalancerAlgorithmOutput values.
// You can construct a concrete instance of `GetLoadBalancerAlgorithmInput` via:
//
//          GetLoadBalancerAlgorithmArgs{...}
type GetLoadBalancerAlgorithmInput interface {
	pulumi.Input

	ToGetLoadBalancerAlgorithmOutput() GetLoadBalancerAlgorithmOutput
	ToGetLoadBalancerAlgorithmOutputWithContext(context.Context) GetLoadBalancerAlgorithmOutput
}

type GetLoadBalancerAlgorithmArgs struct {
	// (string) Type of the target. `server` or `labelSelector`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetLoadBalancerAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerAlgorithm)(nil)).Elem()
}

func (i GetLoadBalancerAlgorithmArgs) ToGetLoadBalancerAlgorithmOutput() GetLoadBalancerAlgorithmOutput {
	return i.ToGetLoadBalancerAlgorithmOutputWithContext(context.Background())
}

func (i GetLoadBalancerAlgorithmArgs) ToGetLoadBalancerAlgorithmOutputWithContext(ctx context.Context) GetLoadBalancerAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerAlgorithmOutput)
}

// GetLoadBalancerAlgorithmArrayInput is an input type that accepts GetLoadBalancerAlgorithmArray and GetLoadBalancerAlgorithmArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerAlgorithmArrayInput` via:
//
//          GetLoadBalancerAlgorithmArray{ GetLoadBalancerAlgorithmArgs{...} }
type GetLoadBalancerAlgorithmArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerAlgorithmArrayOutput() GetLoadBalancerAlgorithmArrayOutput
	ToGetLoadBalancerAlgorithmArrayOutputWithContext(context.Context) GetLoadBalancerAlgorithmArrayOutput
}

type GetLoadBalancerAlgorithmArray []GetLoadBalancerAlgorithmInput

func (GetLoadBalancerAlgorithmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerAlgorithm)(nil)).Elem()
}

func (i GetLoadBalancerAlgorithmArray) ToGetLoadBalancerAlgorithmArrayOutput() GetLoadBalancerAlgorithmArrayOutput {
	return i.ToGetLoadBalancerAlgorithmArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerAlgorithmArray) ToGetLoadBalancerAlgorithmArrayOutputWithContext(ctx context.Context) GetLoadBalancerAlgorithmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerAlgorithmArrayOutput)
}

type GetLoadBalancerAlgorithmOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerAlgorithm)(nil)).Elem()
}

func (o GetLoadBalancerAlgorithmOutput) ToGetLoadBalancerAlgorithmOutput() GetLoadBalancerAlgorithmOutput {
	return o
}

func (o GetLoadBalancerAlgorithmOutput) ToGetLoadBalancerAlgorithmOutputWithContext(ctx context.Context) GetLoadBalancerAlgorithmOutput {
	return o
}

// (string) Type of the target. `server` or `labelSelector`
func (o GetLoadBalancerAlgorithmOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerAlgorithm) string { return v.Type }).(pulumi.StringOutput)
}

type GetLoadBalancerAlgorithmArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerAlgorithmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerAlgorithm)(nil)).Elem()
}

func (o GetLoadBalancerAlgorithmArrayOutput) ToGetLoadBalancerAlgorithmArrayOutput() GetLoadBalancerAlgorithmArrayOutput {
	return o
}

func (o GetLoadBalancerAlgorithmArrayOutput) ToGetLoadBalancerAlgorithmArrayOutputWithContext(ctx context.Context) GetLoadBalancerAlgorithmArrayOutput {
	return o
}

func (o GetLoadBalancerAlgorithmArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerAlgorithmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerAlgorithm {
		return vs[0].([]GetLoadBalancerAlgorithm)[vs[1].(int)]
	}).(GetLoadBalancerAlgorithmOutput)
}

type GetLoadBalancerServiceType struct {
	// (int) Port the service connects to the targets on. Can be everything between `1` and `65535`.
	DestinationPort int `pulumi:"destinationPort"`
	// (list) List of http configurations when `protocol` is `http` or `https`.
	HealthChecks []GetLoadBalancerServiceHealthCheck `pulumi:"healthChecks"`
	// (list) List of http configurations when `protocol` is `http` or `https`.
	Https []GetLoadBalancerServiceHttp `pulumi:"https"`
	// (int) Port the service listen on` . Can be everything between  `1`and`65535`. Must be unique per Load Balancer.
	ListenPort int `pulumi:"listenPort"`
	// (string) Protocol the health check uses. `http`, `https` or `tcp`
	Protocol string `pulumi:"protocol"`
	// (bool) Enable proxyprotocol.
	Proxyprotocol bool `pulumi:"proxyprotocol"`
}

// GetLoadBalancerServiceTypeInput is an input type that accepts GetLoadBalancerServiceTypeArgs and GetLoadBalancerServiceTypeOutput values.
// You can construct a concrete instance of `GetLoadBalancerServiceTypeInput` via:
//
//          GetLoadBalancerServiceTypeArgs{...}
type GetLoadBalancerServiceTypeInput interface {
	pulumi.Input

	ToGetLoadBalancerServiceTypeOutput() GetLoadBalancerServiceTypeOutput
	ToGetLoadBalancerServiceTypeOutputWithContext(context.Context) GetLoadBalancerServiceTypeOutput
}

type GetLoadBalancerServiceTypeArgs struct {
	// (int) Port the service connects to the targets on. Can be everything between `1` and `65535`.
	DestinationPort pulumi.IntInput `pulumi:"destinationPort"`
	// (list) List of http configurations when `protocol` is `http` or `https`.
	HealthChecks GetLoadBalancerServiceHealthCheckArrayInput `pulumi:"healthChecks"`
	// (list) List of http configurations when `protocol` is `http` or `https`.
	Https GetLoadBalancerServiceHttpArrayInput `pulumi:"https"`
	// (int) Port the service listen on` . Can be everything between  `1`and`65535`. Must be unique per Load Balancer.
	ListenPort pulumi.IntInput `pulumi:"listenPort"`
	// (string) Protocol the health check uses. `http`, `https` or `tcp`
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (bool) Enable proxyprotocol.
	Proxyprotocol pulumi.BoolInput `pulumi:"proxyprotocol"`
}

func (GetLoadBalancerServiceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerServiceType)(nil)).Elem()
}

func (i GetLoadBalancerServiceTypeArgs) ToGetLoadBalancerServiceTypeOutput() GetLoadBalancerServiceTypeOutput {
	return i.ToGetLoadBalancerServiceTypeOutputWithContext(context.Background())
}

func (i GetLoadBalancerServiceTypeArgs) ToGetLoadBalancerServiceTypeOutputWithContext(ctx context.Context) GetLoadBalancerServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerServiceTypeOutput)
}

// GetLoadBalancerServiceTypeArrayInput is an input type that accepts GetLoadBalancerServiceTypeArray and GetLoadBalancerServiceTypeArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerServiceTypeArrayInput` via:
//
//          GetLoadBalancerServiceTypeArray{ GetLoadBalancerServiceTypeArgs{...} }
type GetLoadBalancerServiceTypeArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerServiceTypeArrayOutput() GetLoadBalancerServiceTypeArrayOutput
	ToGetLoadBalancerServiceTypeArrayOutputWithContext(context.Context) GetLoadBalancerServiceTypeArrayOutput
}

type GetLoadBalancerServiceTypeArray []GetLoadBalancerServiceTypeInput

func (GetLoadBalancerServiceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerServiceType)(nil)).Elem()
}

func (i GetLoadBalancerServiceTypeArray) ToGetLoadBalancerServiceTypeArrayOutput() GetLoadBalancerServiceTypeArrayOutput {
	return i.ToGetLoadBalancerServiceTypeArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerServiceTypeArray) ToGetLoadBalancerServiceTypeArrayOutputWithContext(ctx context.Context) GetLoadBalancerServiceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerServiceTypeArrayOutput)
}

type GetLoadBalancerServiceTypeOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerServiceType)(nil)).Elem()
}

func (o GetLoadBalancerServiceTypeOutput) ToGetLoadBalancerServiceTypeOutput() GetLoadBalancerServiceTypeOutput {
	return o
}

func (o GetLoadBalancerServiceTypeOutput) ToGetLoadBalancerServiceTypeOutputWithContext(ctx context.Context) GetLoadBalancerServiceTypeOutput {
	return o
}

// (int) Port the service connects to the targets on. Can be everything between `1` and `65535`.
func (o GetLoadBalancerServiceTypeOutput) DestinationPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceType) int { return v.DestinationPort }).(pulumi.IntOutput)
}

// (list) List of http configurations when `protocol` is `http` or `https`.
func (o GetLoadBalancerServiceTypeOutput) HealthChecks() GetLoadBalancerServiceHealthCheckArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceType) []GetLoadBalancerServiceHealthCheck { return v.HealthChecks }).(GetLoadBalancerServiceHealthCheckArrayOutput)
}

// (list) List of http configurations when `protocol` is `http` or `https`.
func (o GetLoadBalancerServiceTypeOutput) Https() GetLoadBalancerServiceHttpArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceType) []GetLoadBalancerServiceHttp { return v.Https }).(GetLoadBalancerServiceHttpArrayOutput)
}

// (int) Port the service listen on` . Can be everything between  `1`and`65535`. Must be unique per Load Balancer.
func (o GetLoadBalancerServiceTypeOutput) ListenPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceType) int { return v.ListenPort }).(pulumi.IntOutput)
}

// (string) Protocol the health check uses. `http`, `https` or `tcp`
func (o GetLoadBalancerServiceTypeOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceType) string { return v.Protocol }).(pulumi.StringOutput)
}

// (bool) Enable proxyprotocol.
func (o GetLoadBalancerServiceTypeOutput) Proxyprotocol() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceType) bool { return v.Proxyprotocol }).(pulumi.BoolOutput)
}

type GetLoadBalancerServiceTypeArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerServiceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerServiceType)(nil)).Elem()
}

func (o GetLoadBalancerServiceTypeArrayOutput) ToGetLoadBalancerServiceTypeArrayOutput() GetLoadBalancerServiceTypeArrayOutput {
	return o
}

func (o GetLoadBalancerServiceTypeArrayOutput) ToGetLoadBalancerServiceTypeArrayOutputWithContext(ctx context.Context) GetLoadBalancerServiceTypeArrayOutput {
	return o
}

func (o GetLoadBalancerServiceTypeArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerServiceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerServiceType {
		return vs[0].([]GetLoadBalancerServiceType)[vs[1].(int)]
	}).(GetLoadBalancerServiceTypeOutput)
}

type GetLoadBalancerServiceHealthCheck struct {
	// (list) List of http configurations when `protocol` is `http` or `https`.
	Https []GetLoadBalancerServiceHealthCheckHttp `pulumi:"https"`
	// (int) Interval how often the health check will be performed, in seconds.
	Interval int `pulumi:"interval"`
	// (int) Port the health check tries to connect to. Can be everything between `1` and `65535`.
	Port int `pulumi:"port"`
	// (string) Protocol the health check uses. `http`, `https` or `tcp`
	Protocol string `pulumi:"protocol"`
	// (int) Number of tries a health check will be performed until a target will be listed as `unhealthy`.
	Retries int `pulumi:"retries"`
	// (int) Timeout when a health check try will be canceled if there is no response, in seconds.
	Timeout int `pulumi:"timeout"`
}

// GetLoadBalancerServiceHealthCheckInput is an input type that accepts GetLoadBalancerServiceHealthCheckArgs and GetLoadBalancerServiceHealthCheckOutput values.
// You can construct a concrete instance of `GetLoadBalancerServiceHealthCheckInput` via:
//
//          GetLoadBalancerServiceHealthCheckArgs{...}
type GetLoadBalancerServiceHealthCheckInput interface {
	pulumi.Input

	ToGetLoadBalancerServiceHealthCheckOutput() GetLoadBalancerServiceHealthCheckOutput
	ToGetLoadBalancerServiceHealthCheckOutputWithContext(context.Context) GetLoadBalancerServiceHealthCheckOutput
}

type GetLoadBalancerServiceHealthCheckArgs struct {
	// (list) List of http configurations when `protocol` is `http` or `https`.
	Https GetLoadBalancerServiceHealthCheckHttpArrayInput `pulumi:"https"`
	// (int) Interval how often the health check will be performed, in seconds.
	Interval pulumi.IntInput `pulumi:"interval"`
	// (int) Port the health check tries to connect to. Can be everything between `1` and `65535`.
	Port pulumi.IntInput `pulumi:"port"`
	// (string) Protocol the health check uses. `http`, `https` or `tcp`
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// (int) Number of tries a health check will be performed until a target will be listed as `unhealthy`.
	Retries pulumi.IntInput `pulumi:"retries"`
	// (int) Timeout when a health check try will be canceled if there is no response, in seconds.
	Timeout pulumi.IntInput `pulumi:"timeout"`
}

func (GetLoadBalancerServiceHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (i GetLoadBalancerServiceHealthCheckArgs) ToGetLoadBalancerServiceHealthCheckOutput() GetLoadBalancerServiceHealthCheckOutput {
	return i.ToGetLoadBalancerServiceHealthCheckOutputWithContext(context.Background())
}

func (i GetLoadBalancerServiceHealthCheckArgs) ToGetLoadBalancerServiceHealthCheckOutputWithContext(ctx context.Context) GetLoadBalancerServiceHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerServiceHealthCheckOutput)
}

// GetLoadBalancerServiceHealthCheckArrayInput is an input type that accepts GetLoadBalancerServiceHealthCheckArray and GetLoadBalancerServiceHealthCheckArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerServiceHealthCheckArrayInput` via:
//
//          GetLoadBalancerServiceHealthCheckArray{ GetLoadBalancerServiceHealthCheckArgs{...} }
type GetLoadBalancerServiceHealthCheckArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerServiceHealthCheckArrayOutput() GetLoadBalancerServiceHealthCheckArrayOutput
	ToGetLoadBalancerServiceHealthCheckArrayOutputWithContext(context.Context) GetLoadBalancerServiceHealthCheckArrayOutput
}

type GetLoadBalancerServiceHealthCheckArray []GetLoadBalancerServiceHealthCheckInput

func (GetLoadBalancerServiceHealthCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (i GetLoadBalancerServiceHealthCheckArray) ToGetLoadBalancerServiceHealthCheckArrayOutput() GetLoadBalancerServiceHealthCheckArrayOutput {
	return i.ToGetLoadBalancerServiceHealthCheckArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerServiceHealthCheckArray) ToGetLoadBalancerServiceHealthCheckArrayOutputWithContext(ctx context.Context) GetLoadBalancerServiceHealthCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerServiceHealthCheckArrayOutput)
}

type GetLoadBalancerServiceHealthCheckOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerServiceHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (o GetLoadBalancerServiceHealthCheckOutput) ToGetLoadBalancerServiceHealthCheckOutput() GetLoadBalancerServiceHealthCheckOutput {
	return o
}

func (o GetLoadBalancerServiceHealthCheckOutput) ToGetLoadBalancerServiceHealthCheckOutputWithContext(ctx context.Context) GetLoadBalancerServiceHealthCheckOutput {
	return o
}

// (list) List of http configurations when `protocol` is `http` or `https`.
func (o GetLoadBalancerServiceHealthCheckOutput) Https() GetLoadBalancerServiceHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheck) []GetLoadBalancerServiceHealthCheckHttp { return v.Https }).(GetLoadBalancerServiceHealthCheckHttpArrayOutput)
}

// (int) Interval how often the health check will be performed, in seconds.
func (o GetLoadBalancerServiceHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// (int) Port the health check tries to connect to. Can be everything between `1` and `65535`.
func (o GetLoadBalancerServiceHealthCheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheck) int { return v.Port }).(pulumi.IntOutput)
}

// (string) Protocol the health check uses. `http`, `https` or `tcp`
func (o GetLoadBalancerServiceHealthCheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheck) string { return v.Protocol }).(pulumi.StringOutput)
}

// (int) Number of tries a health check will be performed until a target will be listed as `unhealthy`.
func (o GetLoadBalancerServiceHealthCheckOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheck) int { return v.Retries }).(pulumi.IntOutput)
}

// (int) Timeout when a health check try will be canceled if there is no response, in seconds.
func (o GetLoadBalancerServiceHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

type GetLoadBalancerServiceHealthCheckArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerServiceHealthCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (o GetLoadBalancerServiceHealthCheckArrayOutput) ToGetLoadBalancerServiceHealthCheckArrayOutput() GetLoadBalancerServiceHealthCheckArrayOutput {
	return o
}

func (o GetLoadBalancerServiceHealthCheckArrayOutput) ToGetLoadBalancerServiceHealthCheckArrayOutputWithContext(ctx context.Context) GetLoadBalancerServiceHealthCheckArrayOutput {
	return o
}

func (o GetLoadBalancerServiceHealthCheckArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerServiceHealthCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerServiceHealthCheck {
		return vs[0].([]GetLoadBalancerServiceHealthCheck)[vs[1].(int)]
	}).(GetLoadBalancerServiceHealthCheckOutput)
}

type GetLoadBalancerServiceHealthCheckHttp struct {
	// string) Domain we try to access when performing the Health Check.
	Domain string `pulumi:"domain"`
	// (string) Path we try to access when performing the Health Check.
	Path string `pulumi:"path"`
	// (string) Response we expect to be included in the Target response when a Health Check was performed.
	Response string `pulumi:"response"`
	// (list[int]) We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
	StatusCodes []int `pulumi:"statusCodes"`
	// (bool) Enable TLS certificate checking.
	Tls bool `pulumi:"tls"`
}

// GetLoadBalancerServiceHealthCheckHttpInput is an input type that accepts GetLoadBalancerServiceHealthCheckHttpArgs and GetLoadBalancerServiceHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetLoadBalancerServiceHealthCheckHttpInput` via:
//
//          GetLoadBalancerServiceHealthCheckHttpArgs{...}
type GetLoadBalancerServiceHealthCheckHttpInput interface {
	pulumi.Input

	ToGetLoadBalancerServiceHealthCheckHttpOutput() GetLoadBalancerServiceHealthCheckHttpOutput
	ToGetLoadBalancerServiceHealthCheckHttpOutputWithContext(context.Context) GetLoadBalancerServiceHealthCheckHttpOutput
}

type GetLoadBalancerServiceHealthCheckHttpArgs struct {
	// string) Domain we try to access when performing the Health Check.
	Domain pulumi.StringInput `pulumi:"domain"`
	// (string) Path we try to access when performing the Health Check.
	Path pulumi.StringInput `pulumi:"path"`
	// (string) Response we expect to be included in the Target response when a Health Check was performed.
	Response pulumi.StringInput `pulumi:"response"`
	// (list[int]) We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
	StatusCodes pulumi.IntArrayInput `pulumi:"statusCodes"`
	// (bool) Enable TLS certificate checking.
	Tls pulumi.BoolInput `pulumi:"tls"`
}

func (GetLoadBalancerServiceHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (i GetLoadBalancerServiceHealthCheckHttpArgs) ToGetLoadBalancerServiceHealthCheckHttpOutput() GetLoadBalancerServiceHealthCheckHttpOutput {
	return i.ToGetLoadBalancerServiceHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetLoadBalancerServiceHealthCheckHttpArgs) ToGetLoadBalancerServiceHealthCheckHttpOutputWithContext(ctx context.Context) GetLoadBalancerServiceHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerServiceHealthCheckHttpOutput)
}

// GetLoadBalancerServiceHealthCheckHttpArrayInput is an input type that accepts GetLoadBalancerServiceHealthCheckHttpArray and GetLoadBalancerServiceHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerServiceHealthCheckHttpArrayInput` via:
//
//          GetLoadBalancerServiceHealthCheckHttpArray{ GetLoadBalancerServiceHealthCheckHttpArgs{...} }
type GetLoadBalancerServiceHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerServiceHealthCheckHttpArrayOutput() GetLoadBalancerServiceHealthCheckHttpArrayOutput
	ToGetLoadBalancerServiceHealthCheckHttpArrayOutputWithContext(context.Context) GetLoadBalancerServiceHealthCheckHttpArrayOutput
}

type GetLoadBalancerServiceHealthCheckHttpArray []GetLoadBalancerServiceHealthCheckHttpInput

func (GetLoadBalancerServiceHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (i GetLoadBalancerServiceHealthCheckHttpArray) ToGetLoadBalancerServiceHealthCheckHttpArrayOutput() GetLoadBalancerServiceHealthCheckHttpArrayOutput {
	return i.ToGetLoadBalancerServiceHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerServiceHealthCheckHttpArray) ToGetLoadBalancerServiceHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetLoadBalancerServiceHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerServiceHealthCheckHttpArrayOutput)
}

type GetLoadBalancerServiceHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerServiceHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (o GetLoadBalancerServiceHealthCheckHttpOutput) ToGetLoadBalancerServiceHealthCheckHttpOutput() GetLoadBalancerServiceHealthCheckHttpOutput {
	return o
}

func (o GetLoadBalancerServiceHealthCheckHttpOutput) ToGetLoadBalancerServiceHealthCheckHttpOutputWithContext(ctx context.Context) GetLoadBalancerServiceHealthCheckHttpOutput {
	return o
}

// string) Domain we try to access when performing the Health Check.
func (o GetLoadBalancerServiceHealthCheckHttpOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheckHttp) string { return v.Domain }).(pulumi.StringOutput)
}

// (string) Path we try to access when performing the Health Check.
func (o GetLoadBalancerServiceHealthCheckHttpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheckHttp) string { return v.Path }).(pulumi.StringOutput)
}

// (string) Response we expect to be included in the Target response when a Health Check was performed.
func (o GetLoadBalancerServiceHealthCheckHttpOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheckHttp) string { return v.Response }).(pulumi.StringOutput)
}

// (list[int]) We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
func (o GetLoadBalancerServiceHealthCheckHttpOutput) StatusCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheckHttp) []int { return v.StatusCodes }).(pulumi.IntArrayOutput)
}

// (bool) Enable TLS certificate checking.
func (o GetLoadBalancerServiceHealthCheckHttpOutput) Tls() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHealthCheckHttp) bool { return v.Tls }).(pulumi.BoolOutput)
}

type GetLoadBalancerServiceHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerServiceHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (o GetLoadBalancerServiceHealthCheckHttpArrayOutput) ToGetLoadBalancerServiceHealthCheckHttpArrayOutput() GetLoadBalancerServiceHealthCheckHttpArrayOutput {
	return o
}

func (o GetLoadBalancerServiceHealthCheckHttpArrayOutput) ToGetLoadBalancerServiceHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetLoadBalancerServiceHealthCheckHttpArrayOutput {
	return o
}

func (o GetLoadBalancerServiceHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerServiceHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerServiceHealthCheckHttp {
		return vs[0].([]GetLoadBalancerServiceHealthCheckHttp)[vs[1].(int)]
	}).(GetLoadBalancerServiceHealthCheckHttpOutput)
}

type GetLoadBalancerServiceHttp struct {
	// (list[int]) List of IDs from certificates which the Load Balancer has.
	Certificates []string `pulumi:"certificates"`
	// (int) Lifetime of the cookie for sticky session (in seconds).
	CookieLifetime int `pulumi:"cookieLifetime"`
	// (string) Name of the cookie for sticky session.
	CookieName string `pulumi:"cookieName"`
	// (string) Determine if all requests from port 80 should be redirected to port 443.
	RedirectHttp bool `pulumi:"redirectHttp"`
	// (string) Determine if sticky sessions are enabled or not.
	StickySessions bool `pulumi:"stickySessions"`
}

// GetLoadBalancerServiceHttpInput is an input type that accepts GetLoadBalancerServiceHttpArgs and GetLoadBalancerServiceHttpOutput values.
// You can construct a concrete instance of `GetLoadBalancerServiceHttpInput` via:
//
//          GetLoadBalancerServiceHttpArgs{...}
type GetLoadBalancerServiceHttpInput interface {
	pulumi.Input

	ToGetLoadBalancerServiceHttpOutput() GetLoadBalancerServiceHttpOutput
	ToGetLoadBalancerServiceHttpOutputWithContext(context.Context) GetLoadBalancerServiceHttpOutput
}

type GetLoadBalancerServiceHttpArgs struct {
	// (list[int]) List of IDs from certificates which the Load Balancer has.
	Certificates pulumi.StringArrayInput `pulumi:"certificates"`
	// (int) Lifetime of the cookie for sticky session (in seconds).
	CookieLifetime pulumi.IntInput `pulumi:"cookieLifetime"`
	// (string) Name of the cookie for sticky session.
	CookieName pulumi.StringInput `pulumi:"cookieName"`
	// (string) Determine if all requests from port 80 should be redirected to port 443.
	RedirectHttp pulumi.BoolInput `pulumi:"redirectHttp"`
	// (string) Determine if sticky sessions are enabled or not.
	StickySessions pulumi.BoolInput `pulumi:"stickySessions"`
}

func (GetLoadBalancerServiceHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerServiceHttp)(nil)).Elem()
}

func (i GetLoadBalancerServiceHttpArgs) ToGetLoadBalancerServiceHttpOutput() GetLoadBalancerServiceHttpOutput {
	return i.ToGetLoadBalancerServiceHttpOutputWithContext(context.Background())
}

func (i GetLoadBalancerServiceHttpArgs) ToGetLoadBalancerServiceHttpOutputWithContext(ctx context.Context) GetLoadBalancerServiceHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerServiceHttpOutput)
}

// GetLoadBalancerServiceHttpArrayInput is an input type that accepts GetLoadBalancerServiceHttpArray and GetLoadBalancerServiceHttpArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerServiceHttpArrayInput` via:
//
//          GetLoadBalancerServiceHttpArray{ GetLoadBalancerServiceHttpArgs{...} }
type GetLoadBalancerServiceHttpArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerServiceHttpArrayOutput() GetLoadBalancerServiceHttpArrayOutput
	ToGetLoadBalancerServiceHttpArrayOutputWithContext(context.Context) GetLoadBalancerServiceHttpArrayOutput
}

type GetLoadBalancerServiceHttpArray []GetLoadBalancerServiceHttpInput

func (GetLoadBalancerServiceHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerServiceHttp)(nil)).Elem()
}

func (i GetLoadBalancerServiceHttpArray) ToGetLoadBalancerServiceHttpArrayOutput() GetLoadBalancerServiceHttpArrayOutput {
	return i.ToGetLoadBalancerServiceHttpArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerServiceHttpArray) ToGetLoadBalancerServiceHttpArrayOutputWithContext(ctx context.Context) GetLoadBalancerServiceHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerServiceHttpArrayOutput)
}

type GetLoadBalancerServiceHttpOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerServiceHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerServiceHttp)(nil)).Elem()
}

func (o GetLoadBalancerServiceHttpOutput) ToGetLoadBalancerServiceHttpOutput() GetLoadBalancerServiceHttpOutput {
	return o
}

func (o GetLoadBalancerServiceHttpOutput) ToGetLoadBalancerServiceHttpOutputWithContext(ctx context.Context) GetLoadBalancerServiceHttpOutput {
	return o
}

// (list[int]) List of IDs from certificates which the Load Balancer has.
func (o GetLoadBalancerServiceHttpOutput) Certificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHttp) []string { return v.Certificates }).(pulumi.StringArrayOutput)
}

// (int) Lifetime of the cookie for sticky session (in seconds).
func (o GetLoadBalancerServiceHttpOutput) CookieLifetime() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHttp) int { return v.CookieLifetime }).(pulumi.IntOutput)
}

// (string) Name of the cookie for sticky session.
func (o GetLoadBalancerServiceHttpOutput) CookieName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHttp) string { return v.CookieName }).(pulumi.StringOutput)
}

// (string) Determine if all requests from port 80 should be redirected to port 443.
func (o GetLoadBalancerServiceHttpOutput) RedirectHttp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHttp) bool { return v.RedirectHttp }).(pulumi.BoolOutput)
}

// (string) Determine if sticky sessions are enabled or not.
func (o GetLoadBalancerServiceHttpOutput) StickySessions() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancerServiceHttp) bool { return v.StickySessions }).(pulumi.BoolOutput)
}

type GetLoadBalancerServiceHttpArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerServiceHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerServiceHttp)(nil)).Elem()
}

func (o GetLoadBalancerServiceHttpArrayOutput) ToGetLoadBalancerServiceHttpArrayOutput() GetLoadBalancerServiceHttpArrayOutput {
	return o
}

func (o GetLoadBalancerServiceHttpArrayOutput) ToGetLoadBalancerServiceHttpArrayOutputWithContext(ctx context.Context) GetLoadBalancerServiceHttpArrayOutput {
	return o
}

func (o GetLoadBalancerServiceHttpArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerServiceHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerServiceHttp {
		return vs[0].([]GetLoadBalancerServiceHttp)[vs[1].(int)]
	}).(GetLoadBalancerServiceHttpOutput)
}

type GetLoadBalancerTargetType struct {
	// (string) Label Selector to add a group of resources based on the label.
	LabelSelector string `pulumi:"labelSelector"`
	// (int) ID of the server which should be a target for this Load Balancer.
	ServerId int `pulumi:"serverId"`
	// (string) Type of the target. `server` or `labelSelector`
	Type string `pulumi:"type"`
}

// GetLoadBalancerTargetTypeInput is an input type that accepts GetLoadBalancerTargetTypeArgs and GetLoadBalancerTargetTypeOutput values.
// You can construct a concrete instance of `GetLoadBalancerTargetTypeInput` via:
//
//          GetLoadBalancerTargetTypeArgs{...}
type GetLoadBalancerTargetTypeInput interface {
	pulumi.Input

	ToGetLoadBalancerTargetTypeOutput() GetLoadBalancerTargetTypeOutput
	ToGetLoadBalancerTargetTypeOutputWithContext(context.Context) GetLoadBalancerTargetTypeOutput
}

type GetLoadBalancerTargetTypeArgs struct {
	// (string) Label Selector to add a group of resources based on the label.
	LabelSelector pulumi.StringInput `pulumi:"labelSelector"`
	// (int) ID of the server which should be a target for this Load Balancer.
	ServerId pulumi.IntInput `pulumi:"serverId"`
	// (string) Type of the target. `server` or `labelSelector`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetLoadBalancerTargetTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerTargetType)(nil)).Elem()
}

func (i GetLoadBalancerTargetTypeArgs) ToGetLoadBalancerTargetTypeOutput() GetLoadBalancerTargetTypeOutput {
	return i.ToGetLoadBalancerTargetTypeOutputWithContext(context.Background())
}

func (i GetLoadBalancerTargetTypeArgs) ToGetLoadBalancerTargetTypeOutputWithContext(ctx context.Context) GetLoadBalancerTargetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerTargetTypeOutput)
}

// GetLoadBalancerTargetTypeArrayInput is an input type that accepts GetLoadBalancerTargetTypeArray and GetLoadBalancerTargetTypeArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancerTargetTypeArrayInput` via:
//
//          GetLoadBalancerTargetTypeArray{ GetLoadBalancerTargetTypeArgs{...} }
type GetLoadBalancerTargetTypeArrayInput interface {
	pulumi.Input

	ToGetLoadBalancerTargetTypeArrayOutput() GetLoadBalancerTargetTypeArrayOutput
	ToGetLoadBalancerTargetTypeArrayOutputWithContext(context.Context) GetLoadBalancerTargetTypeArrayOutput
}

type GetLoadBalancerTargetTypeArray []GetLoadBalancerTargetTypeInput

func (GetLoadBalancerTargetTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerTargetType)(nil)).Elem()
}

func (i GetLoadBalancerTargetTypeArray) ToGetLoadBalancerTargetTypeArrayOutput() GetLoadBalancerTargetTypeArrayOutput {
	return i.ToGetLoadBalancerTargetTypeArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancerTargetTypeArray) ToGetLoadBalancerTargetTypeArrayOutputWithContext(ctx context.Context) GetLoadBalancerTargetTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancerTargetTypeArrayOutput)
}

type GetLoadBalancerTargetTypeOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerTargetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancerTargetType)(nil)).Elem()
}

func (o GetLoadBalancerTargetTypeOutput) ToGetLoadBalancerTargetTypeOutput() GetLoadBalancerTargetTypeOutput {
	return o
}

func (o GetLoadBalancerTargetTypeOutput) ToGetLoadBalancerTargetTypeOutputWithContext(ctx context.Context) GetLoadBalancerTargetTypeOutput {
	return o
}

// (string) Label Selector to add a group of resources based on the label.
func (o GetLoadBalancerTargetTypeOutput) LabelSelector() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerTargetType) string { return v.LabelSelector }).(pulumi.StringOutput)
}

// (int) ID of the server which should be a target for this Load Balancer.
func (o GetLoadBalancerTargetTypeOutput) ServerId() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancerTargetType) int { return v.ServerId }).(pulumi.IntOutput)
}

// (string) Type of the target. `server` or `labelSelector`
func (o GetLoadBalancerTargetTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancerTargetType) string { return v.Type }).(pulumi.StringOutput)
}

type GetLoadBalancerTargetTypeArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancerTargetTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancerTargetType)(nil)).Elem()
}

func (o GetLoadBalancerTargetTypeArrayOutput) ToGetLoadBalancerTargetTypeArrayOutput() GetLoadBalancerTargetTypeArrayOutput {
	return o
}

func (o GetLoadBalancerTargetTypeArrayOutput) ToGetLoadBalancerTargetTypeArrayOutputWithContext(ctx context.Context) GetLoadBalancerTargetTypeArrayOutput {
	return o
}

func (o GetLoadBalancerTargetTypeArrayOutput) Index(i pulumi.IntInput) GetLoadBalancerTargetTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancerTargetType {
		return vs[0].([]GetLoadBalancerTargetType)[vs[1].(int)]
	}).(GetLoadBalancerTargetTypeOutput)
}

type GetLoadBalancersLoadBalancer struct {
	Algorithms       []GetLoadBalancersLoadBalancerAlgorithm `pulumi:"algorithms"`
	DeleteProtection bool                                    `pulumi:"deleteProtection"`
	Id               int                                     `pulumi:"id"`
	Ipv4             string                                  `pulumi:"ipv4"`
	Ipv6             string                                  `pulumi:"ipv6"`
	Labels           map[string]interface{}                  `pulumi:"labels"`
	LoadBalancerType string                                  `pulumi:"loadBalancerType"`
	Location         string                                  `pulumi:"location"`
	Name             *string                                 `pulumi:"name"`
	NetworkZone      string                                  `pulumi:"networkZone"`
	Services         []GetLoadBalancersLoadBalancerService   `pulumi:"services"`
	Targets          []GetLoadBalancersLoadBalancerTarget    `pulumi:"targets"`
}

// GetLoadBalancersLoadBalancerInput is an input type that accepts GetLoadBalancersLoadBalancerArgs and GetLoadBalancersLoadBalancerOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerInput` via:
//
//          GetLoadBalancersLoadBalancerArgs{...}
type GetLoadBalancersLoadBalancerInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerOutput() GetLoadBalancersLoadBalancerOutput
	ToGetLoadBalancersLoadBalancerOutputWithContext(context.Context) GetLoadBalancersLoadBalancerOutput
}

type GetLoadBalancersLoadBalancerArgs struct {
	Algorithms       GetLoadBalancersLoadBalancerAlgorithmArrayInput `pulumi:"algorithms"`
	DeleteProtection pulumi.BoolInput                                `pulumi:"deleteProtection"`
	Id               pulumi.IntInput                                 `pulumi:"id"`
	Ipv4             pulumi.StringInput                              `pulumi:"ipv4"`
	Ipv6             pulumi.StringInput                              `pulumi:"ipv6"`
	Labels           pulumi.MapInput                                 `pulumi:"labels"`
	LoadBalancerType pulumi.StringInput                              `pulumi:"loadBalancerType"`
	Location         pulumi.StringInput                              `pulumi:"location"`
	Name             pulumi.StringPtrInput                           `pulumi:"name"`
	NetworkZone      pulumi.StringInput                              `pulumi:"networkZone"`
	Services         GetLoadBalancersLoadBalancerServiceArrayInput   `pulumi:"services"`
	Targets          GetLoadBalancersLoadBalancerTargetArrayInput    `pulumi:"targets"`
}

func (GetLoadBalancersLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancer)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerArgs) ToGetLoadBalancersLoadBalancerOutput() GetLoadBalancersLoadBalancerOutput {
	return i.ToGetLoadBalancersLoadBalancerOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerArgs) ToGetLoadBalancersLoadBalancerOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerOutput)
}

// GetLoadBalancersLoadBalancerArrayInput is an input type that accepts GetLoadBalancersLoadBalancerArray and GetLoadBalancersLoadBalancerArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerArrayInput` via:
//
//          GetLoadBalancersLoadBalancerArray{ GetLoadBalancersLoadBalancerArgs{...} }
type GetLoadBalancersLoadBalancerArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerArrayOutput() GetLoadBalancersLoadBalancerArrayOutput
	ToGetLoadBalancersLoadBalancerArrayOutputWithContext(context.Context) GetLoadBalancersLoadBalancerArrayOutput
}

type GetLoadBalancersLoadBalancerArray []GetLoadBalancersLoadBalancerInput

func (GetLoadBalancersLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancer)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerArray) ToGetLoadBalancersLoadBalancerArrayOutput() GetLoadBalancersLoadBalancerArrayOutput {
	return i.ToGetLoadBalancersLoadBalancerArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerArray) ToGetLoadBalancersLoadBalancerArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerArrayOutput)
}

type GetLoadBalancersLoadBalancerOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancer)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerOutput) ToGetLoadBalancersLoadBalancerOutput() GetLoadBalancersLoadBalancerOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerOutput) ToGetLoadBalancersLoadBalancerOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerOutput) Algorithms() GetLoadBalancersLoadBalancerAlgorithmArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) []GetLoadBalancersLoadBalancerAlgorithm { return v.Algorithms }).(GetLoadBalancersLoadBalancerAlgorithmArrayOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) DeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) bool { return v.DeleteProtection }).(pulumi.BoolOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) Ipv4() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) string { return v.Ipv4 }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) Ipv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) string { return v.Ipv6 }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) NetworkZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) string { return v.NetworkZone }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) Services() GetLoadBalancersLoadBalancerServiceArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) []GetLoadBalancersLoadBalancerService { return v.Services }).(GetLoadBalancersLoadBalancerServiceArrayOutput)
}

func (o GetLoadBalancersLoadBalancerOutput) Targets() GetLoadBalancersLoadBalancerTargetArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancer) []GetLoadBalancersLoadBalancerTarget { return v.Targets }).(GetLoadBalancersLoadBalancerTargetArrayOutput)
}

type GetLoadBalancersLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancer)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerArrayOutput) ToGetLoadBalancersLoadBalancerArrayOutput() GetLoadBalancersLoadBalancerArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerArrayOutput) ToGetLoadBalancersLoadBalancerArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLoadBalancer {
		return vs[0].([]GetLoadBalancersLoadBalancer)[vs[1].(int)]
	}).(GetLoadBalancersLoadBalancerOutput)
}

type GetLoadBalancersLoadBalancerAlgorithm struct {
	Type string `pulumi:"type"`
}

// GetLoadBalancersLoadBalancerAlgorithmInput is an input type that accepts GetLoadBalancersLoadBalancerAlgorithmArgs and GetLoadBalancersLoadBalancerAlgorithmOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerAlgorithmInput` via:
//
//          GetLoadBalancersLoadBalancerAlgorithmArgs{...}
type GetLoadBalancersLoadBalancerAlgorithmInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerAlgorithmOutput() GetLoadBalancersLoadBalancerAlgorithmOutput
	ToGetLoadBalancersLoadBalancerAlgorithmOutputWithContext(context.Context) GetLoadBalancersLoadBalancerAlgorithmOutput
}

type GetLoadBalancersLoadBalancerAlgorithmArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetLoadBalancersLoadBalancerAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerAlgorithm)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerAlgorithmArgs) ToGetLoadBalancersLoadBalancerAlgorithmOutput() GetLoadBalancersLoadBalancerAlgorithmOutput {
	return i.ToGetLoadBalancersLoadBalancerAlgorithmOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerAlgorithmArgs) ToGetLoadBalancersLoadBalancerAlgorithmOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerAlgorithmOutput)
}

// GetLoadBalancersLoadBalancerAlgorithmArrayInput is an input type that accepts GetLoadBalancersLoadBalancerAlgorithmArray and GetLoadBalancersLoadBalancerAlgorithmArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerAlgorithmArrayInput` via:
//
//          GetLoadBalancersLoadBalancerAlgorithmArray{ GetLoadBalancersLoadBalancerAlgorithmArgs{...} }
type GetLoadBalancersLoadBalancerAlgorithmArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerAlgorithmArrayOutput() GetLoadBalancersLoadBalancerAlgorithmArrayOutput
	ToGetLoadBalancersLoadBalancerAlgorithmArrayOutputWithContext(context.Context) GetLoadBalancersLoadBalancerAlgorithmArrayOutput
}

type GetLoadBalancersLoadBalancerAlgorithmArray []GetLoadBalancersLoadBalancerAlgorithmInput

func (GetLoadBalancersLoadBalancerAlgorithmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerAlgorithm)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerAlgorithmArray) ToGetLoadBalancersLoadBalancerAlgorithmArrayOutput() GetLoadBalancersLoadBalancerAlgorithmArrayOutput {
	return i.ToGetLoadBalancersLoadBalancerAlgorithmArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerAlgorithmArray) ToGetLoadBalancersLoadBalancerAlgorithmArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerAlgorithmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerAlgorithmArrayOutput)
}

type GetLoadBalancersLoadBalancerAlgorithmOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerAlgorithm)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerAlgorithmOutput) ToGetLoadBalancersLoadBalancerAlgorithmOutput() GetLoadBalancersLoadBalancerAlgorithmOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerAlgorithmOutput) ToGetLoadBalancersLoadBalancerAlgorithmOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerAlgorithmOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerAlgorithmOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerAlgorithm) string { return v.Type }).(pulumi.StringOutput)
}

type GetLoadBalancersLoadBalancerAlgorithmArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerAlgorithmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerAlgorithm)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerAlgorithmArrayOutput) ToGetLoadBalancersLoadBalancerAlgorithmArrayOutput() GetLoadBalancersLoadBalancerAlgorithmArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerAlgorithmArrayOutput) ToGetLoadBalancersLoadBalancerAlgorithmArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerAlgorithmArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerAlgorithmArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLoadBalancerAlgorithmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLoadBalancerAlgorithm {
		return vs[0].([]GetLoadBalancersLoadBalancerAlgorithm)[vs[1].(int)]
	}).(GetLoadBalancersLoadBalancerAlgorithmOutput)
}

type GetLoadBalancersLoadBalancerService struct {
	DestinationPort int                                              `pulumi:"destinationPort"`
	HealthChecks    []GetLoadBalancersLoadBalancerServiceHealthCheck `pulumi:"healthChecks"`
	Https           []GetLoadBalancersLoadBalancerServiceHttp        `pulumi:"https"`
	ListenPort      int                                              `pulumi:"listenPort"`
	Protocol        string                                           `pulumi:"protocol"`
	Proxyprotocol   bool                                             `pulumi:"proxyprotocol"`
}

// GetLoadBalancersLoadBalancerServiceInput is an input type that accepts GetLoadBalancersLoadBalancerServiceArgs and GetLoadBalancersLoadBalancerServiceOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerServiceInput` via:
//
//          GetLoadBalancersLoadBalancerServiceArgs{...}
type GetLoadBalancersLoadBalancerServiceInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerServiceOutput() GetLoadBalancersLoadBalancerServiceOutput
	ToGetLoadBalancersLoadBalancerServiceOutputWithContext(context.Context) GetLoadBalancersLoadBalancerServiceOutput
}

type GetLoadBalancersLoadBalancerServiceArgs struct {
	DestinationPort pulumi.IntInput                                          `pulumi:"destinationPort"`
	HealthChecks    GetLoadBalancersLoadBalancerServiceHealthCheckArrayInput `pulumi:"healthChecks"`
	Https           GetLoadBalancersLoadBalancerServiceHttpArrayInput        `pulumi:"https"`
	ListenPort      pulumi.IntInput                                          `pulumi:"listenPort"`
	Protocol        pulumi.StringInput                                       `pulumi:"protocol"`
	Proxyprotocol   pulumi.BoolInput                                         `pulumi:"proxyprotocol"`
}

func (GetLoadBalancersLoadBalancerServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerService)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerServiceArgs) ToGetLoadBalancersLoadBalancerServiceOutput() GetLoadBalancersLoadBalancerServiceOutput {
	return i.ToGetLoadBalancersLoadBalancerServiceOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerServiceArgs) ToGetLoadBalancersLoadBalancerServiceOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerServiceOutput)
}

// GetLoadBalancersLoadBalancerServiceArrayInput is an input type that accepts GetLoadBalancersLoadBalancerServiceArray and GetLoadBalancersLoadBalancerServiceArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerServiceArrayInput` via:
//
//          GetLoadBalancersLoadBalancerServiceArray{ GetLoadBalancersLoadBalancerServiceArgs{...} }
type GetLoadBalancersLoadBalancerServiceArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerServiceArrayOutput() GetLoadBalancersLoadBalancerServiceArrayOutput
	ToGetLoadBalancersLoadBalancerServiceArrayOutputWithContext(context.Context) GetLoadBalancersLoadBalancerServiceArrayOutput
}

type GetLoadBalancersLoadBalancerServiceArray []GetLoadBalancersLoadBalancerServiceInput

func (GetLoadBalancersLoadBalancerServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerService)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerServiceArray) ToGetLoadBalancersLoadBalancerServiceArrayOutput() GetLoadBalancersLoadBalancerServiceArrayOutput {
	return i.ToGetLoadBalancersLoadBalancerServiceArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerServiceArray) ToGetLoadBalancersLoadBalancerServiceArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerServiceArrayOutput)
}

type GetLoadBalancersLoadBalancerServiceOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerService)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerServiceOutput) ToGetLoadBalancersLoadBalancerServiceOutput() GetLoadBalancersLoadBalancerServiceOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceOutput) ToGetLoadBalancersLoadBalancerServiceOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceOutput) DestinationPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerService) int { return v.DestinationPort }).(pulumi.IntOutput)
}

func (o GetLoadBalancersLoadBalancerServiceOutput) HealthChecks() GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerService) []GetLoadBalancersLoadBalancerServiceHealthCheck {
		return v.HealthChecks
	}).(GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput)
}

func (o GetLoadBalancersLoadBalancerServiceOutput) Https() GetLoadBalancersLoadBalancerServiceHttpArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerService) []GetLoadBalancersLoadBalancerServiceHttp { return v.Https }).(GetLoadBalancersLoadBalancerServiceHttpArrayOutput)
}

func (o GetLoadBalancersLoadBalancerServiceOutput) ListenPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerService) int { return v.ListenPort }).(pulumi.IntOutput)
}

func (o GetLoadBalancersLoadBalancerServiceOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerService) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerServiceOutput) Proxyprotocol() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerService) bool { return v.Proxyprotocol }).(pulumi.BoolOutput)
}

type GetLoadBalancersLoadBalancerServiceArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerService)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerServiceArrayOutput) ToGetLoadBalancersLoadBalancerServiceArrayOutput() GetLoadBalancersLoadBalancerServiceArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceArrayOutput) ToGetLoadBalancersLoadBalancerServiceArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLoadBalancerServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLoadBalancerService {
		return vs[0].([]GetLoadBalancersLoadBalancerService)[vs[1].(int)]
	}).(GetLoadBalancersLoadBalancerServiceOutput)
}

type GetLoadBalancersLoadBalancerServiceHealthCheck struct {
	Https    []GetLoadBalancersLoadBalancerServiceHealthCheckHttp `pulumi:"https"`
	Interval int                                                  `pulumi:"interval"`
	Port     int                                                  `pulumi:"port"`
	Protocol string                                               `pulumi:"protocol"`
	Retries  int                                                  `pulumi:"retries"`
	Timeout  int                                                  `pulumi:"timeout"`
}

// GetLoadBalancersLoadBalancerServiceHealthCheckInput is an input type that accepts GetLoadBalancersLoadBalancerServiceHealthCheckArgs and GetLoadBalancersLoadBalancerServiceHealthCheckOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerServiceHealthCheckInput` via:
//
//          GetLoadBalancersLoadBalancerServiceHealthCheckArgs{...}
type GetLoadBalancersLoadBalancerServiceHealthCheckInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerServiceHealthCheckOutput() GetLoadBalancersLoadBalancerServiceHealthCheckOutput
	ToGetLoadBalancersLoadBalancerServiceHealthCheckOutputWithContext(context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckOutput
}

type GetLoadBalancersLoadBalancerServiceHealthCheckArgs struct {
	Https    GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayInput `pulumi:"https"`
	Interval pulumi.IntInput                                              `pulumi:"interval"`
	Port     pulumi.IntInput                                              `pulumi:"port"`
	Protocol pulumi.StringInput                                           `pulumi:"protocol"`
	Retries  pulumi.IntInput                                              `pulumi:"retries"`
	Timeout  pulumi.IntInput                                              `pulumi:"timeout"`
}

func (GetLoadBalancersLoadBalancerServiceHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerServiceHealthCheckArgs) ToGetLoadBalancersLoadBalancerServiceHealthCheckOutput() GetLoadBalancersLoadBalancerServiceHealthCheckOutput {
	return i.ToGetLoadBalancersLoadBalancerServiceHealthCheckOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerServiceHealthCheckArgs) ToGetLoadBalancersLoadBalancerServiceHealthCheckOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerServiceHealthCheckOutput)
}

// GetLoadBalancersLoadBalancerServiceHealthCheckArrayInput is an input type that accepts GetLoadBalancersLoadBalancerServiceHealthCheckArray and GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerServiceHealthCheckArrayInput` via:
//
//          GetLoadBalancersLoadBalancerServiceHealthCheckArray{ GetLoadBalancersLoadBalancerServiceHealthCheckArgs{...} }
type GetLoadBalancersLoadBalancerServiceHealthCheckArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput() GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput
	ToGetLoadBalancersLoadBalancerServiceHealthCheckArrayOutputWithContext(context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput
}

type GetLoadBalancersLoadBalancerServiceHealthCheckArray []GetLoadBalancersLoadBalancerServiceHealthCheckInput

func (GetLoadBalancersLoadBalancerServiceHealthCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerServiceHealthCheckArray) ToGetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput() GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput {
	return i.ToGetLoadBalancersLoadBalancerServiceHealthCheckArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerServiceHealthCheckArray) ToGetLoadBalancersLoadBalancerServiceHealthCheckArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput)
}

type GetLoadBalancersLoadBalancerServiceHealthCheckOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerServiceHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckOutput) ToGetLoadBalancersLoadBalancerServiceHealthCheckOutput() GetLoadBalancersLoadBalancerServiceHealthCheckOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckOutput) ToGetLoadBalancersLoadBalancerServiceHealthCheckOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckOutput) Https() GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheck) []GetLoadBalancersLoadBalancerServiceHealthCheckHttp {
		return v.Https
	}).(GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheck) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheck) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheck) int { return v.Retries }).(pulumi.IntOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

type GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerServiceHealthCheck)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput) ToGetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput() GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput) ToGetLoadBalancersLoadBalancerServiceHealthCheckArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLoadBalancerServiceHealthCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLoadBalancerServiceHealthCheck {
		return vs[0].([]GetLoadBalancersLoadBalancerServiceHealthCheck)[vs[1].(int)]
	}).(GetLoadBalancersLoadBalancerServiceHealthCheckOutput)
}

type GetLoadBalancersLoadBalancerServiceHealthCheckHttp struct {
	Domain      string `pulumi:"domain"`
	Path        string `pulumi:"path"`
	Response    string `pulumi:"response"`
	StatusCodes []int  `pulumi:"statusCodes"`
	Tls         bool   `pulumi:"tls"`
}

// GetLoadBalancersLoadBalancerServiceHealthCheckHttpInput is an input type that accepts GetLoadBalancersLoadBalancerServiceHealthCheckHttpArgs and GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerServiceHealthCheckHttpInput` via:
//
//          GetLoadBalancersLoadBalancerServiceHealthCheckHttpArgs{...}
type GetLoadBalancersLoadBalancerServiceHealthCheckHttpInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput() GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput
	ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpOutputWithContext(context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput
}

type GetLoadBalancersLoadBalancerServiceHealthCheckHttpArgs struct {
	Domain      pulumi.StringInput   `pulumi:"domain"`
	Path        pulumi.StringInput   `pulumi:"path"`
	Response    pulumi.StringInput   `pulumi:"response"`
	StatusCodes pulumi.IntArrayInput `pulumi:"statusCodes"`
	Tls         pulumi.BoolInput     `pulumi:"tls"`
}

func (GetLoadBalancersLoadBalancerServiceHealthCheckHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerServiceHealthCheckHttpArgs) ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput() GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput {
	return i.ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerServiceHealthCheckHttpArgs) ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput)
}

// GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayInput is an input type that accepts GetLoadBalancersLoadBalancerServiceHealthCheckHttpArray and GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayInput` via:
//
//          GetLoadBalancersLoadBalancerServiceHealthCheckHttpArray{ GetLoadBalancersLoadBalancerServiceHealthCheckHttpArgs{...} }
type GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput() GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput
	ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutputWithContext(context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput
}

type GetLoadBalancersLoadBalancerServiceHealthCheckHttpArray []GetLoadBalancersLoadBalancerServiceHealthCheckHttpInput

func (GetLoadBalancersLoadBalancerServiceHealthCheckHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerServiceHealthCheckHttpArray) ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput() GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput {
	return i.ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerServiceHealthCheckHttpArray) ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput)
}

type GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput) ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput() GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput) ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheckHttp) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheckHttp) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheckHttp) string { return v.Response }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput) StatusCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheckHttp) []int { return v.StatusCodes }).(pulumi.IntArrayOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput) Tls() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHealthCheckHttp) bool { return v.Tls }).(pulumi.BoolOutput)
}

type GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerServiceHealthCheckHttp)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput) ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput() GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput) ToGetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLoadBalancerServiceHealthCheckHttp {
		return vs[0].([]GetLoadBalancersLoadBalancerServiceHealthCheckHttp)[vs[1].(int)]
	}).(GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput)
}

type GetLoadBalancersLoadBalancerServiceHttp struct {
	Certificates   []string `pulumi:"certificates"`
	CookieLifetime int      `pulumi:"cookieLifetime"`
	CookieName     string   `pulumi:"cookieName"`
	RedirectHttp   bool     `pulumi:"redirectHttp"`
	StickySessions bool     `pulumi:"stickySessions"`
}

// GetLoadBalancersLoadBalancerServiceHttpInput is an input type that accepts GetLoadBalancersLoadBalancerServiceHttpArgs and GetLoadBalancersLoadBalancerServiceHttpOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerServiceHttpInput` via:
//
//          GetLoadBalancersLoadBalancerServiceHttpArgs{...}
type GetLoadBalancersLoadBalancerServiceHttpInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerServiceHttpOutput() GetLoadBalancersLoadBalancerServiceHttpOutput
	ToGetLoadBalancersLoadBalancerServiceHttpOutputWithContext(context.Context) GetLoadBalancersLoadBalancerServiceHttpOutput
}

type GetLoadBalancersLoadBalancerServiceHttpArgs struct {
	Certificates   pulumi.StringArrayInput `pulumi:"certificates"`
	CookieLifetime pulumi.IntInput         `pulumi:"cookieLifetime"`
	CookieName     pulumi.StringInput      `pulumi:"cookieName"`
	RedirectHttp   pulumi.BoolInput        `pulumi:"redirectHttp"`
	StickySessions pulumi.BoolInput        `pulumi:"stickySessions"`
}

func (GetLoadBalancersLoadBalancerServiceHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHttp)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerServiceHttpArgs) ToGetLoadBalancersLoadBalancerServiceHttpOutput() GetLoadBalancersLoadBalancerServiceHttpOutput {
	return i.ToGetLoadBalancersLoadBalancerServiceHttpOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerServiceHttpArgs) ToGetLoadBalancersLoadBalancerServiceHttpOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerServiceHttpOutput)
}

// GetLoadBalancersLoadBalancerServiceHttpArrayInput is an input type that accepts GetLoadBalancersLoadBalancerServiceHttpArray and GetLoadBalancersLoadBalancerServiceHttpArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerServiceHttpArrayInput` via:
//
//          GetLoadBalancersLoadBalancerServiceHttpArray{ GetLoadBalancersLoadBalancerServiceHttpArgs{...} }
type GetLoadBalancersLoadBalancerServiceHttpArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerServiceHttpArrayOutput() GetLoadBalancersLoadBalancerServiceHttpArrayOutput
	ToGetLoadBalancersLoadBalancerServiceHttpArrayOutputWithContext(context.Context) GetLoadBalancersLoadBalancerServiceHttpArrayOutput
}

type GetLoadBalancersLoadBalancerServiceHttpArray []GetLoadBalancersLoadBalancerServiceHttpInput

func (GetLoadBalancersLoadBalancerServiceHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerServiceHttp)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerServiceHttpArray) ToGetLoadBalancersLoadBalancerServiceHttpArrayOutput() GetLoadBalancersLoadBalancerServiceHttpArrayOutput {
	return i.ToGetLoadBalancersLoadBalancerServiceHttpArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerServiceHttpArray) ToGetLoadBalancersLoadBalancerServiceHttpArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerServiceHttpArrayOutput)
}

type GetLoadBalancersLoadBalancerServiceHttpOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerServiceHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHttp)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerServiceHttpOutput) ToGetLoadBalancersLoadBalancerServiceHttpOutput() GetLoadBalancersLoadBalancerServiceHttpOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHttpOutput) ToGetLoadBalancersLoadBalancerServiceHttpOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHttpOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHttpOutput) Certificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHttp) []string { return v.Certificates }).(pulumi.StringArrayOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHttpOutput) CookieLifetime() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHttp) int { return v.CookieLifetime }).(pulumi.IntOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHttpOutput) CookieName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHttp) string { return v.CookieName }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHttpOutput) RedirectHttp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHttp) bool { return v.RedirectHttp }).(pulumi.BoolOutput)
}

func (o GetLoadBalancersLoadBalancerServiceHttpOutput) StickySessions() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerServiceHttp) bool { return v.StickySessions }).(pulumi.BoolOutput)
}

type GetLoadBalancersLoadBalancerServiceHttpArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerServiceHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerServiceHttp)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerServiceHttpArrayOutput) ToGetLoadBalancersLoadBalancerServiceHttpArrayOutput() GetLoadBalancersLoadBalancerServiceHttpArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHttpArrayOutput) ToGetLoadBalancersLoadBalancerServiceHttpArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerServiceHttpArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerServiceHttpArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLoadBalancerServiceHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLoadBalancerServiceHttp {
		return vs[0].([]GetLoadBalancersLoadBalancerServiceHttp)[vs[1].(int)]
	}).(GetLoadBalancersLoadBalancerServiceHttpOutput)
}

type GetLoadBalancersLoadBalancerTarget struct {
	LabelSelector string `pulumi:"labelSelector"`
	ServerId      int    `pulumi:"serverId"`
	Type          string `pulumi:"type"`
}

// GetLoadBalancersLoadBalancerTargetInput is an input type that accepts GetLoadBalancersLoadBalancerTargetArgs and GetLoadBalancersLoadBalancerTargetOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerTargetInput` via:
//
//          GetLoadBalancersLoadBalancerTargetArgs{...}
type GetLoadBalancersLoadBalancerTargetInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerTargetOutput() GetLoadBalancersLoadBalancerTargetOutput
	ToGetLoadBalancersLoadBalancerTargetOutputWithContext(context.Context) GetLoadBalancersLoadBalancerTargetOutput
}

type GetLoadBalancersLoadBalancerTargetArgs struct {
	LabelSelector pulumi.StringInput `pulumi:"labelSelector"`
	ServerId      pulumi.IntInput    `pulumi:"serverId"`
	Type          pulumi.StringInput `pulumi:"type"`
}

func (GetLoadBalancersLoadBalancerTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerTarget)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerTargetArgs) ToGetLoadBalancersLoadBalancerTargetOutput() GetLoadBalancersLoadBalancerTargetOutput {
	return i.ToGetLoadBalancersLoadBalancerTargetOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerTargetArgs) ToGetLoadBalancersLoadBalancerTargetOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerTargetOutput)
}

// GetLoadBalancersLoadBalancerTargetArrayInput is an input type that accepts GetLoadBalancersLoadBalancerTargetArray and GetLoadBalancersLoadBalancerTargetArrayOutput values.
// You can construct a concrete instance of `GetLoadBalancersLoadBalancerTargetArrayInput` via:
//
//          GetLoadBalancersLoadBalancerTargetArray{ GetLoadBalancersLoadBalancerTargetArgs{...} }
type GetLoadBalancersLoadBalancerTargetArrayInput interface {
	pulumi.Input

	ToGetLoadBalancersLoadBalancerTargetArrayOutput() GetLoadBalancersLoadBalancerTargetArrayOutput
	ToGetLoadBalancersLoadBalancerTargetArrayOutputWithContext(context.Context) GetLoadBalancersLoadBalancerTargetArrayOutput
}

type GetLoadBalancersLoadBalancerTargetArray []GetLoadBalancersLoadBalancerTargetInput

func (GetLoadBalancersLoadBalancerTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerTarget)(nil)).Elem()
}

func (i GetLoadBalancersLoadBalancerTargetArray) ToGetLoadBalancersLoadBalancerTargetArrayOutput() GetLoadBalancersLoadBalancerTargetArrayOutput {
	return i.ToGetLoadBalancersLoadBalancerTargetArrayOutputWithContext(context.Background())
}

func (i GetLoadBalancersLoadBalancerTargetArray) ToGetLoadBalancersLoadBalancerTargetArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoadBalancersLoadBalancerTargetArrayOutput)
}

type GetLoadBalancersLoadBalancerTargetOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoadBalancersLoadBalancerTarget)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerTargetOutput) ToGetLoadBalancersLoadBalancerTargetOutput() GetLoadBalancersLoadBalancerTargetOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerTargetOutput) ToGetLoadBalancersLoadBalancerTargetOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerTargetOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerTargetOutput) LabelSelector() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerTarget) string { return v.LabelSelector }).(pulumi.StringOutput)
}

func (o GetLoadBalancersLoadBalancerTargetOutput) ServerId() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerTarget) int { return v.ServerId }).(pulumi.IntOutput)
}

func (o GetLoadBalancersLoadBalancerTargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoadBalancersLoadBalancerTarget) string { return v.Type }).(pulumi.StringOutput)
}

type GetLoadBalancersLoadBalancerTargetArrayOutput struct{ *pulumi.OutputState }

func (GetLoadBalancersLoadBalancerTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoadBalancersLoadBalancerTarget)(nil)).Elem()
}

func (o GetLoadBalancersLoadBalancerTargetArrayOutput) ToGetLoadBalancersLoadBalancerTargetArrayOutput() GetLoadBalancersLoadBalancerTargetArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerTargetArrayOutput) ToGetLoadBalancersLoadBalancerTargetArrayOutputWithContext(ctx context.Context) GetLoadBalancersLoadBalancerTargetArrayOutput {
	return o
}

func (o GetLoadBalancersLoadBalancerTargetArrayOutput) Index(i pulumi.IntInput) GetLoadBalancersLoadBalancerTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoadBalancersLoadBalancerTarget {
		return vs[0].([]GetLoadBalancersLoadBalancerTarget)[vs[1].(int)]
	}).(GetLoadBalancersLoadBalancerTargetOutput)
}

type GetLocationsLocation struct {
	City        string  `pulumi:"city"`
	Country     string  `pulumi:"country"`
	Description string  `pulumi:"description"`
	Id          int     `pulumi:"id"`
	Latitude    float64 `pulumi:"latitude"`
	Longitude   float64 `pulumi:"longitude"`
	Name        string  `pulumi:"name"`
	NetworkZone string  `pulumi:"networkZone"`
}

// GetLocationsLocationInput is an input type that accepts GetLocationsLocationArgs and GetLocationsLocationOutput values.
// You can construct a concrete instance of `GetLocationsLocationInput` via:
//
//          GetLocationsLocationArgs{...}
type GetLocationsLocationInput interface {
	pulumi.Input

	ToGetLocationsLocationOutput() GetLocationsLocationOutput
	ToGetLocationsLocationOutputWithContext(context.Context) GetLocationsLocationOutput
}

type GetLocationsLocationArgs struct {
	City        pulumi.StringInput  `pulumi:"city"`
	Country     pulumi.StringInput  `pulumi:"country"`
	Description pulumi.StringInput  `pulumi:"description"`
	Id          pulumi.IntInput     `pulumi:"id"`
	Latitude    pulumi.Float64Input `pulumi:"latitude"`
	Longitude   pulumi.Float64Input `pulumi:"longitude"`
	Name        pulumi.StringInput  `pulumi:"name"`
	NetworkZone pulumi.StringInput  `pulumi:"networkZone"`
}

func (GetLocationsLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationsLocation)(nil)).Elem()
}

func (i GetLocationsLocationArgs) ToGetLocationsLocationOutput() GetLocationsLocationOutput {
	return i.ToGetLocationsLocationOutputWithContext(context.Background())
}

func (i GetLocationsLocationArgs) ToGetLocationsLocationOutputWithContext(ctx context.Context) GetLocationsLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLocationsLocationOutput)
}

// GetLocationsLocationArrayInput is an input type that accepts GetLocationsLocationArray and GetLocationsLocationArrayOutput values.
// You can construct a concrete instance of `GetLocationsLocationArrayInput` via:
//
//          GetLocationsLocationArray{ GetLocationsLocationArgs{...} }
type GetLocationsLocationArrayInput interface {
	pulumi.Input

	ToGetLocationsLocationArrayOutput() GetLocationsLocationArrayOutput
	ToGetLocationsLocationArrayOutputWithContext(context.Context) GetLocationsLocationArrayOutput
}

type GetLocationsLocationArray []GetLocationsLocationInput

func (GetLocationsLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLocationsLocation)(nil)).Elem()
}

func (i GetLocationsLocationArray) ToGetLocationsLocationArrayOutput() GetLocationsLocationArrayOutput {
	return i.ToGetLocationsLocationArrayOutputWithContext(context.Background())
}

func (i GetLocationsLocationArray) ToGetLocationsLocationArrayOutputWithContext(ctx context.Context) GetLocationsLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLocationsLocationArrayOutput)
}

type GetLocationsLocationOutput struct{ *pulumi.OutputState }

func (GetLocationsLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationsLocation)(nil)).Elem()
}

func (o GetLocationsLocationOutput) ToGetLocationsLocationOutput() GetLocationsLocationOutput {
	return o
}

func (o GetLocationsLocationOutput) ToGetLocationsLocationOutputWithContext(ctx context.Context) GetLocationsLocationOutput {
	return o
}

func (o GetLocationsLocationOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationsLocation) string { return v.City }).(pulumi.StringOutput)
}

func (o GetLocationsLocationOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationsLocation) string { return v.Country }).(pulumi.StringOutput)
}

func (o GetLocationsLocationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationsLocation) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetLocationsLocationOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetLocationsLocation) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetLocationsLocationOutput) Latitude() pulumi.Float64Output {
	return o.ApplyT(func(v GetLocationsLocation) float64 { return v.Latitude }).(pulumi.Float64Output)
}

func (o GetLocationsLocationOutput) Longitude() pulumi.Float64Output {
	return o.ApplyT(func(v GetLocationsLocation) float64 { return v.Longitude }).(pulumi.Float64Output)
}

func (o GetLocationsLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationsLocation) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetLocationsLocationOutput) NetworkZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationsLocation) string { return v.NetworkZone }).(pulumi.StringOutput)
}

type GetLocationsLocationArrayOutput struct{ *pulumi.OutputState }

func (GetLocationsLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLocationsLocation)(nil)).Elem()
}

func (o GetLocationsLocationArrayOutput) ToGetLocationsLocationArrayOutput() GetLocationsLocationArrayOutput {
	return o
}

func (o GetLocationsLocationArrayOutput) ToGetLocationsLocationArrayOutputWithContext(ctx context.Context) GetLocationsLocationArrayOutput {
	return o
}

func (o GetLocationsLocationArrayOutput) Index(i pulumi.IntInput) GetLocationsLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLocationsLocation {
		return vs[0].([]GetLocationsLocation)[vs[1].(int)]
	}).(GetLocationsLocationOutput)
}

type GetNetworksNetwork struct {
	DeleteProtection bool                   `pulumi:"deleteProtection"`
	Id               int                    `pulumi:"id"`
	IpRange          *string                `pulumi:"ipRange"`
	Labels           map[string]interface{} `pulumi:"labels"`
	Name             *string                `pulumi:"name"`
}

// GetNetworksNetworkInput is an input type that accepts GetNetworksNetworkArgs and GetNetworksNetworkOutput values.
// You can construct a concrete instance of `GetNetworksNetworkInput` via:
//
//          GetNetworksNetworkArgs{...}
type GetNetworksNetworkInput interface {
	pulumi.Input

	ToGetNetworksNetworkOutput() GetNetworksNetworkOutput
	ToGetNetworksNetworkOutputWithContext(context.Context) GetNetworksNetworkOutput
}

type GetNetworksNetworkArgs struct {
	DeleteProtection pulumi.BoolInput      `pulumi:"deleteProtection"`
	Id               pulumi.IntInput       `pulumi:"id"`
	IpRange          pulumi.StringPtrInput `pulumi:"ipRange"`
	Labels           pulumi.MapInput       `pulumi:"labels"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
}

func (GetNetworksNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworksNetwork)(nil)).Elem()
}

func (i GetNetworksNetworkArgs) ToGetNetworksNetworkOutput() GetNetworksNetworkOutput {
	return i.ToGetNetworksNetworkOutputWithContext(context.Background())
}

func (i GetNetworksNetworkArgs) ToGetNetworksNetworkOutputWithContext(ctx context.Context) GetNetworksNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworksNetworkOutput)
}

// GetNetworksNetworkArrayInput is an input type that accepts GetNetworksNetworkArray and GetNetworksNetworkArrayOutput values.
// You can construct a concrete instance of `GetNetworksNetworkArrayInput` via:
//
//          GetNetworksNetworkArray{ GetNetworksNetworkArgs{...} }
type GetNetworksNetworkArrayInput interface {
	pulumi.Input

	ToGetNetworksNetworkArrayOutput() GetNetworksNetworkArrayOutput
	ToGetNetworksNetworkArrayOutputWithContext(context.Context) GetNetworksNetworkArrayOutput
}

type GetNetworksNetworkArray []GetNetworksNetworkInput

func (GetNetworksNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworksNetwork)(nil)).Elem()
}

func (i GetNetworksNetworkArray) ToGetNetworksNetworkArrayOutput() GetNetworksNetworkArrayOutput {
	return i.ToGetNetworksNetworkArrayOutputWithContext(context.Background())
}

func (i GetNetworksNetworkArray) ToGetNetworksNetworkArrayOutputWithContext(ctx context.Context) GetNetworksNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworksNetworkArrayOutput)
}

type GetNetworksNetworkOutput struct{ *pulumi.OutputState }

func (GetNetworksNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworksNetwork)(nil)).Elem()
}

func (o GetNetworksNetworkOutput) ToGetNetworksNetworkOutput() GetNetworksNetworkOutput {
	return o
}

func (o GetNetworksNetworkOutput) ToGetNetworksNetworkOutputWithContext(ctx context.Context) GetNetworksNetworkOutput {
	return o
}

func (o GetNetworksNetworkOutput) DeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNetworksNetwork) bool { return v.DeleteProtection }).(pulumi.BoolOutput)
}

func (o GetNetworksNetworkOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworksNetwork) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetNetworksNetworkOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworksNetwork) *string { return v.IpRange }).(pulumi.StringPtrOutput)
}

func (o GetNetworksNetworkOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetNetworksNetwork) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetNetworksNetworkOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetworksNetwork) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GetNetworksNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetNetworksNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworksNetwork)(nil)).Elem()
}

func (o GetNetworksNetworkArrayOutput) ToGetNetworksNetworkArrayOutput() GetNetworksNetworkArrayOutput {
	return o
}

func (o GetNetworksNetworkArrayOutput) ToGetNetworksNetworkArrayOutputWithContext(ctx context.Context) GetNetworksNetworkArrayOutput {
	return o
}

func (o GetNetworksNetworkArrayOutput) Index(i pulumi.IntInput) GetNetworksNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworksNetwork {
		return vs[0].([]GetNetworksNetwork)[vs[1].(int)]
	}).(GetNetworksNetworkOutput)
}

type GetPlacementGroupsPlacementGroup struct {
	Id      *int                   `pulumi:"id"`
	Labels  map[string]interface{} `pulumi:"labels"`
	Name    string                 `pulumi:"name"`
	Servers []int                  `pulumi:"servers"`
	Type    *string                `pulumi:"type"`
}

// GetPlacementGroupsPlacementGroupInput is an input type that accepts GetPlacementGroupsPlacementGroupArgs and GetPlacementGroupsPlacementGroupOutput values.
// You can construct a concrete instance of `GetPlacementGroupsPlacementGroupInput` via:
//
//          GetPlacementGroupsPlacementGroupArgs{...}
type GetPlacementGroupsPlacementGroupInput interface {
	pulumi.Input

	ToGetPlacementGroupsPlacementGroupOutput() GetPlacementGroupsPlacementGroupOutput
	ToGetPlacementGroupsPlacementGroupOutputWithContext(context.Context) GetPlacementGroupsPlacementGroupOutput
}

type GetPlacementGroupsPlacementGroupArgs struct {
	Id      pulumi.IntPtrInput    `pulumi:"id"`
	Labels  pulumi.MapInput       `pulumi:"labels"`
	Name    pulumi.StringInput    `pulumi:"name"`
	Servers pulumi.IntArrayInput  `pulumi:"servers"`
	Type    pulumi.StringPtrInput `pulumi:"type"`
}

func (GetPlacementGroupsPlacementGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlacementGroupsPlacementGroup)(nil)).Elem()
}

func (i GetPlacementGroupsPlacementGroupArgs) ToGetPlacementGroupsPlacementGroupOutput() GetPlacementGroupsPlacementGroupOutput {
	return i.ToGetPlacementGroupsPlacementGroupOutputWithContext(context.Background())
}

func (i GetPlacementGroupsPlacementGroupArgs) ToGetPlacementGroupsPlacementGroupOutputWithContext(ctx context.Context) GetPlacementGroupsPlacementGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPlacementGroupsPlacementGroupOutput)
}

// GetPlacementGroupsPlacementGroupArrayInput is an input type that accepts GetPlacementGroupsPlacementGroupArray and GetPlacementGroupsPlacementGroupArrayOutput values.
// You can construct a concrete instance of `GetPlacementGroupsPlacementGroupArrayInput` via:
//
//          GetPlacementGroupsPlacementGroupArray{ GetPlacementGroupsPlacementGroupArgs{...} }
type GetPlacementGroupsPlacementGroupArrayInput interface {
	pulumi.Input

	ToGetPlacementGroupsPlacementGroupArrayOutput() GetPlacementGroupsPlacementGroupArrayOutput
	ToGetPlacementGroupsPlacementGroupArrayOutputWithContext(context.Context) GetPlacementGroupsPlacementGroupArrayOutput
}

type GetPlacementGroupsPlacementGroupArray []GetPlacementGroupsPlacementGroupInput

func (GetPlacementGroupsPlacementGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPlacementGroupsPlacementGroup)(nil)).Elem()
}

func (i GetPlacementGroupsPlacementGroupArray) ToGetPlacementGroupsPlacementGroupArrayOutput() GetPlacementGroupsPlacementGroupArrayOutput {
	return i.ToGetPlacementGroupsPlacementGroupArrayOutputWithContext(context.Background())
}

func (i GetPlacementGroupsPlacementGroupArray) ToGetPlacementGroupsPlacementGroupArrayOutputWithContext(ctx context.Context) GetPlacementGroupsPlacementGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPlacementGroupsPlacementGroupArrayOutput)
}

type GetPlacementGroupsPlacementGroupOutput struct{ *pulumi.OutputState }

func (GetPlacementGroupsPlacementGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlacementGroupsPlacementGroup)(nil)).Elem()
}

func (o GetPlacementGroupsPlacementGroupOutput) ToGetPlacementGroupsPlacementGroupOutput() GetPlacementGroupsPlacementGroupOutput {
	return o
}

func (o GetPlacementGroupsPlacementGroupOutput) ToGetPlacementGroupsPlacementGroupOutputWithContext(ctx context.Context) GetPlacementGroupsPlacementGroupOutput {
	return o
}

func (o GetPlacementGroupsPlacementGroupOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetPlacementGroupsPlacementGroup) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o GetPlacementGroupsPlacementGroupOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetPlacementGroupsPlacementGroup) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetPlacementGroupsPlacementGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlacementGroupsPlacementGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetPlacementGroupsPlacementGroupOutput) Servers() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetPlacementGroupsPlacementGroup) []int { return v.Servers }).(pulumi.IntArrayOutput)
}

func (o GetPlacementGroupsPlacementGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPlacementGroupsPlacementGroup) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetPlacementGroupsPlacementGroupArrayOutput struct{ *pulumi.OutputState }

func (GetPlacementGroupsPlacementGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPlacementGroupsPlacementGroup)(nil)).Elem()
}

func (o GetPlacementGroupsPlacementGroupArrayOutput) ToGetPlacementGroupsPlacementGroupArrayOutput() GetPlacementGroupsPlacementGroupArrayOutput {
	return o
}

func (o GetPlacementGroupsPlacementGroupArrayOutput) ToGetPlacementGroupsPlacementGroupArrayOutputWithContext(ctx context.Context) GetPlacementGroupsPlacementGroupArrayOutput {
	return o
}

func (o GetPlacementGroupsPlacementGroupArrayOutput) Index(i pulumi.IntInput) GetPlacementGroupsPlacementGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPlacementGroupsPlacementGroup {
		return vs[0].([]GetPlacementGroupsPlacementGroup)[vs[1].(int)]
	}).(GetPlacementGroupsPlacementGroupOutput)
}

type GetServerTypesServerType struct {
	Cores       int    `pulumi:"cores"`
	CpuType     string `pulumi:"cpuType"`
	Description string `pulumi:"description"`
	Disk        int    `pulumi:"disk"`
	Id          int    `pulumi:"id"`
	Memory      int    `pulumi:"memory"`
	Name        string `pulumi:"name"`
	StorageType string `pulumi:"storageType"`
}

// GetServerTypesServerTypeInput is an input type that accepts GetServerTypesServerTypeArgs and GetServerTypesServerTypeOutput values.
// You can construct a concrete instance of `GetServerTypesServerTypeInput` via:
//
//          GetServerTypesServerTypeArgs{...}
type GetServerTypesServerTypeInput interface {
	pulumi.Input

	ToGetServerTypesServerTypeOutput() GetServerTypesServerTypeOutput
	ToGetServerTypesServerTypeOutputWithContext(context.Context) GetServerTypesServerTypeOutput
}

type GetServerTypesServerTypeArgs struct {
	Cores       pulumi.IntInput    `pulumi:"cores"`
	CpuType     pulumi.StringInput `pulumi:"cpuType"`
	Description pulumi.StringInput `pulumi:"description"`
	Disk        pulumi.IntInput    `pulumi:"disk"`
	Id          pulumi.IntInput    `pulumi:"id"`
	Memory      pulumi.IntInput    `pulumi:"memory"`
	Name        pulumi.StringInput `pulumi:"name"`
	StorageType pulumi.StringInput `pulumi:"storageType"`
}

func (GetServerTypesServerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerTypesServerType)(nil)).Elem()
}

func (i GetServerTypesServerTypeArgs) ToGetServerTypesServerTypeOutput() GetServerTypesServerTypeOutput {
	return i.ToGetServerTypesServerTypeOutputWithContext(context.Background())
}

func (i GetServerTypesServerTypeArgs) ToGetServerTypesServerTypeOutputWithContext(ctx context.Context) GetServerTypesServerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerTypesServerTypeOutput)
}

// GetServerTypesServerTypeArrayInput is an input type that accepts GetServerTypesServerTypeArray and GetServerTypesServerTypeArrayOutput values.
// You can construct a concrete instance of `GetServerTypesServerTypeArrayInput` via:
//
//          GetServerTypesServerTypeArray{ GetServerTypesServerTypeArgs{...} }
type GetServerTypesServerTypeArrayInput interface {
	pulumi.Input

	ToGetServerTypesServerTypeArrayOutput() GetServerTypesServerTypeArrayOutput
	ToGetServerTypesServerTypeArrayOutputWithContext(context.Context) GetServerTypesServerTypeArrayOutput
}

type GetServerTypesServerTypeArray []GetServerTypesServerTypeInput

func (GetServerTypesServerTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerTypesServerType)(nil)).Elem()
}

func (i GetServerTypesServerTypeArray) ToGetServerTypesServerTypeArrayOutput() GetServerTypesServerTypeArrayOutput {
	return i.ToGetServerTypesServerTypeArrayOutputWithContext(context.Background())
}

func (i GetServerTypesServerTypeArray) ToGetServerTypesServerTypeArrayOutputWithContext(ctx context.Context) GetServerTypesServerTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerTypesServerTypeArrayOutput)
}

type GetServerTypesServerTypeOutput struct{ *pulumi.OutputState }

func (GetServerTypesServerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerTypesServerType)(nil)).Elem()
}

func (o GetServerTypesServerTypeOutput) ToGetServerTypesServerTypeOutput() GetServerTypesServerTypeOutput {
	return o
}

func (o GetServerTypesServerTypeOutput) ToGetServerTypesServerTypeOutputWithContext(ctx context.Context) GetServerTypesServerTypeOutput {
	return o
}

func (o GetServerTypesServerTypeOutput) Cores() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerTypesServerType) int { return v.Cores }).(pulumi.IntOutput)
}

func (o GetServerTypesServerTypeOutput) CpuType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerTypesServerType) string { return v.CpuType }).(pulumi.StringOutput)
}

func (o GetServerTypesServerTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerTypesServerType) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetServerTypesServerTypeOutput) Disk() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerTypesServerType) int { return v.Disk }).(pulumi.IntOutput)
}

func (o GetServerTypesServerTypeOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerTypesServerType) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetServerTypesServerTypeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerTypesServerType) int { return v.Memory }).(pulumi.IntOutput)
}

func (o GetServerTypesServerTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerTypesServerType) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServerTypesServerTypeOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerTypesServerType) string { return v.StorageType }).(pulumi.StringOutput)
}

type GetServerTypesServerTypeArrayOutput struct{ *pulumi.OutputState }

func (GetServerTypesServerTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerTypesServerType)(nil)).Elem()
}

func (o GetServerTypesServerTypeArrayOutput) ToGetServerTypesServerTypeArrayOutput() GetServerTypesServerTypeArrayOutput {
	return o
}

func (o GetServerTypesServerTypeArrayOutput) ToGetServerTypesServerTypeArrayOutputWithContext(ctx context.Context) GetServerTypesServerTypeArrayOutput {
	return o
}

func (o GetServerTypesServerTypeArrayOutput) Index(i pulumi.IntInput) GetServerTypesServerTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerTypesServerType {
		return vs[0].([]GetServerTypesServerType)[vs[1].(int)]
	}).(GetServerTypesServerTypeOutput)
}

type GetServersServer struct {
	BackupWindow      string                 `pulumi:"backupWindow"`
	Backups           bool                   `pulumi:"backups"`
	Datacenter        string                 `pulumi:"datacenter"`
	DeleteProtection  bool                   `pulumi:"deleteProtection"`
	FirewallIds       []int                  `pulumi:"firewallIds"`
	Id                int                    `pulumi:"id"`
	Image             string                 `pulumi:"image"`
	Ipv4Address       string                 `pulumi:"ipv4Address"`
	Ipv6Address       string                 `pulumi:"ipv6Address"`
	Ipv6Network       string                 `pulumi:"ipv6Network"`
	Iso               string                 `pulumi:"iso"`
	Labels            map[string]interface{} `pulumi:"labels"`
	Location          string                 `pulumi:"location"`
	Name              string                 `pulumi:"name"`
	PlacementGroupId  *int                   `pulumi:"placementGroupId"`
	RebuildProtection bool                   `pulumi:"rebuildProtection"`
	Rescue            string                 `pulumi:"rescue"`
	ServerType        string                 `pulumi:"serverType"`
	Status            string                 `pulumi:"status"`
}

// GetServersServerInput is an input type that accepts GetServersServerArgs and GetServersServerOutput values.
// You can construct a concrete instance of `GetServersServerInput` via:
//
//          GetServersServerArgs{...}
type GetServersServerInput interface {
	pulumi.Input

	ToGetServersServerOutput() GetServersServerOutput
	ToGetServersServerOutputWithContext(context.Context) GetServersServerOutput
}

type GetServersServerArgs struct {
	BackupWindow      pulumi.StringInput   `pulumi:"backupWindow"`
	Backups           pulumi.BoolInput     `pulumi:"backups"`
	Datacenter        pulumi.StringInput   `pulumi:"datacenter"`
	DeleteProtection  pulumi.BoolInput     `pulumi:"deleteProtection"`
	FirewallIds       pulumi.IntArrayInput `pulumi:"firewallIds"`
	Id                pulumi.IntInput      `pulumi:"id"`
	Image             pulumi.StringInput   `pulumi:"image"`
	Ipv4Address       pulumi.StringInput   `pulumi:"ipv4Address"`
	Ipv6Address       pulumi.StringInput   `pulumi:"ipv6Address"`
	Ipv6Network       pulumi.StringInput   `pulumi:"ipv6Network"`
	Iso               pulumi.StringInput   `pulumi:"iso"`
	Labels            pulumi.MapInput      `pulumi:"labels"`
	Location          pulumi.StringInput   `pulumi:"location"`
	Name              pulumi.StringInput   `pulumi:"name"`
	PlacementGroupId  pulumi.IntPtrInput   `pulumi:"placementGroupId"`
	RebuildProtection pulumi.BoolInput     `pulumi:"rebuildProtection"`
	Rescue            pulumi.StringInput   `pulumi:"rescue"`
	ServerType        pulumi.StringInput   `pulumi:"serverType"`
	Status            pulumi.StringInput   `pulumi:"status"`
}

func (GetServersServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServersServer)(nil)).Elem()
}

func (i GetServersServerArgs) ToGetServersServerOutput() GetServersServerOutput {
	return i.ToGetServersServerOutputWithContext(context.Background())
}

func (i GetServersServerArgs) ToGetServersServerOutputWithContext(ctx context.Context) GetServersServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServersServerOutput)
}

// GetServersServerArrayInput is an input type that accepts GetServersServerArray and GetServersServerArrayOutput values.
// You can construct a concrete instance of `GetServersServerArrayInput` via:
//
//          GetServersServerArray{ GetServersServerArgs{...} }
type GetServersServerArrayInput interface {
	pulumi.Input

	ToGetServersServerArrayOutput() GetServersServerArrayOutput
	ToGetServersServerArrayOutputWithContext(context.Context) GetServersServerArrayOutput
}

type GetServersServerArray []GetServersServerInput

func (GetServersServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServersServer)(nil)).Elem()
}

func (i GetServersServerArray) ToGetServersServerArrayOutput() GetServersServerArrayOutput {
	return i.ToGetServersServerArrayOutputWithContext(context.Background())
}

func (i GetServersServerArray) ToGetServersServerArrayOutputWithContext(ctx context.Context) GetServersServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServersServerArrayOutput)
}

type GetServersServerOutput struct{ *pulumi.OutputState }

func (GetServersServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServersServer)(nil)).Elem()
}

func (o GetServersServerOutput) ToGetServersServerOutput() GetServersServerOutput {
	return o
}

func (o GetServersServerOutput) ToGetServersServerOutputWithContext(ctx context.Context) GetServersServerOutput {
	return o
}

func (o GetServersServerOutput) BackupWindow() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.BackupWindow }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) Backups() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServersServer) bool { return v.Backups }).(pulumi.BoolOutput)
}

func (o GetServersServerOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Datacenter }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) DeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServersServer) bool { return v.DeleteProtection }).(pulumi.BoolOutput)
}

func (o GetServersServerOutput) FirewallIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetServersServer) []int { return v.FirewallIds }).(pulumi.IntArrayOutput)
}

func (o GetServersServerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetServersServer) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetServersServerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Image }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) Ipv6Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Ipv6Network }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) Iso() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Iso }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetServersServer) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetServersServerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) PlacementGroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetServersServer) *int { return v.PlacementGroupId }).(pulumi.IntPtrOutput)
}

func (o GetServersServerOutput) RebuildProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServersServer) bool { return v.RebuildProtection }).(pulumi.BoolOutput)
}

func (o GetServersServerOutput) Rescue() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Rescue }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.ServerType }).(pulumi.StringOutput)
}

func (o GetServersServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetServersServer) string { return v.Status }).(pulumi.StringOutput)
}

type GetServersServerArrayOutput struct{ *pulumi.OutputState }

func (GetServersServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServersServer)(nil)).Elem()
}

func (o GetServersServerArrayOutput) ToGetServersServerArrayOutput() GetServersServerArrayOutput {
	return o
}

func (o GetServersServerArrayOutput) ToGetServersServerArrayOutputWithContext(ctx context.Context) GetServersServerArrayOutput {
	return o
}

func (o GetServersServerArrayOutput) Index(i pulumi.IntInput) GetServersServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServersServer {
		return vs[0].([]GetServersServer)[vs[1].(int)]
	}).(GetServersServerOutput)
}

type GetSshKeysSshKey struct {
	Fingerprint string                 `pulumi:"fingerprint"`
	Id          int                    `pulumi:"id"`
	Labels      map[string]interface{} `pulumi:"labels"`
	Name        string                 `pulumi:"name"`
	PublicKey   string                 `pulumi:"publicKey"`
}

// GetSshKeysSshKeyInput is an input type that accepts GetSshKeysSshKeyArgs and GetSshKeysSshKeyOutput values.
// You can construct a concrete instance of `GetSshKeysSshKeyInput` via:
//
//          GetSshKeysSshKeyArgs{...}
type GetSshKeysSshKeyInput interface {
	pulumi.Input

	ToGetSshKeysSshKeyOutput() GetSshKeysSshKeyOutput
	ToGetSshKeysSshKeyOutputWithContext(context.Context) GetSshKeysSshKeyOutput
}

type GetSshKeysSshKeyArgs struct {
	Fingerprint pulumi.StringInput `pulumi:"fingerprint"`
	Id          pulumi.IntInput    `pulumi:"id"`
	Labels      pulumi.MapInput    `pulumi:"labels"`
	Name        pulumi.StringInput `pulumi:"name"`
	PublicKey   pulumi.StringInput `pulumi:"publicKey"`
}

func (GetSshKeysSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSshKeysSshKey)(nil)).Elem()
}

func (i GetSshKeysSshKeyArgs) ToGetSshKeysSshKeyOutput() GetSshKeysSshKeyOutput {
	return i.ToGetSshKeysSshKeyOutputWithContext(context.Background())
}

func (i GetSshKeysSshKeyArgs) ToGetSshKeysSshKeyOutputWithContext(ctx context.Context) GetSshKeysSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSshKeysSshKeyOutput)
}

// GetSshKeysSshKeyArrayInput is an input type that accepts GetSshKeysSshKeyArray and GetSshKeysSshKeyArrayOutput values.
// You can construct a concrete instance of `GetSshKeysSshKeyArrayInput` via:
//
//          GetSshKeysSshKeyArray{ GetSshKeysSshKeyArgs{...} }
type GetSshKeysSshKeyArrayInput interface {
	pulumi.Input

	ToGetSshKeysSshKeyArrayOutput() GetSshKeysSshKeyArrayOutput
	ToGetSshKeysSshKeyArrayOutputWithContext(context.Context) GetSshKeysSshKeyArrayOutput
}

type GetSshKeysSshKeyArray []GetSshKeysSshKeyInput

func (GetSshKeysSshKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSshKeysSshKey)(nil)).Elem()
}

func (i GetSshKeysSshKeyArray) ToGetSshKeysSshKeyArrayOutput() GetSshKeysSshKeyArrayOutput {
	return i.ToGetSshKeysSshKeyArrayOutputWithContext(context.Background())
}

func (i GetSshKeysSshKeyArray) ToGetSshKeysSshKeyArrayOutputWithContext(ctx context.Context) GetSshKeysSshKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSshKeysSshKeyArrayOutput)
}

type GetSshKeysSshKeyOutput struct{ *pulumi.OutputState }

func (GetSshKeysSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSshKeysSshKey)(nil)).Elem()
}

func (o GetSshKeysSshKeyOutput) ToGetSshKeysSshKeyOutput() GetSshKeysSshKeyOutput {
	return o
}

func (o GetSshKeysSshKeyOutput) ToGetSshKeysSshKeyOutputWithContext(ctx context.Context) GetSshKeysSshKeyOutput {
	return o
}

func (o GetSshKeysSshKeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetSshKeysSshKey) string { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o GetSshKeysSshKeyOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetSshKeysSshKey) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetSshKeysSshKeyOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetSshKeysSshKey) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetSshKeysSshKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSshKeysSshKey) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSshKeysSshKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSshKeysSshKey) string { return v.PublicKey }).(pulumi.StringOutput)
}

type GetSshKeysSshKeyArrayOutput struct{ *pulumi.OutputState }

func (GetSshKeysSshKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSshKeysSshKey)(nil)).Elem()
}

func (o GetSshKeysSshKeyArrayOutput) ToGetSshKeysSshKeyArrayOutput() GetSshKeysSshKeyArrayOutput {
	return o
}

func (o GetSshKeysSshKeyArrayOutput) ToGetSshKeysSshKeyArrayOutputWithContext(ctx context.Context) GetSshKeysSshKeyArrayOutput {
	return o
}

func (o GetSshKeysSshKeyArrayOutput) Index(i pulumi.IntInput) GetSshKeysSshKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSshKeysSshKey {
		return vs[0].([]GetSshKeysSshKey)[vs[1].(int)]
	}).(GetSshKeysSshKeyOutput)
}

type GetVolumesVolume struct {
	DeleteProtection bool                   `pulumi:"deleteProtection"`
	Id               int                    `pulumi:"id"`
	Labels           map[string]interface{} `pulumi:"labels"`
	LinuxDevice      string                 `pulumi:"linuxDevice"`
	Location         *string                `pulumi:"location"`
	Name             string                 `pulumi:"name"`
	ServerId         *int                   `pulumi:"serverId"`
	Size             int                    `pulumi:"size"`
}

// GetVolumesVolumeInput is an input type that accepts GetVolumesVolumeArgs and GetVolumesVolumeOutput values.
// You can construct a concrete instance of `GetVolumesVolumeInput` via:
//
//          GetVolumesVolumeArgs{...}
type GetVolumesVolumeInput interface {
	pulumi.Input

	ToGetVolumesVolumeOutput() GetVolumesVolumeOutput
	ToGetVolumesVolumeOutputWithContext(context.Context) GetVolumesVolumeOutput
}

type GetVolumesVolumeArgs struct {
	DeleteProtection pulumi.BoolInput      `pulumi:"deleteProtection"`
	Id               pulumi.IntInput       `pulumi:"id"`
	Labels           pulumi.MapInput       `pulumi:"labels"`
	LinuxDevice      pulumi.StringInput    `pulumi:"linuxDevice"`
	Location         pulumi.StringPtrInput `pulumi:"location"`
	Name             pulumi.StringInput    `pulumi:"name"`
	ServerId         pulumi.IntPtrInput    `pulumi:"serverId"`
	Size             pulumi.IntInput       `pulumi:"size"`
}

func (GetVolumesVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolume)(nil)).Elem()
}

func (i GetVolumesVolumeArgs) ToGetVolumesVolumeOutput() GetVolumesVolumeOutput {
	return i.ToGetVolumesVolumeOutputWithContext(context.Background())
}

func (i GetVolumesVolumeArgs) ToGetVolumesVolumeOutputWithContext(ctx context.Context) GetVolumesVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeOutput)
}

// GetVolumesVolumeArrayInput is an input type that accepts GetVolumesVolumeArray and GetVolumesVolumeArrayOutput values.
// You can construct a concrete instance of `GetVolumesVolumeArrayInput` via:
//
//          GetVolumesVolumeArray{ GetVolumesVolumeArgs{...} }
type GetVolumesVolumeArrayInput interface {
	pulumi.Input

	ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput
	ToGetVolumesVolumeArrayOutputWithContext(context.Context) GetVolumesVolumeArrayOutput
}

type GetVolumesVolumeArray []GetVolumesVolumeInput

func (GetVolumesVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolume)(nil)).Elem()
}

func (i GetVolumesVolumeArray) ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput {
	return i.ToGetVolumesVolumeArrayOutputWithContext(context.Background())
}

func (i GetVolumesVolumeArray) ToGetVolumesVolumeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeArrayOutput)
}

type GetVolumesVolumeOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolume)(nil)).Elem()
}

func (o GetVolumesVolumeOutput) ToGetVolumesVolumeOutput() GetVolumesVolumeOutput {
	return o
}

func (o GetVolumesVolumeOutput) ToGetVolumesVolumeOutputWithContext(ctx context.Context) GetVolumesVolumeOutput {
	return o
}

func (o GetVolumesVolumeOutput) DeleteProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumesVolume) bool { return v.DeleteProtection }).(pulumi.BoolOutput)
}

func (o GetVolumesVolumeOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolume) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetVolumesVolumeOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetVolumesVolume) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetVolumesVolumeOutput) LinuxDevice() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.LinuxDevice }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesVolume) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o GetVolumesVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeOutput) ServerId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetVolumesVolume) *int { return v.ServerId }).(pulumi.IntPtrOutput)
}

func (o GetVolumesVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolume) int { return v.Size }).(pulumi.IntOutput)
}

type GetVolumesVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolume)(nil)).Elem()
}

func (o GetVolumesVolumeArrayOutput) ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput {
	return o
}

func (o GetVolumesVolumeArrayOutput) ToGetVolumesVolumeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeArrayOutput {
	return o
}

func (o GetVolumesVolumeArrayOutput) Index(i pulumi.IntInput) GetVolumesVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumesVolume {
		return vs[0].([]GetVolumesVolume)[vs[1].(int)]
	}).(GetVolumesVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallApplyToInput)(nil)).Elem(), FirewallApplyToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallApplyToArrayInput)(nil)).Elem(), FirewallApplyToArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleInput)(nil)).Elem(), FirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallRuleArrayInput)(nil)).Elem(), FirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerAlgorithmInput)(nil)).Elem(), LoadBalancerAlgorithmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerAlgorithmPtrInput)(nil)).Elem(), LoadBalancerAlgorithmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerServiceHealthCheckInput)(nil)).Elem(), LoadBalancerServiceHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerServiceHealthCheckPtrInput)(nil)).Elem(), LoadBalancerServiceHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerServiceHealthCheckHttpInput)(nil)).Elem(), LoadBalancerServiceHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerServiceHealthCheckHttpPtrInput)(nil)).Elem(), LoadBalancerServiceHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerServiceHttpInput)(nil)).Elem(), LoadBalancerServiceHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerServiceHttpPtrInput)(nil)).Elem(), LoadBalancerServiceHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerTargetTypeInput)(nil)).Elem(), LoadBalancerTargetTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerTargetTypeArrayInput)(nil)).Elem(), LoadBalancerTargetTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNetworkTypeInput)(nil)).Elem(), ServerNetworkTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerNetworkTypeArrayInput)(nil)).Elem(), ServerNetworkTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateInput)(nil)).Elem(), GetCertificatesCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateArrayInput)(nil)).Elem(), GetCertificatesCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatacentersDatacenterInput)(nil)).Elem(), GetDatacentersDatacenterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatacentersDatacenterArrayInput)(nil)).Elem(), GetDatacentersDatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallApplyToInput)(nil)).Elem(), GetFirewallApplyToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallApplyToArrayInput)(nil)).Elem(), GetFirewallApplyToArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallRuleInput)(nil)).Elem(), GetFirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallRuleArrayInput)(nil)).Elem(), GetFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallsFirewallInput)(nil)).Elem(), GetFirewallsFirewallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallsFirewallArrayInput)(nil)).Elem(), GetFirewallsFirewallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallsFirewallApplyToInput)(nil)).Elem(), GetFirewallsFirewallApplyToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallsFirewallApplyToArrayInput)(nil)).Elem(), GetFirewallsFirewallApplyToArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallsFirewallRuleInput)(nil)).Elem(), GetFirewallsFirewallRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFirewallsFirewallRuleArrayInput)(nil)).Elem(), GetFirewallsFirewallRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFloatingIpsFloatingIpInput)(nil)).Elem(), GetFloatingIpsFloatingIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFloatingIpsFloatingIpArrayInput)(nil)).Elem(), GetFloatingIpsFloatingIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesImageInput)(nil)).Elem(), GetImagesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesImageArrayInput)(nil)).Elem(), GetImagesImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerAlgorithmInput)(nil)).Elem(), GetLoadBalancerAlgorithmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerAlgorithmArrayInput)(nil)).Elem(), GetLoadBalancerAlgorithmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerServiceTypeInput)(nil)).Elem(), GetLoadBalancerServiceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerServiceTypeArrayInput)(nil)).Elem(), GetLoadBalancerServiceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerServiceHealthCheckInput)(nil)).Elem(), GetLoadBalancerServiceHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerServiceHealthCheckArrayInput)(nil)).Elem(), GetLoadBalancerServiceHealthCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerServiceHealthCheckHttpInput)(nil)).Elem(), GetLoadBalancerServiceHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerServiceHealthCheckHttpArrayInput)(nil)).Elem(), GetLoadBalancerServiceHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerServiceHttpInput)(nil)).Elem(), GetLoadBalancerServiceHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerServiceHttpArrayInput)(nil)).Elem(), GetLoadBalancerServiceHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerTargetTypeInput)(nil)).Elem(), GetLoadBalancerTargetTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancerTargetTypeArrayInput)(nil)).Elem(), GetLoadBalancerTargetTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerInput)(nil)).Elem(), GetLoadBalancersLoadBalancerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerArrayInput)(nil)).Elem(), GetLoadBalancersLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerAlgorithmInput)(nil)).Elem(), GetLoadBalancersLoadBalancerAlgorithmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerAlgorithmArrayInput)(nil)).Elem(), GetLoadBalancersLoadBalancerAlgorithmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceInput)(nil)).Elem(), GetLoadBalancersLoadBalancerServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceArrayInput)(nil)).Elem(), GetLoadBalancersLoadBalancerServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHealthCheckInput)(nil)).Elem(), GetLoadBalancersLoadBalancerServiceHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHealthCheckArrayInput)(nil)).Elem(), GetLoadBalancersLoadBalancerServiceHealthCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHealthCheckHttpInput)(nil)).Elem(), GetLoadBalancersLoadBalancerServiceHealthCheckHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayInput)(nil)).Elem(), GetLoadBalancersLoadBalancerServiceHealthCheckHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHttpInput)(nil)).Elem(), GetLoadBalancersLoadBalancerServiceHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerServiceHttpArrayInput)(nil)).Elem(), GetLoadBalancersLoadBalancerServiceHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerTargetInput)(nil)).Elem(), GetLoadBalancersLoadBalancerTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoadBalancersLoadBalancerTargetArrayInput)(nil)).Elem(), GetLoadBalancersLoadBalancerTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLocationsLocationInput)(nil)).Elem(), GetLocationsLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLocationsLocationArrayInput)(nil)).Elem(), GetLocationsLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworksNetworkInput)(nil)).Elem(), GetNetworksNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworksNetworkArrayInput)(nil)).Elem(), GetNetworksNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPlacementGroupsPlacementGroupInput)(nil)).Elem(), GetPlacementGroupsPlacementGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPlacementGroupsPlacementGroupArrayInput)(nil)).Elem(), GetPlacementGroupsPlacementGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerTypesServerTypeInput)(nil)).Elem(), GetServerTypesServerTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerTypesServerTypeArrayInput)(nil)).Elem(), GetServerTypesServerTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServersServerInput)(nil)).Elem(), GetServersServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServersServerArrayInput)(nil)).Elem(), GetServersServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSshKeysSshKeyInput)(nil)).Elem(), GetSshKeysSshKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSshKeysSshKeyArrayInput)(nil)).Elem(), GetSshKeysSshKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeInput)(nil)).Elem(), GetVolumesVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeArrayInput)(nil)).Elem(), GetVolumesVolumeArray{})
	pulumi.RegisterOutputType(FirewallApplyToOutput{})
	pulumi.RegisterOutputType(FirewallApplyToArrayOutput{})
	pulumi.RegisterOutputType(FirewallRuleOutput{})
	pulumi.RegisterOutputType(FirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerAlgorithmOutput{})
	pulumi.RegisterOutputType(LoadBalancerAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerServiceHealthCheckOutput{})
	pulumi.RegisterOutputType(LoadBalancerServiceHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerServiceHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(LoadBalancerServiceHealthCheckHttpPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerServiceHttpOutput{})
	pulumi.RegisterOutputType(LoadBalancerServiceHttpPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerTargetTypeOutput{})
	pulumi.RegisterOutputType(LoadBalancerTargetTypeArrayOutput{})
	pulumi.RegisterOutputType(ServerNetworkTypeOutput{})
	pulumi.RegisterOutputType(ServerNetworkTypeArrayOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetDatacentersDatacenterOutput{})
	pulumi.RegisterOutputType(GetDatacentersDatacenterArrayOutput{})
	pulumi.RegisterOutputType(GetFirewallApplyToOutput{})
	pulumi.RegisterOutputType(GetFirewallApplyToArrayOutput{})
	pulumi.RegisterOutputType(GetFirewallRuleOutput{})
	pulumi.RegisterOutputType(GetFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(GetFirewallsFirewallOutput{})
	pulumi.RegisterOutputType(GetFirewallsFirewallArrayOutput{})
	pulumi.RegisterOutputType(GetFirewallsFirewallApplyToOutput{})
	pulumi.RegisterOutputType(GetFirewallsFirewallApplyToArrayOutput{})
	pulumi.RegisterOutputType(GetFirewallsFirewallRuleOutput{})
	pulumi.RegisterOutputType(GetFirewallsFirewallRuleArrayOutput{})
	pulumi.RegisterOutputType(GetFloatingIpsFloatingIpOutput{})
	pulumi.RegisterOutputType(GetFloatingIpsFloatingIpArrayOutput{})
	pulumi.RegisterOutputType(GetImagesImageOutput{})
	pulumi.RegisterOutputType(GetImagesImageArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerAlgorithmOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerAlgorithmArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerServiceTypeOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerServiceTypeArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerServiceHealthCheckOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerServiceHealthCheckArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerServiceHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerServiceHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerServiceHttpOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerServiceHttpArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerTargetTypeOutput{})
	pulumi.RegisterOutputType(GetLoadBalancerTargetTypeArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerAlgorithmOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerAlgorithmArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerServiceOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerServiceArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerServiceHealthCheckOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerServiceHealthCheckArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerServiceHealthCheckHttpOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerServiceHealthCheckHttpArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerServiceHttpOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerServiceHttpArrayOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerTargetOutput{})
	pulumi.RegisterOutputType(GetLoadBalancersLoadBalancerTargetArrayOutput{})
	pulumi.RegisterOutputType(GetLocationsLocationOutput{})
	pulumi.RegisterOutputType(GetLocationsLocationArrayOutput{})
	pulumi.RegisterOutputType(GetNetworksNetworkOutput{})
	pulumi.RegisterOutputType(GetNetworksNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetPlacementGroupsPlacementGroupOutput{})
	pulumi.RegisterOutputType(GetPlacementGroupsPlacementGroupArrayOutput{})
	pulumi.RegisterOutputType(GetServerTypesServerTypeOutput{})
	pulumi.RegisterOutputType(GetServerTypesServerTypeArrayOutput{})
	pulumi.RegisterOutputType(GetServersServerOutput{})
	pulumi.RegisterOutputType(GetServersServerArrayOutput{})
	pulumi.RegisterOutputType(GetSshKeysSshKeyOutput{})
	pulumi.RegisterOutputType(GetSshKeysSshKeyArrayOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeArrayOutput{})
}
