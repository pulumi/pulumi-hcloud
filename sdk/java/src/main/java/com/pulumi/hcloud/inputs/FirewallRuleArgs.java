// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirewallRuleArgs Empty = new FirewallRuleArgs();

    /**
     * Description of the firewall rule
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the firewall rule
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
     * is `out`)
     * 
     */
    @Import(name="destinationIps")
    private @Nullable Output<List<String>> destinationIps;

    /**
     * @return List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
     * is `out`)
     * 
     */
    public Optional<Output<List<String>>> destinationIps() {
        return Optional.ofNullable(this.destinationIps);
    }

    /**
     * Direction of the Firewall Rule. `in`
     * 
     */
    @Import(name="direction", required=true)
    private Output<String> direction;

    /**
     * @return Direction of the Firewall Rule. `in`
     * 
     */
    public Output<String> direction() {
        return this.direction;
    }

    /**
     * Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`
     * to allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and 85.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`
     * to allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and 85.
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
     * is `in`)
     * 
     */
    @Import(name="sourceIps")
    private @Nullable Output<List<String>> sourceIps;

    /**
     * @return List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
     * is `in`)
     * 
     */
    public Optional<Output<List<String>>> sourceIps() {
        return Optional.ofNullable(this.sourceIps);
    }

    private FirewallRuleArgs() {}

    private FirewallRuleArgs(FirewallRuleArgs $) {
        this.description = $.description;
        this.destinationIps = $.destinationIps;
        this.direction = $.direction;
        this.port = $.port;
        this.protocol = $.protocol;
        this.sourceIps = $.sourceIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallRuleArgs $;

        public Builder() {
            $ = new FirewallRuleArgs();
        }

        public Builder(FirewallRuleArgs defaults) {
            $ = new FirewallRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the firewall rule
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the firewall rule
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationIps List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
         * is `out`)
         * 
         * @return builder
         * 
         */
        public Builder destinationIps(@Nullable Output<List<String>> destinationIps) {
            $.destinationIps = destinationIps;
            return this;
        }

        /**
         * @param destinationIps List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
         * is `out`)
         * 
         * @return builder
         * 
         */
        public Builder destinationIps(List<String> destinationIps) {
            return destinationIps(Output.of(destinationIps));
        }

        /**
         * @param destinationIps List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
         * is `out`)
         * 
         * @return builder
         * 
         */
        public Builder destinationIps(String... destinationIps) {
            return destinationIps(List.of(destinationIps));
        }

        /**
         * @param direction Direction of the Firewall Rule. `in`
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction of the Firewall Rule. `in`
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param port Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`
         * to allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and 85.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`. You can use `any`
         * to allow all ports for the specific protocol. Port ranges are also possible: `80-85` allows all ports between 80 and 85.
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param sourceIps List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
         * is `in`)
         * 
         * @return builder
         * 
         */
        public Builder sourceIps(@Nullable Output<List<String>> sourceIps) {
            $.sourceIps = sourceIps;
            return this;
        }

        /**
         * @param sourceIps List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
         * is `in`)
         * 
         * @return builder
         * 
         */
        public Builder sourceIps(List<String> sourceIps) {
            return sourceIps(Output.of(sourceIps));
        }

        /**
         * @param sourceIps List of IPs or CIDRs that are allowed within this Firewall Rule (when `direction`
         * is `in`)
         * 
         * @return builder
         * 
         */
        public Builder sourceIps(String... sourceIps) {
            return sourceIps(List.of(sourceIps));
        }

        public FirewallRuleArgs build() {
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("FirewallRuleArgs", "direction");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("FirewallRuleArgs", "protocol");
            }
            return $;
        }
    }

}
