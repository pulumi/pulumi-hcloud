// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.deployment.InvokeOutputOptions;
import com.pulumi.hcloud.Utilities;
import com.pulumi.hcloud.inputs.GetCertificateArgs;
import com.pulumi.hcloud.inputs.GetCertificatePlainArgs;
import com.pulumi.hcloud.inputs.GetCertificatesArgs;
import com.pulumi.hcloud.inputs.GetCertificatesPlainArgs;
import com.pulumi.hcloud.inputs.GetDatacenterArgs;
import com.pulumi.hcloud.inputs.GetDatacenterPlainArgs;
import com.pulumi.hcloud.inputs.GetFirewallArgs;
import com.pulumi.hcloud.inputs.GetFirewallPlainArgs;
import com.pulumi.hcloud.inputs.GetFirewallsArgs;
import com.pulumi.hcloud.inputs.GetFirewallsPlainArgs;
import com.pulumi.hcloud.inputs.GetFloatingIpArgs;
import com.pulumi.hcloud.inputs.GetFloatingIpPlainArgs;
import com.pulumi.hcloud.inputs.GetFloatingIpsArgs;
import com.pulumi.hcloud.inputs.GetFloatingIpsPlainArgs;
import com.pulumi.hcloud.inputs.GetImageArgs;
import com.pulumi.hcloud.inputs.GetImagePlainArgs;
import com.pulumi.hcloud.inputs.GetImagesArgs;
import com.pulumi.hcloud.inputs.GetImagesPlainArgs;
import com.pulumi.hcloud.inputs.GetLoadBalancerArgs;
import com.pulumi.hcloud.inputs.GetLoadBalancerPlainArgs;
import com.pulumi.hcloud.inputs.GetLoadBalancerTypeArgs;
import com.pulumi.hcloud.inputs.GetLoadBalancerTypePlainArgs;
import com.pulumi.hcloud.inputs.GetLoadBalancersArgs;
import com.pulumi.hcloud.inputs.GetLoadBalancersPlainArgs;
import com.pulumi.hcloud.inputs.GetLocationArgs;
import com.pulumi.hcloud.inputs.GetLocationPlainArgs;
import com.pulumi.hcloud.inputs.GetNetworkArgs;
import com.pulumi.hcloud.inputs.GetNetworkPlainArgs;
import com.pulumi.hcloud.inputs.GetNetworksArgs;
import com.pulumi.hcloud.inputs.GetNetworksPlainArgs;
import com.pulumi.hcloud.inputs.GetPlacementGroupArgs;
import com.pulumi.hcloud.inputs.GetPlacementGroupPlainArgs;
import com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;
import com.pulumi.hcloud.inputs.GetPlacementGroupsPlainArgs;
import com.pulumi.hcloud.inputs.GetPrimaryIpArgs;
import com.pulumi.hcloud.inputs.GetPrimaryIpPlainArgs;
import com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;
import com.pulumi.hcloud.inputs.GetPrimaryIpsPlainArgs;
import com.pulumi.hcloud.inputs.GetServerArgs;
import com.pulumi.hcloud.inputs.GetServerPlainArgs;
import com.pulumi.hcloud.inputs.GetServerTypeArgs;
import com.pulumi.hcloud.inputs.GetServerTypePlainArgs;
import com.pulumi.hcloud.inputs.GetServersArgs;
import com.pulumi.hcloud.inputs.GetServersPlainArgs;
import com.pulumi.hcloud.inputs.GetSshKeyArgs;
import com.pulumi.hcloud.inputs.GetSshKeyPlainArgs;
import com.pulumi.hcloud.inputs.GetSshKeysArgs;
import com.pulumi.hcloud.inputs.GetSshKeysPlainArgs;
import com.pulumi.hcloud.inputs.GetVolumeArgs;
import com.pulumi.hcloud.inputs.GetVolumePlainArgs;
import com.pulumi.hcloud.inputs.GetVolumesArgs;
import com.pulumi.hcloud.inputs.GetVolumesPlainArgs;
import com.pulumi.hcloud.outputs.GetCertificateResult;
import com.pulumi.hcloud.outputs.GetCertificatesResult;
import com.pulumi.hcloud.outputs.GetDatacenterResult;
import com.pulumi.hcloud.outputs.GetDatacentersResult;
import com.pulumi.hcloud.outputs.GetFirewallResult;
import com.pulumi.hcloud.outputs.GetFirewallsResult;
import com.pulumi.hcloud.outputs.GetFloatingIpResult;
import com.pulumi.hcloud.outputs.GetFloatingIpsResult;
import com.pulumi.hcloud.outputs.GetImageResult;
import com.pulumi.hcloud.outputs.GetImagesResult;
import com.pulumi.hcloud.outputs.GetLoadBalancerResult;
import com.pulumi.hcloud.outputs.GetLoadBalancerTypeResult;
import com.pulumi.hcloud.outputs.GetLoadBalancerTypesResult;
import com.pulumi.hcloud.outputs.GetLoadBalancersResult;
import com.pulumi.hcloud.outputs.GetLocationResult;
import com.pulumi.hcloud.outputs.GetLocationsResult;
import com.pulumi.hcloud.outputs.GetNetworkResult;
import com.pulumi.hcloud.outputs.GetNetworksResult;
import com.pulumi.hcloud.outputs.GetPlacementGroupResult;
import com.pulumi.hcloud.outputs.GetPlacementGroupsResult;
import com.pulumi.hcloud.outputs.GetPrimaryIpResult;
import com.pulumi.hcloud.outputs.GetPrimaryIpsResult;
import com.pulumi.hcloud.outputs.GetServerResult;
import com.pulumi.hcloud.outputs.GetServerTypeResult;
import com.pulumi.hcloud.outputs.GetServerTypesResult;
import com.pulumi.hcloud.outputs.GetServersResult;
import com.pulumi.hcloud.outputs.GetSshKeyResult;
import com.pulumi.hcloud.outputs.GetSshKeysResult;
import com.pulumi.hcloud.outputs.GetVolumeResult;
import com.pulumi.hcloud.outputs.GetVolumesResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class HcloudFunctions {
    /**
     * Provides details about a specific Hetzner Cloud Certificate.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name("sample-certificate-1")
     *             .build());
     * 
     *         final var sampleCertificate2 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificateResult> getCertificate() {
        return getCertificate(GetCertificateArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Certificate.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name("sample-certificate-1")
     *             .build());
     * 
     *         final var sampleCertificate2 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCertificateResult> getCertificatePlain() {
        return getCertificatePlain(GetCertificatePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Certificate.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name("sample-certificate-1")
     *             .build());
     * 
     *         final var sampleCertificate2 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificateResult> getCertificate(GetCertificateArgs args) {
        return getCertificate(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Certificate.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name("sample-certificate-1")
     *             .build());
     * 
     *         final var sampleCertificate2 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCertificateResult> getCertificatePlain(GetCertificatePlainArgs args) {
        return getCertificatePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Certificate.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name("sample-certificate-1")
     *             .build());
     * 
     *         final var sampleCertificate2 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificateResult> getCertificate(GetCertificateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getCertificate:getCertificate", TypeShape.of(GetCertificateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Certificate.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name("sample-certificate-1")
     *             .build());
     * 
     *         final var sampleCertificate2 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificateResult> getCertificate(GetCertificateArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getCertificate:getCertificate", TypeShape.of(GetCertificateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Certificate.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name("sample-certificate-1")
     *             .build());
     * 
     *         final var sampleCertificate2 = HcloudFunctions.getCertificate(GetCertificateArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCertificateResult> getCertificatePlain(GetCertificatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getCertificate:getCertificate", TypeShape.of(GetCertificateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Certificates.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificates(GetCertificatesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificatesResult> getCertificates() {
        return getCertificates(GetCertificatesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Certificates.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificates(GetCertificatesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCertificatesResult> getCertificatesPlain() {
        return getCertificatesPlain(GetCertificatesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Certificates.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificates(GetCertificatesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificatesResult> getCertificates(GetCertificatesArgs args) {
        return getCertificates(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Certificates.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificates(GetCertificatesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCertificatesResult> getCertificatesPlain(GetCertificatesPlainArgs args) {
        return getCertificatesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Certificates.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificates(GetCertificatesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificatesResult> getCertificates(GetCertificatesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getCertificates:getCertificates", TypeShape.of(GetCertificatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Certificates.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificates(GetCertificatesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCertificatesResult> getCertificates(GetCertificatesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getCertificates:getCertificates", TypeShape.of(GetCertificatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Certificates.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetCertificatesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleCertificate1 = HcloudFunctions.getCertificates(GetCertificatesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCertificatesResult> getCertificatesPlain(GetCertificatesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getCertificates:getCertificates", TypeShape.of(GetCertificatesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Datacenter.
     * 
     * Use this resource to get detailed information about a specific Datacenter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetDatacenterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .id(4)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .name("fsn1-dc14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatacenterResult> getDatacenter() {
        return getDatacenter(GetDatacenterArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Datacenter.
     * 
     * Use this resource to get detailed information about a specific Datacenter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetDatacenterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .id(4)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .name("fsn1-dc14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatacenterResult> getDatacenterPlain() {
        return getDatacenterPlain(GetDatacenterPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Datacenter.
     * 
     * Use this resource to get detailed information about a specific Datacenter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetDatacenterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .id(4)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .name("fsn1-dc14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatacenterResult> getDatacenter(GetDatacenterArgs args) {
        return getDatacenter(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Datacenter.
     * 
     * Use this resource to get detailed information about a specific Datacenter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetDatacenterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .id(4)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .name("fsn1-dc14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatacenterResult> getDatacenterPlain(GetDatacenterPlainArgs args) {
        return getDatacenterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Datacenter.
     * 
     * Use this resource to get detailed information about a specific Datacenter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetDatacenterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .id(4)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .name("fsn1-dc14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatacenterResult> getDatacenter(GetDatacenterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getDatacenter:getDatacenter", TypeShape.of(GetDatacenterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Datacenter.
     * 
     * Use this resource to get detailed information about a specific Datacenter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetDatacenterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .id(4)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .name("fsn1-dc14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDatacenterResult> getDatacenter(GetDatacenterArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getDatacenter:getDatacenter", TypeShape.of(GetDatacenterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Datacenter.
     * 
     * Use this resource to get detailed information about a specific Datacenter.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetDatacenterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .id(4)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getDatacenter(GetDatacenterArgs.builder()
     *             .name("fsn1-dc14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDatacenterResult> getDatacenterPlain(GetDatacenterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getDatacenter:getDatacenter", TypeShape.of(GetDatacenterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Datacenters.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several Datacenters.
     * 
     */
    public static Output<GetDatacentersResult> getDatacenters() {
        return getDatacenters(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Datacenters.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several Datacenters.
     * 
     */
    public static CompletableFuture<GetDatacentersResult> getDatacentersPlain() {
        return getDatacentersPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Datacenters.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several Datacenters.
     * 
     */
    public static Output<GetDatacentersResult> getDatacenters(InvokeArgs args) {
        return getDatacenters(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Datacenters.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several Datacenters.
     * 
     */
    public static CompletableFuture<GetDatacentersResult> getDatacentersPlain(InvokeArgs args) {
        return getDatacentersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Datacenters.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several Datacenters.
     * 
     */
    public static Output<GetDatacentersResult> getDatacenters(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getDatacenters:getDatacenters", TypeShape.of(GetDatacentersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Datacenters.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several Datacenters.
     * 
     */
    public static Output<GetDatacentersResult> getDatacenters(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getDatacenters:getDatacenters", TypeShape.of(GetDatacentersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Datacenters.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several Datacenters.
     * 
     */
    public static CompletableFuture<GetDatacentersResult> getDatacentersPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getDatacenters:getDatacenters", TypeShape.of(GetDatacentersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Firewall.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .name("sample-firewall-1")
     *             .build());
     * 
     *         final var sampleFirewall2 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFirewallResult> getFirewall() {
        return getFirewall(GetFirewallArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Firewall.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .name("sample-firewall-1")
     *             .build());
     * 
     *         final var sampleFirewall2 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFirewallResult> getFirewallPlain() {
        return getFirewallPlain(GetFirewallPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Firewall.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .name("sample-firewall-1")
     *             .build());
     * 
     *         final var sampleFirewall2 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFirewallResult> getFirewall(GetFirewallArgs args) {
        return getFirewall(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Firewall.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .name("sample-firewall-1")
     *             .build());
     * 
     *         final var sampleFirewall2 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFirewallResult> getFirewallPlain(GetFirewallPlainArgs args) {
        return getFirewallPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Firewall.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .name("sample-firewall-1")
     *             .build());
     * 
     *         final var sampleFirewall2 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFirewallResult> getFirewall(GetFirewallArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getFirewall:getFirewall", TypeShape.of(GetFirewallResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Firewall.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .name("sample-firewall-1")
     *             .build());
     * 
     *         final var sampleFirewall2 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFirewallResult> getFirewall(GetFirewallArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getFirewall:getFirewall", TypeShape.of(GetFirewallResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Firewall.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .name("sample-firewall-1")
     *             .build());
     * 
     *         final var sampleFirewall2 = HcloudFunctions.getFirewall(GetFirewallArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFirewallResult> getFirewallPlain(GetFirewallPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getFirewall:getFirewall", TypeShape.of(GetFirewallResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Firewall.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewalls(GetFirewallsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFirewallsResult> getFirewalls() {
        return getFirewalls(GetFirewallsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Firewall.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewalls(GetFirewallsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFirewallsResult> getFirewallsPlain() {
        return getFirewallsPlain(GetFirewallsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Firewall.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewalls(GetFirewallsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFirewallsResult> getFirewalls(GetFirewallsArgs args) {
        return getFirewalls(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Firewall.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewalls(GetFirewallsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFirewallsResult> getFirewallsPlain(GetFirewallsPlainArgs args) {
        return getFirewallsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Firewall.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewalls(GetFirewallsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFirewallsResult> getFirewalls(GetFirewallsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getFirewalls:getFirewalls", TypeShape.of(GetFirewallsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Firewall.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewalls(GetFirewallsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFirewallsResult> getFirewalls(GetFirewallsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getFirewalls:getFirewalls", TypeShape.of(GetFirewallsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Firewall.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFirewallsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sampleFirewall1 = HcloudFunctions.getFirewalls(GetFirewallsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFirewallsResult> getFirewallsPlain(GetFirewallsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getFirewalls:getFirewalls", TypeShape.of(GetFirewallsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Hetzner Cloud Floating IP.
     * 
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.FloatingIp
     * 
     * Provides details about a Hetzner Cloud Floating IP.
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpArgs;
     * import com.pulumi.hcloud.FloatingIpAssignment;
     * import com.pulumi.hcloud.FloatingIpAssignmentArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         for (var i = 0; i < counter; i++) {
     *             new FloatingIpAssignment("main-" + i, FloatingIpAssignmentArgs.builder()
     *                 .floatingIpId(ip1.applyValue(getFloatingIpResult -> getFloatingIpResult.id()))
     *                 .serverId(mainHcloudServer.id())
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp() {
        return getFloatingIp(GetFloatingIpArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Hetzner Cloud Floating IP.
     * 
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.FloatingIp
     * 
     * Provides details about a Hetzner Cloud Floating IP.
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpArgs;
     * import com.pulumi.hcloud.FloatingIpAssignment;
     * import com.pulumi.hcloud.FloatingIpAssignmentArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         for (var i = 0; i < counter; i++) {
     *             new FloatingIpAssignment("main-" + i, FloatingIpAssignmentArgs.builder()
     *                 .floatingIpId(ip1.applyValue(getFloatingIpResult -> getFloatingIpResult.id()))
     *                 .serverId(mainHcloudServer.id())
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpResult> getFloatingIpPlain() {
        return getFloatingIpPlain(GetFloatingIpPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Hetzner Cloud Floating IP.
     * 
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.FloatingIp
     * 
     * Provides details about a Hetzner Cloud Floating IP.
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpArgs;
     * import com.pulumi.hcloud.FloatingIpAssignment;
     * import com.pulumi.hcloud.FloatingIpAssignmentArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         for (var i = 0; i < counter; i++) {
     *             new FloatingIpAssignment("main-" + i, FloatingIpAssignmentArgs.builder()
     *                 .floatingIpId(ip1.applyValue(getFloatingIpResult -> getFloatingIpResult.id()))
     *                 .serverId(mainHcloudServer.id())
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp(GetFloatingIpArgs args) {
        return getFloatingIp(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Hetzner Cloud Floating IP.
     * 
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.FloatingIp
     * 
     * Provides details about a Hetzner Cloud Floating IP.
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpArgs;
     * import com.pulumi.hcloud.FloatingIpAssignment;
     * import com.pulumi.hcloud.FloatingIpAssignmentArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         for (var i = 0; i < counter; i++) {
     *             new FloatingIpAssignment("main-" + i, FloatingIpAssignmentArgs.builder()
     *                 .floatingIpId(ip1.applyValue(getFloatingIpResult -> getFloatingIpResult.id()))
     *                 .serverId(mainHcloudServer.id())
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpResult> getFloatingIpPlain(GetFloatingIpPlainArgs args) {
        return getFloatingIpPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Hetzner Cloud Floating IP.
     * 
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.FloatingIp
     * 
     * Provides details about a Hetzner Cloud Floating IP.
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpArgs;
     * import com.pulumi.hcloud.FloatingIpAssignment;
     * import com.pulumi.hcloud.FloatingIpAssignmentArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         for (var i = 0; i < counter; i++) {
     *             new FloatingIpAssignment("main-" + i, FloatingIpAssignmentArgs.builder()
     *                 .floatingIpId(ip1.applyValue(getFloatingIpResult -> getFloatingIpResult.id()))
     *                 .serverId(mainHcloudServer.id())
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp(GetFloatingIpArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getFloatingIp:getFloatingIp", TypeShape.of(GetFloatingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Hetzner Cloud Floating IP.
     * 
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.FloatingIp
     * 
     * Provides details about a Hetzner Cloud Floating IP.
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpArgs;
     * import com.pulumi.hcloud.FloatingIpAssignment;
     * import com.pulumi.hcloud.FloatingIpAssignmentArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         for (var i = 0; i < counter; i++) {
     *             new FloatingIpAssignment("main-" + i, FloatingIpAssignmentArgs.builder()
     *                 .floatingIpId(ip1.applyValue(getFloatingIpResult -> getFloatingIpResult.id()))
     *                 .serverId(mainHcloudServer.id())
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp(GetFloatingIpArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getFloatingIp:getFloatingIp", TypeShape.of(GetFloatingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Hetzner Cloud Floating IP.
     * 
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.FloatingIp
     * 
     * Provides details about a Hetzner Cloud Floating IP.
     * This resource can be useful when you need to determine a Floating IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpArgs;
     * import com.pulumi.hcloud.FloatingIpAssignment;
     * import com.pulumi.hcloud.FloatingIpAssignmentArgs;
     * import com.pulumi.codegen.internal.KeyedValue;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         for (var i = 0; i < counter; i++) {
     *             new FloatingIpAssignment("main-" + i, FloatingIpAssignmentArgs.builder()
     *                 .floatingIpId(ip1.applyValue(getFloatingIpResult -> getFloatingIpResult.id()))
     *                 .serverId(mainHcloudServer.id())
     *                 .build());
     * 
     *         
     * }
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpResult> getFloatingIpPlain(GetFloatingIpPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getFloatingIp:getFloatingIp", TypeShape.of(GetFloatingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Floating IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getFloatingIps(GetFloatingIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpsResult> getFloatingIps() {
        return getFloatingIps(GetFloatingIpsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Floating IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getFloatingIps(GetFloatingIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpsResult> getFloatingIpsPlain() {
        return getFloatingIpsPlain(GetFloatingIpsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Floating IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getFloatingIps(GetFloatingIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpsResult> getFloatingIps(GetFloatingIpsArgs args) {
        return getFloatingIps(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Floating IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getFloatingIps(GetFloatingIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpsResult> getFloatingIpsPlain(GetFloatingIpsPlainArgs args) {
        return getFloatingIpsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Floating IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getFloatingIps(GetFloatingIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpsResult> getFloatingIps(GetFloatingIpsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getFloatingIps:getFloatingIps", TypeShape.of(GetFloatingIpsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Floating IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getFloatingIps(GetFloatingIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFloatingIpsResult> getFloatingIps(GetFloatingIpsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getFloatingIps:getFloatingIps", TypeShape.of(GetFloatingIpsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Floating IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetFloatingIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getFloatingIps(GetFloatingIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFloatingIpsResult> getFloatingIpsPlain(GetFloatingIpsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getFloatingIps:getFloatingIps", TypeShape.of(GetFloatingIpsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImageArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image1 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var image2 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .name("ubuntu-18.04")
     *             .withArchitecture("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .image(image1.applyValue(getImageResult -> getImageResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageResult> getImage() {
        return getImage(GetImageArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImageArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image1 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var image2 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .name("ubuntu-18.04")
     *             .withArchitecture("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .image(image1.applyValue(getImageResult -> getImageResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageResult> getImagePlain() {
        return getImagePlain(GetImagePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImageArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image1 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var image2 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .name("ubuntu-18.04")
     *             .withArchitecture("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .image(image1.applyValue(getImageResult -> getImageResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageResult> getImage(GetImageArgs args) {
        return getImage(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImageArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image1 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var image2 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .name("ubuntu-18.04")
     *             .withArchitecture("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .image(image1.applyValue(getImageResult -> getImageResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageResult> getImagePlain(GetImagePlainArgs args) {
        return getImagePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImageArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image1 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var image2 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .name("ubuntu-18.04")
     *             .withArchitecture("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .image(image1.applyValue(getImageResult -> getImageResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageResult> getImage(GetImageArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getImage:getImage", TypeShape.of(GetImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImageArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image1 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var image2 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .name("ubuntu-18.04")
     *             .withArchitecture("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .image(image1.applyValue(getImageResult -> getImageResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImageResult> getImage(GetImageArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getImage:getImage", TypeShape.of(GetImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImageArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image1 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var image2 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .name("ubuntu-18.04")
     *             .withArchitecture("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImage(GetImageArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .image(image1.applyValue(getImageResult -> getImageResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImageResult> getImagePlain(GetImagePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getImage:getImage", TypeShape.of(GetImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Images.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image2 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withArchitectures("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImagesResult> getImages() {
        return getImages(GetImagesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Images.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image2 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withArchitectures("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain() {
        return getImagesPlain(GetImagesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Images.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image2 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withArchitectures("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImagesResult> getImages(GetImagesArgs args) {
        return getImages(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Images.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image2 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withArchitectures("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain(GetImagesPlainArgs args) {
        return getImagesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Images.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image2 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withArchitectures("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImagesResult> getImages(GetImagesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getImages:getImages", TypeShape.of(GetImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Images.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image2 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withArchitectures("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetImagesResult> getImages(GetImagesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getImages:getImages", TypeShape.of(GetImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Images.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var image2 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withArchitectures("x86")
     *             .build());
     * 
     *         final var image3 = HcloudFunctions.getImages(GetImagesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain(GetImagesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getImages:getImages", TypeShape.of(GetImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb1 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .build());
     * 
     *         final var lb2 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerResult> getLoadBalancer() {
        return getLoadBalancer(GetLoadBalancerArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb1 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .build());
     * 
     *         final var lb2 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerResult> getLoadBalancerPlain() {
        return getLoadBalancerPlain(GetLoadBalancerPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb1 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .build());
     * 
     *         final var lb2 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerResult> getLoadBalancer(GetLoadBalancerArgs args) {
        return getLoadBalancer(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb1 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .build());
     * 
     *         final var lb2 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerResult> getLoadBalancerPlain(GetLoadBalancerPlainArgs args) {
        return getLoadBalancerPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb1 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .build());
     * 
     *         final var lb2 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerResult> getLoadBalancer(GetLoadBalancerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLoadBalancer:getLoadBalancer", TypeShape.of(GetLoadBalancerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb1 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .build());
     * 
     *         final var lb2 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerResult> getLoadBalancer(GetLoadBalancerArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLoadBalancer:getLoadBalancer", TypeShape.of(GetLoadBalancerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb1 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .build());
     * 
     *         final var lb2 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerResult> getLoadBalancerPlain(GetLoadBalancerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getLoadBalancer:getLoadBalancer", TypeShape.of(GetLoadBalancerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer Type.
     * 
     * Use this resource to get detailed information about a specific Load Balancer Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerTypeArgs;
     * import com.pulumi.hcloud.LoadBalancer;
     * import com.pulumi.hcloud.LoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .name("lb11")
     *             .build());
     * 
     *         var main = new LoadBalancer("main", LoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .loadBalancerType(name)
     *             .location("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerTypeResult> getLoadBalancerType() {
        return getLoadBalancerType(GetLoadBalancerTypeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer Type.
     * 
     * Use this resource to get detailed information about a specific Load Balancer Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerTypeArgs;
     * import com.pulumi.hcloud.LoadBalancer;
     * import com.pulumi.hcloud.LoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .name("lb11")
     *             .build());
     * 
     *         var main = new LoadBalancer("main", LoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .loadBalancerType(name)
     *             .location("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerTypeResult> getLoadBalancerTypePlain() {
        return getLoadBalancerTypePlain(GetLoadBalancerTypePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer Type.
     * 
     * Use this resource to get detailed information about a specific Load Balancer Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerTypeArgs;
     * import com.pulumi.hcloud.LoadBalancer;
     * import com.pulumi.hcloud.LoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .name("lb11")
     *             .build());
     * 
     *         var main = new LoadBalancer("main", LoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .loadBalancerType(name)
     *             .location("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerTypeResult> getLoadBalancerType(GetLoadBalancerTypeArgs args) {
        return getLoadBalancerType(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer Type.
     * 
     * Use this resource to get detailed information about a specific Load Balancer Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerTypeArgs;
     * import com.pulumi.hcloud.LoadBalancer;
     * import com.pulumi.hcloud.LoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .name("lb11")
     *             .build());
     * 
     *         var main = new LoadBalancer("main", LoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .loadBalancerType(name)
     *             .location("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerTypeResult> getLoadBalancerTypePlain(GetLoadBalancerTypePlainArgs args) {
        return getLoadBalancerTypePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer Type.
     * 
     * Use this resource to get detailed information about a specific Load Balancer Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerTypeArgs;
     * import com.pulumi.hcloud.LoadBalancer;
     * import com.pulumi.hcloud.LoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .name("lb11")
     *             .build());
     * 
     *         var main = new LoadBalancer("main", LoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .loadBalancerType(name)
     *             .location("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerTypeResult> getLoadBalancerType(GetLoadBalancerTypeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLoadBalancerType:getLoadBalancerType", TypeShape.of(GetLoadBalancerTypeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer Type.
     * 
     * Use this resource to get detailed information about a specific Load Balancer Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerTypeArgs;
     * import com.pulumi.hcloud.LoadBalancer;
     * import com.pulumi.hcloud.LoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .name("lb11")
     *             .build());
     * 
     *         var main = new LoadBalancer("main", LoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .loadBalancerType(name)
     *             .location("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerTypeResult> getLoadBalancerType(GetLoadBalancerTypeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLoadBalancerType:getLoadBalancerType", TypeShape.of(GetLoadBalancerTypeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Load Balancer Type.
     * 
     * Use this resource to get detailed information about a specific Load Balancer Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancerTypeArgs;
     * import com.pulumi.hcloud.LoadBalancer;
     * import com.pulumi.hcloud.LoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLoadBalancerType(GetLoadBalancerTypeArgs.builder()
     *             .name("lb11")
     *             .build());
     * 
     *         var main = new LoadBalancer("main", LoadBalancerArgs.builder()
     *             .name("my-load-balancer")
     *             .loadBalancerType(name)
     *             .location("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerTypeResult> getLoadBalancerTypePlain(GetLoadBalancerTypePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getLoadBalancerType:getLoadBalancerType", TypeShape.of(GetLoadBalancerTypeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Load Balancer Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getLoadBalancerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerTypesResult> getLoadBalancerTypes() {
        return getLoadBalancerTypes(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Load Balancer Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getLoadBalancerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerTypesResult> getLoadBalancerTypesPlain() {
        return getLoadBalancerTypesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Load Balancer Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getLoadBalancerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerTypesResult> getLoadBalancerTypes(InvokeArgs args) {
        return getLoadBalancerTypes(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Load Balancer Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getLoadBalancerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerTypesResult> getLoadBalancerTypesPlain(InvokeArgs args) {
        return getLoadBalancerTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Load Balancer Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getLoadBalancerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerTypesResult> getLoadBalancerTypes(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLoadBalancerTypes:getLoadBalancerTypes", TypeShape.of(GetLoadBalancerTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Load Balancer Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getLoadBalancerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancerTypesResult> getLoadBalancerTypes(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLoadBalancerTypes:getLoadBalancerTypes", TypeShape.of(GetLoadBalancerTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Load Balancer Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getLoadBalancerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancerTypesResult> getLoadBalancerTypesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getLoadBalancerTypes:getLoadBalancerTypes", TypeShape.of(GetLoadBalancerTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Load Balancers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb2 = HcloudFunctions.getLoadBalancers();
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancers(GetLoadBalancersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancersResult> getLoadBalancers() {
        return getLoadBalancers(GetLoadBalancersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Load Balancers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb2 = HcloudFunctions.getLoadBalancers();
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancers(GetLoadBalancersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancersResult> getLoadBalancersPlain() {
        return getLoadBalancersPlain(GetLoadBalancersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Load Balancers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb2 = HcloudFunctions.getLoadBalancers();
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancers(GetLoadBalancersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancersResult> getLoadBalancers(GetLoadBalancersArgs args) {
        return getLoadBalancers(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Load Balancers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb2 = HcloudFunctions.getLoadBalancers();
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancers(GetLoadBalancersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancersResult> getLoadBalancersPlain(GetLoadBalancersPlainArgs args) {
        return getLoadBalancersPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Load Balancers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb2 = HcloudFunctions.getLoadBalancers();
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancers(GetLoadBalancersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancersResult> getLoadBalancers(GetLoadBalancersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLoadBalancers:getLoadBalancers", TypeShape.of(GetLoadBalancersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Load Balancers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb2 = HcloudFunctions.getLoadBalancers();
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancers(GetLoadBalancersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLoadBalancersResult> getLoadBalancers(GetLoadBalancersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLoadBalancers:getLoadBalancers", TypeShape.of(GetLoadBalancersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Load Balancers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLoadBalancersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var lb2 = HcloudFunctions.getLoadBalancers();
     * 
     *         final var lb3 = HcloudFunctions.getLoadBalancers(GetLoadBalancersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLoadBalancersResult> getLoadBalancersPlain(GetLoadBalancersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getLoadBalancers:getLoadBalancers", TypeShape.of(GetLoadBalancersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Location.
     * 
     * Use this resource to get detailed information about a specific Location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .name("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLocationResult> getLocation() {
        return getLocation(GetLocationArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Location.
     * 
     * Use this resource to get detailed information about a specific Location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .name("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLocationResult> getLocationPlain() {
        return getLocationPlain(GetLocationPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Location.
     * 
     * Use this resource to get detailed information about a specific Location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .name("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLocationResult> getLocation(GetLocationArgs args) {
        return getLocation(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Location.
     * 
     * Use this resource to get detailed information about a specific Location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .name("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLocationResult> getLocationPlain(GetLocationPlainArgs args) {
        return getLocationPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Location.
     * 
     * Use this resource to get detailed information about a specific Location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .name("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLocationResult> getLocation(GetLocationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLocation:getLocation", TypeShape.of(GetLocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Location.
     * 
     * Use this resource to get detailed information about a specific Location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .name("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLocationResult> getLocation(GetLocationArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLocation:getLocation", TypeShape.of(GetLocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Location.
     * 
     * Use this resource to get detailed information about a specific Location.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetLocationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .id(1)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getLocation(GetLocationArgs.builder()
     *             .name("fsn1")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLocationResult> getLocationPlain(GetLocationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getLocation:getLocation", TypeShape.of(GetLocationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Locations.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several locations.
     * 
     */
    public static Output<GetLocationsResult> getLocations() {
        return getLocations(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Locations.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several locations.
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain() {
        return getLocationsPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Locations.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several locations.
     * 
     */
    public static Output<GetLocationsResult> getLocations(InvokeArgs args) {
        return getLocations(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Locations.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several locations.
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain(InvokeArgs args) {
        return getLocationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Locations.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several locations.
     * 
     */
    public static Output<GetLocationsResult> getLocations(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLocations:getLocations", TypeShape.of(GetLocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Locations.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several locations.
     * 
     */
    public static Output<GetLocationsResult> getLocations(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getLocations:getLocations", TypeShape.of(GetLocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Locations.
     * 
     * This resource may be useful to create highly available infrastructure, distributed across several locations.
     * 
     */
    public static CompletableFuture<GetLocationsResult> getLocationsPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getLocations:getLocations", TypeShape.of(GetLocationsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network1 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var network2 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("my-network")
     *             .build());
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork() {
        return getNetwork(GetNetworkArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network1 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var network2 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("my-network")
     *             .build());
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain() {
        return getNetworkPlain(GetNetworkPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network1 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var network2 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("my-network")
     *             .build());
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args) {
        return getNetwork(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network1 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var network2 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("my-network")
     *             .build());
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args) {
        return getNetworkPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network1 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var network2 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("my-network")
     *             .build());
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network1 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var network2 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("my-network")
     *             .build());
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkResult> getNetwork(GetNetworkArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network1 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var network2 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .name("my-network")
     *             .build());
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkResult> getNetworkPlain(GetNetworkPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getNetwork:getNetwork", TypeShape.of(GetNetworkResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Networks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network2 = HcloudFunctions.getNetwork();
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworksResult> getNetworks() {
        return getNetworks(GetNetworksArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Networks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network2 = HcloudFunctions.getNetwork();
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain() {
        return getNetworksPlain(GetNetworksPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Networks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network2 = HcloudFunctions.getNetwork();
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args) {
        return getNetworks(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Networks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network2 = HcloudFunctions.getNetwork();
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args) {
        return getNetworksPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Networks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network2 = HcloudFunctions.getNetwork();
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Networks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network2 = HcloudFunctions.getNetwork();
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworksResult> getNetworks(GetNetworksArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Networks.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetNetworkArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var network2 = HcloudFunctions.getNetwork();
     * 
     *         final var network3 = HcloudFunctions.getNetwork(GetNetworkArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworksResult> getNetworksPlain(GetNetworksPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getNetworks:getNetworks", TypeShape.of(GetNetworksResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Placement Group.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .name("sample-placement-group-1")
     *             .build());
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPlacementGroupResult> getPlacementGroup() {
        return getPlacementGroup(GetPlacementGroupArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Placement Group.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .name("sample-placement-group-1")
     *             .build());
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPlacementGroupResult> getPlacementGroupPlain() {
        return getPlacementGroupPlain(GetPlacementGroupPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Placement Group.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .name("sample-placement-group-1")
     *             .build());
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPlacementGroupResult> getPlacementGroup(GetPlacementGroupArgs args) {
        return getPlacementGroup(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Placement Group.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .name("sample-placement-group-1")
     *             .build());
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPlacementGroupResult> getPlacementGroupPlain(GetPlacementGroupPlainArgs args) {
        return getPlacementGroupPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Placement Group.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .name("sample-placement-group-1")
     *             .build());
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPlacementGroupResult> getPlacementGroup(GetPlacementGroupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getPlacementGroup:getPlacementGroup", TypeShape.of(GetPlacementGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Placement Group.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .name("sample-placement-group-1")
     *             .build());
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPlacementGroupResult> getPlacementGroup(GetPlacementGroupArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getPlacementGroup:getPlacementGroup", TypeShape.of(GetPlacementGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Placement Group.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .name("sample-placement-group-1")
     *             .build());
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroup(GetPlacementGroupArgs.builder()
     *             .id("4711")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPlacementGroupResult> getPlacementGroupPlain(GetPlacementGroupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getPlacementGroup:getPlacementGroup", TypeShape.of(GetPlacementGroupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Placement Groups.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroups();
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPlacementGroupsResult> getPlacementGroups() {
        return getPlacementGroups(GetPlacementGroupsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Placement Groups.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroups();
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPlacementGroupsResult> getPlacementGroupsPlain() {
        return getPlacementGroupsPlain(GetPlacementGroupsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Placement Groups.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroups();
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPlacementGroupsResult> getPlacementGroups(GetPlacementGroupsArgs args) {
        return getPlacementGroups(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Placement Groups.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroups();
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPlacementGroupsResult> getPlacementGroupsPlain(GetPlacementGroupsPlainArgs args) {
        return getPlacementGroupsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Placement Groups.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroups();
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPlacementGroupsResult> getPlacementGroups(GetPlacementGroupsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getPlacementGroups:getPlacementGroups", TypeShape.of(GetPlacementGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Placement Groups.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroups();
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPlacementGroupsResult> getPlacementGroups(GetPlacementGroupsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getPlacementGroups:getPlacementGroups", TypeShape.of(GetPlacementGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Placement Groups.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPlacementGroupsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var samplePlacementGroup1 = HcloudFunctions.getPlacementGroups();
     * 
     *         final var samplePlacementGroup2 = HcloudFunctions.getPlacementGroups(GetPlacementGroupsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPlacementGroupsResult> getPlacementGroupsPlain(GetPlacementGroupsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getPlacementGroups:getPlacementGroups", TypeShape.of(GetPlacementGroupsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Hetzner Cloud Primary IP.
     * 
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * Side note:
     * 
     * If a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created &amp; attached.
     * Currently, Primary IPs can be only attached to servers.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.PrimaryIp
     * 
     * Provides details about a Hetzner Cloud Primary IP.
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import com.pulumi.hcloud.inputs.ServerPublicNetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .name("primary_ip_1")
     *             .build());
     * 
     *         final var ip3 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         // Link a server to an existing primary IP
     *         var serverTest = new Server("serverTest", ServerArgs.builder()
     *             .name("test-server")
     *             .image("ubuntu-20.04")
     *             .serverType("cx22")
     *             .datacenter("fsn1-dc14")
     *             .labels(Map.of("test", "tessst1"))
     *             .publicNets(ServerPublicNetArgs.builder()
     *                 .ipv4(ip1HcloudPrimaryIp.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrimaryIpResult> getPrimaryIp() {
        return getPrimaryIp(GetPrimaryIpArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Hetzner Cloud Primary IP.
     * 
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * Side note:
     * 
     * If a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created &amp; attached.
     * Currently, Primary IPs can be only attached to servers.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.PrimaryIp
     * 
     * Provides details about a Hetzner Cloud Primary IP.
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import com.pulumi.hcloud.inputs.ServerPublicNetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .name("primary_ip_1")
     *             .build());
     * 
     *         final var ip3 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         // Link a server to an existing primary IP
     *         var serverTest = new Server("serverTest", ServerArgs.builder()
     *             .name("test-server")
     *             .image("ubuntu-20.04")
     *             .serverType("cx22")
     *             .datacenter("fsn1-dc14")
     *             .labels(Map.of("test", "tessst1"))
     *             .publicNets(ServerPublicNetArgs.builder()
     *                 .ipv4(ip1HcloudPrimaryIp.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrimaryIpResult> getPrimaryIpPlain() {
        return getPrimaryIpPlain(GetPrimaryIpPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Hetzner Cloud Primary IP.
     * 
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * Side note:
     * 
     * If a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created &amp; attached.
     * Currently, Primary IPs can be only attached to servers.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.PrimaryIp
     * 
     * Provides details about a Hetzner Cloud Primary IP.
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import com.pulumi.hcloud.inputs.ServerPublicNetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .name("primary_ip_1")
     *             .build());
     * 
     *         final var ip3 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         // Link a server to an existing primary IP
     *         var serverTest = new Server("serverTest", ServerArgs.builder()
     *             .name("test-server")
     *             .image("ubuntu-20.04")
     *             .serverType("cx22")
     *             .datacenter("fsn1-dc14")
     *             .labels(Map.of("test", "tessst1"))
     *             .publicNets(ServerPublicNetArgs.builder()
     *                 .ipv4(ip1HcloudPrimaryIp.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrimaryIpResult> getPrimaryIp(GetPrimaryIpArgs args) {
        return getPrimaryIp(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Hetzner Cloud Primary IP.
     * 
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * Side note:
     * 
     * If a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created &amp; attached.
     * Currently, Primary IPs can be only attached to servers.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.PrimaryIp
     * 
     * Provides details about a Hetzner Cloud Primary IP.
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import com.pulumi.hcloud.inputs.ServerPublicNetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .name("primary_ip_1")
     *             .build());
     * 
     *         final var ip3 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         // Link a server to an existing primary IP
     *         var serverTest = new Server("serverTest", ServerArgs.builder()
     *             .name("test-server")
     *             .image("ubuntu-20.04")
     *             .serverType("cx22")
     *             .datacenter("fsn1-dc14")
     *             .labels(Map.of("test", "tessst1"))
     *             .publicNets(ServerPublicNetArgs.builder()
     *                 .ipv4(ip1HcloudPrimaryIp.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrimaryIpResult> getPrimaryIpPlain(GetPrimaryIpPlainArgs args) {
        return getPrimaryIpPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a Hetzner Cloud Primary IP.
     * 
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * Side note:
     * 
     * If a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created &amp; attached.
     * Currently, Primary IPs can be only attached to servers.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.PrimaryIp
     * 
     * Provides details about a Hetzner Cloud Primary IP.
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import com.pulumi.hcloud.inputs.ServerPublicNetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .name("primary_ip_1")
     *             .build());
     * 
     *         final var ip3 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         // Link a server to an existing primary IP
     *         var serverTest = new Server("serverTest", ServerArgs.builder()
     *             .name("test-server")
     *             .image("ubuntu-20.04")
     *             .serverType("cx22")
     *             .datacenter("fsn1-dc14")
     *             .labels(Map.of("test", "tessst1"))
     *             .publicNets(ServerPublicNetArgs.builder()
     *                 .ipv4(ip1HcloudPrimaryIp.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrimaryIpResult> getPrimaryIp(GetPrimaryIpArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getPrimaryIp:getPrimaryIp", TypeShape.of(GetPrimaryIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Hetzner Cloud Primary IP.
     * 
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * Side note:
     * 
     * If a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created &amp; attached.
     * Currently, Primary IPs can be only attached to servers.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.PrimaryIp
     * 
     * Provides details about a Hetzner Cloud Primary IP.
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import com.pulumi.hcloud.inputs.ServerPublicNetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .name("primary_ip_1")
     *             .build());
     * 
     *         final var ip3 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         // Link a server to an existing primary IP
     *         var serverTest = new Server("serverTest", ServerArgs.builder()
     *             .name("test-server")
     *             .image("ubuntu-20.04")
     *             .serverType("cx22")
     *             .datacenter("fsn1-dc14")
     *             .labels(Map.of("test", "tessst1"))
     *             .publicNets(ServerPublicNetArgs.builder()
     *                 .ipv4(ip1HcloudPrimaryIp.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrimaryIpResult> getPrimaryIp(GetPrimaryIpArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getPrimaryIp:getPrimaryIp", TypeShape.of(GetPrimaryIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a Hetzner Cloud Primary IP.
     * 
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * Side note:
     * 
     * If a server is getting created, it has to have a primary ip. If a server is getting created without defining primary ips, two of them (one ipv4 and one ipv6) getting created &amp; attached.
     * Currently, Primary IPs can be only attached to servers.
     * 
     * ## Example Usage
     * 
     * # Data Source: hcloud.PrimaryIp
     * 
     * Provides details about a Hetzner Cloud Primary IP.
     * This resource can be useful when you need to determine a Primary IP ID based on the IP address.
     * 
     * ### Additional Examples
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import com.pulumi.hcloud.inputs.ServerPublicNetArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip1 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .ipAddress("1.2.3.4")
     *             .build());
     * 
     *         final var ip2 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .name("primary_ip_1")
     *             .build());
     * 
     *         final var ip3 = HcloudFunctions.getPrimaryIp(GetPrimaryIpArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         // Link a server to an existing primary IP
     *         var serverTest = new Server("serverTest", ServerArgs.builder()
     *             .name("test-server")
     *             .image("ubuntu-20.04")
     *             .serverType("cx22")
     *             .datacenter("fsn1-dc14")
     *             .labels(Map.of("test", "tessst1"))
     *             .publicNets(ServerPublicNetArgs.builder()
     *                 .ipv4(ip1HcloudPrimaryIp.id())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrimaryIpResult> getPrimaryIpPlain(GetPrimaryIpPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getPrimaryIp:getPrimaryIp", TypeShape.of(GetPrimaryIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Primary IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getPrimaryIps(GetPrimaryIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrimaryIpsResult> getPrimaryIps() {
        return getPrimaryIps(GetPrimaryIpsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Primary IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getPrimaryIps(GetPrimaryIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrimaryIpsResult> getPrimaryIpsPlain() {
        return getPrimaryIpsPlain(GetPrimaryIpsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Primary IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getPrimaryIps(GetPrimaryIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrimaryIpsResult> getPrimaryIps(GetPrimaryIpsArgs args) {
        return getPrimaryIps(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Primary IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getPrimaryIps(GetPrimaryIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrimaryIpsResult> getPrimaryIpsPlain(GetPrimaryIpsPlainArgs args) {
        return getPrimaryIpsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Primary IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getPrimaryIps(GetPrimaryIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrimaryIpsResult> getPrimaryIps(GetPrimaryIpsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getPrimaryIps:getPrimaryIps", TypeShape.of(GetPrimaryIpsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Primary IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getPrimaryIps(GetPrimaryIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrimaryIpsResult> getPrimaryIps(GetPrimaryIpsArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getPrimaryIps:getPrimaryIps", TypeShape.of(GetPrimaryIpsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Primary IPs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetPrimaryIpsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ip2 = HcloudFunctions.getPrimaryIps(GetPrimaryIpsArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrimaryIpsResult> getPrimaryIpsPlain(GetPrimaryIpsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getPrimaryIps:getPrimaryIps", TypeShape.of(GetPrimaryIpsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s1 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .name("my-server")
     *             .build());
     * 
     *         final var s2 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var s3 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerResult> getServer() {
        return getServer(GetServerArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s1 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .name("my-server")
     *             .build());
     * 
     *         final var s2 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var s3 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerResult> getServerPlain() {
        return getServerPlain(GetServerPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s1 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .name("my-server")
     *             .build());
     * 
     *         final var s2 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var s3 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerResult> getServer(GetServerArgs args) {
        return getServer(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s1 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .name("my-server")
     *             .build());
     * 
     *         final var s2 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var s3 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerResult> getServerPlain(GetServerPlainArgs args) {
        return getServerPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s1 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .name("my-server")
     *             .build());
     * 
     *         final var s2 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var s3 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerResult> getServer(GetServerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getServer:getServer", TypeShape.of(GetServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s1 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .name("my-server")
     *             .build());
     * 
     *         final var s2 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var s3 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerResult> getServer(GetServerArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getServer:getServer", TypeShape.of(GetServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s1 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .name("my-server")
     *             .build());
     * 
     *         final var s2 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .id("123")
     *             .build());
     * 
     *         final var s3 = HcloudFunctions.getServer(GetServerArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerResult> getServerPlain(GetServerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getServer:getServer", TypeShape.of(GetServerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Server Type.
     * 
     * Use this resource to get detailed information about specific Server Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerTypeArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .id(22)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .name("cx22")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .name("my-server")
     *             .location("fsn1")
     *             .image("debian-12")
     *             .serverType(byName.applyValue(getServerTypeResult -> getServerTypeResult.name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerTypeResult> getServerType() {
        return getServerType(GetServerTypeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Server Type.
     * 
     * Use this resource to get detailed information about specific Server Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerTypeArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .id(22)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .name("cx22")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .name("my-server")
     *             .location("fsn1")
     *             .image("debian-12")
     *             .serverType(byName.applyValue(getServerTypeResult -> getServerTypeResult.name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerTypeResult> getServerTypePlain() {
        return getServerTypePlain(GetServerTypePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Server Type.
     * 
     * Use this resource to get detailed information about specific Server Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerTypeArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .id(22)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .name("cx22")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .name("my-server")
     *             .location("fsn1")
     *             .image("debian-12")
     *             .serverType(byName.applyValue(getServerTypeResult -> getServerTypeResult.name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerTypeResult> getServerType(GetServerTypeArgs args) {
        return getServerType(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Server Type.
     * 
     * Use this resource to get detailed information about specific Server Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerTypeArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .id(22)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .name("cx22")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .name("my-server")
     *             .location("fsn1")
     *             .image("debian-12")
     *             .serverType(byName.applyValue(getServerTypeResult -> getServerTypeResult.name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerTypeResult> getServerTypePlain(GetServerTypePlainArgs args) {
        return getServerTypePlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about a specific Hetzner Cloud Server Type.
     * 
     * Use this resource to get detailed information about specific Server Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerTypeArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .id(22)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .name("cx22")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .name("my-server")
     *             .location("fsn1")
     *             .image("debian-12")
     *             .serverType(byName.applyValue(getServerTypeResult -> getServerTypeResult.name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerTypeResult> getServerType(GetServerTypeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getServerType:getServerType", TypeShape.of(GetServerTypeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Server Type.
     * 
     * Use this resource to get detailed information about specific Server Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerTypeArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .id(22)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .name("cx22")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .name("my-server")
     *             .location("fsn1")
     *             .image("debian-12")
     *             .serverType(byName.applyValue(getServerTypeResult -> getServerTypeResult.name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerTypeResult> getServerType(GetServerTypeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getServerType:getServerType", TypeShape.of(GetServerTypeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about a specific Hetzner Cloud Server Type.
     * 
     * Use this resource to get detailed information about specific Server Type.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServerTypeArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .id(22)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getServerType(GetServerTypeArgs.builder()
     *             .name("cx22")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .name("my-server")
     *             .location("fsn1")
     *             .image("debian-12")
     *             .serverType(byName.applyValue(getServerTypeResult -> getServerTypeResult.name()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerTypeResult> getServerTypePlain(GetServerTypePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getServerType:getServerType", TypeShape.of(GetServerTypeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Server Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getServerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerTypesResult> getServerTypes() {
        return getServerTypes(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Server Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getServerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerTypesResult> getServerTypesPlain() {
        return getServerTypesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Server Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getServerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerTypesResult> getServerTypes(InvokeArgs args) {
        return getServerTypes(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Server Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getServerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerTypesResult> getServerTypesPlain(InvokeArgs args) {
        return getServerTypesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a list of available Hetzner Cloud Server Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getServerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerTypesResult> getServerTypes(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getServerTypes:getServerTypes", TypeShape.of(GetServerTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Server Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getServerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerTypesResult> getServerTypes(InvokeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getServerTypes:getServerTypes", TypeShape.of(GetServerTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a list of available Hetzner Cloud Server Types.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getServerTypes();
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerTypesResult> getServerTypesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getServerTypes:getServerTypes", TypeShape.of(GetServerTypesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s3 = HcloudFunctions.getServers(GetServersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServersResult> getServers() {
        return getServers(GetServersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s3 = HcloudFunctions.getServers(GetServersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServersResult> getServersPlain() {
        return getServersPlain(GetServersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s3 = HcloudFunctions.getServers(GetServersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServersResult> getServers(GetServersArgs args) {
        return getServers(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s3 = HcloudFunctions.getServers(GetServersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServersResult> getServersPlain(GetServersPlainArgs args) {
        return getServersPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s3 = HcloudFunctions.getServers(GetServersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServersResult> getServers(GetServersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getServers:getServers", TypeShape.of(GetServersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s3 = HcloudFunctions.getServers(GetServersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServersResult> getServers(GetServersArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getServers:getServers", TypeShape.of(GetServersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetServersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var s3 = HcloudFunctions.getServers(GetServersArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServersResult> getServersPlain(GetServersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getServers:getServers", TypeShape.of(GetServersResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeyArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .id(24332897)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name("my-ssh-key")
     *             .build());
     * 
     *         final var byFingerprint = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .fingerprint("55:58:dc:bd:61:6e:7d:24:07:a7:7d:9b:be:99:83:a8")
     *             .build());
     * 
     *         final var byLabel = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(            
     *                 byId.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byName.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byFingerprint.applyValue(getSshKeyResult -> getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSshKeyResult> getSshKey() {
        return getSshKey(GetSshKeyArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeyArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .id(24332897)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name("my-ssh-key")
     *             .build());
     * 
     *         final var byFingerprint = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .fingerprint("55:58:dc:bd:61:6e:7d:24:07:a7:7d:9b:be:99:83:a8")
     *             .build());
     * 
     *         final var byLabel = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(            
     *                 byId.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byName.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byFingerprint.applyValue(getSshKeyResult -> getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain() {
        return getSshKeyPlain(GetSshKeyPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeyArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .id(24332897)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name("my-ssh-key")
     *             .build());
     * 
     *         final var byFingerprint = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .fingerprint("55:58:dc:bd:61:6e:7d:24:07:a7:7d:9b:be:99:83:a8")
     *             .build());
     * 
     *         final var byLabel = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(            
     *                 byId.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byName.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byFingerprint.applyValue(getSshKeyResult -> getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args) {
        return getSshKey(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeyArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .id(24332897)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name("my-ssh-key")
     *             .build());
     * 
     *         final var byFingerprint = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .fingerprint("55:58:dc:bd:61:6e:7d:24:07:a7:7d:9b:be:99:83:a8")
     *             .build());
     * 
     *         final var byLabel = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(            
     *                 byId.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byName.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byFingerprint.applyValue(getSshKeyResult -> getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain(GetSshKeyPlainArgs args) {
        return getSshKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeyArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .id(24332897)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name("my-ssh-key")
     *             .build());
     * 
     *         final var byFingerprint = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .fingerprint("55:58:dc:bd:61:6e:7d:24:07:a7:7d:9b:be:99:83:a8")
     *             .build());
     * 
     *         final var byLabel = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(            
     *                 byId.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byName.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byFingerprint.applyValue(getSshKeyResult -> getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeyArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .id(24332897)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name("my-ssh-key")
     *             .build());
     * 
     *         final var byFingerprint = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .fingerprint("55:58:dc:bd:61:6e:7d:24:07:a7:7d:9b:be:99:83:a8")
     *             .build());
     * 
     *         final var byLabel = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(            
     *                 byId.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byName.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byFingerprint.applyValue(getSshKeyResult -> getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeyArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var byId = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .id(24332897)
     *             .build());
     * 
     *         final var byName = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name("my-ssh-key")
     *             .build());
     * 
     *         final var byFingerprint = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .fingerprint("55:58:dc:bd:61:6e:7d:24:07:a7:7d:9b:be:99:83:a8")
     *             .build());
     * 
     *         final var byLabel = HcloudFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(            
     *                 byId.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byName.applyValue(getSshKeyResult -> getSshKeyResult.id()),
     *                 byFingerprint.applyValue(getSshKeyResult -> getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain(GetSshKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeysArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getSshKeys();
     * 
     *         final var byLabel = HcloudFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .withSelector("foo=bar")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(all.applyValue(getSshKeysResult -> getSshKeysResult.sshKeys()).stream().map(element -> element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys() {
        return getSshKeys(GetSshKeysArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeysArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getSshKeys();
     * 
     *         final var byLabel = HcloudFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .withSelector("foo=bar")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(all.applyValue(getSshKeysResult -> getSshKeysResult.sshKeys()).stream().map(element -> element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain() {
        return getSshKeysPlain(GetSshKeysPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeysArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getSshKeys();
     * 
     *         final var byLabel = HcloudFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .withSelector("foo=bar")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(all.applyValue(getSshKeysResult -> getSshKeysResult.sshKeys()).stream().map(element -> element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys(GetSshKeysArgs args) {
        return getSshKeys(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeysArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getSshKeys();
     * 
     *         final var byLabel = HcloudFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .withSelector("foo=bar")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(all.applyValue(getSshKeysResult -> getSshKeysResult.sshKeys()).stream().map(element -> element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain(GetSshKeysPlainArgs args) {
        return getSshKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeysArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getSshKeys();
     * 
     *         final var byLabel = HcloudFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .withSelector("foo=bar")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(all.applyValue(getSshKeysResult -> getSshKeysResult.sshKeys()).stream().map(element -> element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys(GetSshKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getSshKeys:getSshKeys", TypeShape.of(GetSshKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeysArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getSshKeys();
     * 
     *         final var byLabel = HcloudFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .withSelector("foo=bar")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(all.applyValue(getSshKeysResult -> getSshKeysResult.sshKeys()).stream().map(element -> element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys(GetSshKeysArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getSshKeys:getSshKeys", TypeShape.of(GetSshKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetSshKeysArgs;
     * import com.pulumi.hcloud.Server;
     * import com.pulumi.hcloud.ServerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var all = HcloudFunctions.getSshKeys();
     * 
     *         final var byLabel = HcloudFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .withSelector("foo=bar")
     *             .build());
     * 
     *         var main = new Server("main", ServerArgs.builder()
     *             .sshKeys(all.applyValue(getSshKeysResult -> getSshKeysResult.sshKeys()).stream().map(element -> element.name()).collect(toList()))
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain(GetSshKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getSshKeys:getSshKeys", TypeShape.of(GetSshKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var volume2 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .name("my-volume")
     *             .build());
     * 
     *         final var volume3 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeResult> getVolume() {
        return getVolume(GetVolumeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var volume2 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .name("my-volume")
     *             .build());
     * 
     *         final var volume3 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain() {
        return getVolumePlain(GetVolumePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var volume2 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .name("my-volume")
     *             .build());
     * 
     *         final var volume3 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args) {
        return getVolume(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var volume2 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .name("my-volume")
     *             .build());
     * 
     *         final var volume3 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain(GetVolumePlainArgs args) {
        return getVolumePlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var volume2 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .name("my-volume")
     *             .build());
     * 
     *         final var volume3 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var volume2 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .name("my-volume")
     *             .build());
     * 
     *         final var volume3 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume1 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .id("1234")
     *             .build());
     * 
     *         final var volume2 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .name("my-volume")
     *             .build());
     * 
     *         final var volume3 = HcloudFunctions.getVolume(GetVolumeArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain(GetVolumePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Volumes.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume_ = HcloudFunctions.getVolumes();
     * 
     *         final var volume3 = HcloudFunctions.getVolumes(GetVolumesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumesResult> getVolumes() {
        return getVolumes(GetVolumesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Volumes.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume_ = HcloudFunctions.getVolumes();
     * 
     *         final var volume3 = HcloudFunctions.getVolumes(GetVolumesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumesResult> getVolumesPlain() {
        return getVolumesPlain(GetVolumesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Volumes.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume_ = HcloudFunctions.getVolumes();
     * 
     *         final var volume3 = HcloudFunctions.getVolumes(GetVolumesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumesResult> getVolumes(GetVolumesArgs args) {
        return getVolumes(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Volumes.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume_ = HcloudFunctions.getVolumes();
     * 
     *         final var volume3 = HcloudFunctions.getVolumes(GetVolumesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumesResult> getVolumesPlain(GetVolumesPlainArgs args) {
        return getVolumesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides details about multiple Hetzner Cloud Volumes.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume_ = HcloudFunctions.getVolumes();
     * 
     *         final var volume3 = HcloudFunctions.getVolumes(GetVolumesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumesResult> getVolumes(GetVolumesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getVolumes:getVolumes", TypeShape.of(GetVolumesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Volumes.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume_ = HcloudFunctions.getVolumes();
     * 
     *         final var volume3 = HcloudFunctions.getVolumes(GetVolumesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetVolumesResult> getVolumes(GetVolumesArgs args, InvokeOutputOptions options) {
        return Deployment.getInstance().invoke("hcloud:index/getVolumes:getVolumes", TypeShape.of(GetVolumesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides details about multiple Hetzner Cloud Volumes.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.hcloud.HcloudFunctions;
     * import com.pulumi.hcloud.inputs.GetVolumesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var volume_ = HcloudFunctions.getVolumes();
     * 
     *         final var volume3 = HcloudFunctions.getVolumes(GetVolumesArgs.builder()
     *             .withSelector("key=value")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetVolumesResult> getVolumesPlain(GetVolumesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("hcloud:index/getVolumes:getVolumes", TypeShape.of(GetVolumesResult.class), args, Utilities.withVersion(options));
    }
}
