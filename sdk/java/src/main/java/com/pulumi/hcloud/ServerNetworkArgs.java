// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerNetworkArgs Empty = new ServerNetworkArgs();

    /**
     * Additional IPs to be assigned
     * to this server.
     * 
     */
    @Import(name="aliasIps")
    private @Nullable Output<List<String>> aliasIps;

    /**
     * @return Additional IPs to be assigned
     * to this server.
     * 
     */
    public Optional<Output<List<String>>> aliasIps() {
        return Optional.ofNullable(this.aliasIps);
    }

    /**
     * IP to request to be assigned to this server.
     * If you do not provide this then you will be auto assigned an IP
     * address.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return IP to request to be assigned to this server.
     * If you do not provide this then you will be auto assigned an IP
     * address.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * ID of the network which should be added
     * to the server. Required if `subnet_id` is not set. Successful creation
     * of the resource depends on the existence of a subnet in the Hetzner
     * Cloud Backend. Using `network_id` will not create an explicit
     * dependency between server and subnet. Therefore `depends_on` may need
     * to be used. Alternatively the `subnet_id` property can be used, which
     * will create an explicit dependency between `hcloud.ServerNetwork` and
     * the existence of a subnet.
     * 
     */
    @Import(name="networkId")
    private @Nullable Output<Integer> networkId;

    /**
     * @return ID of the network which should be added
     * to the server. Required if `subnet_id` is not set. Successful creation
     * of the resource depends on the existence of a subnet in the Hetzner
     * Cloud Backend. Using `network_id` will not create an explicit
     * dependency between server and subnet. Therefore `depends_on` may need
     * to be used. Alternatively the `subnet_id` property can be used, which
     * will create an explicit dependency between `hcloud.ServerNetwork` and
     * the existence of a subnet.
     * 
     */
    public Optional<Output<Integer>> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * ID of the server.
     * 
     */
    @Import(name="serverId", required=true)
    private Output<Integer> serverId;

    /**
     * @return ID of the server.
     * 
     */
    public Output<Integer> serverId() {
        return this.serverId;
    }

    /**
     * ID of the sub-network which should be
     * added to the Server. Required if `network_id` is not set.
     * _Note_: if the `ip` property is missing, the Server is currently added
     * to the last created subnet.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return ID of the sub-network which should be
     * added to the Server. Required if `network_id` is not set.
     * _Note_: if the `ip` property is missing, the Server is currently added
     * to the last created subnet.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    private ServerNetworkArgs() {}

    private ServerNetworkArgs(ServerNetworkArgs $) {
        this.aliasIps = $.aliasIps;
        this.ip = $.ip;
        this.networkId = $.networkId;
        this.serverId = $.serverId;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerNetworkArgs $;

        public Builder() {
            $ = new ServerNetworkArgs();
        }

        public Builder(ServerNetworkArgs defaults) {
            $ = new ServerNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliasIps Additional IPs to be assigned
         * to this server.
         * 
         * @return builder
         * 
         */
        public Builder aliasIps(@Nullable Output<List<String>> aliasIps) {
            $.aliasIps = aliasIps;
            return this;
        }

        /**
         * @param aliasIps Additional IPs to be assigned
         * to this server.
         * 
         * @return builder
         * 
         */
        public Builder aliasIps(List<String> aliasIps) {
            return aliasIps(Output.of(aliasIps));
        }

        /**
         * @param aliasIps Additional IPs to be assigned
         * to this server.
         * 
         * @return builder
         * 
         */
        public Builder aliasIps(String... aliasIps) {
            return aliasIps(List.of(aliasIps));
        }

        /**
         * @param ip IP to request to be assigned to this server.
         * If you do not provide this then you will be auto assigned an IP
         * address.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IP to request to be assigned to this server.
         * If you do not provide this then you will be auto assigned an IP
         * address.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param networkId ID of the network which should be added
         * to the server. Required if `subnet_id` is not set. Successful creation
         * of the resource depends on the existence of a subnet in the Hetzner
         * Cloud Backend. Using `network_id` will not create an explicit
         * dependency between server and subnet. Therefore `depends_on` may need
         * to be used. Alternatively the `subnet_id` property can be used, which
         * will create an explicit dependency between `hcloud.ServerNetwork` and
         * the existence of a subnet.
         * 
         * @return builder
         * 
         */
        public Builder networkId(@Nullable Output<Integer> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId ID of the network which should be added
         * to the server. Required if `subnet_id` is not set. Successful creation
         * of the resource depends on the existence of a subnet in the Hetzner
         * Cloud Backend. Using `network_id` will not create an explicit
         * dependency between server and subnet. Therefore `depends_on` may need
         * to be used. Alternatively the `subnet_id` property can be used, which
         * will create an explicit dependency between `hcloud.ServerNetwork` and
         * the existence of a subnet.
         * 
         * @return builder
         * 
         */
        public Builder networkId(Integer networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param serverId ID of the server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(Output<Integer> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId ID of the server.
         * 
         * @return builder
         * 
         */
        public Builder serverId(Integer serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param subnetId ID of the sub-network which should be
         * added to the Server. Required if `network_id` is not set.
         * _Note_: if the `ip` property is missing, the Server is currently added
         * to the last created subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId ID of the sub-network which should be
         * added to the Server. Required if `network_id` is not set.
         * _Note_: if the `ip` property is missing, the Server is currently added
         * to the last created subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public ServerNetworkArgs build() {
            if ($.serverId == null) {
                throw new MissingRequiredPropertyException("ServerNetworkArgs", "serverId");
            }
            return $;
        }
    }

}
