// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerServiceHealthCheckHttpArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerServiceHealthCheckHttpArgs Empty = new LoadBalancerServiceHealthCheckHttpArgs();

    /**
     * Domain we try to access when performing the Health Check.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Domain we try to access when performing the Health Check.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Path we try to access when performing the Health Check.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path we try to access when performing the Health Check.
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Response we expect to be included in the Target response when a Health Check was performed.
     * 
     */
    @Import(name="response")
    private @Nullable Output<String> response;

    /**
     * @return Response we expect to be included in the Target response when a Health Check was performed.
     * 
     */
    public Optional<Output<String>> response() {
        return Optional.ofNullable(this.response);
    }

    /**
     * We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
     * 
     */
    @Import(name="statusCodes")
    private @Nullable Output<List<String>> statusCodes;

    /**
     * @return We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
     * 
     */
    public Optional<Output<List<String>>> statusCodes() {
        return Optional.ofNullable(this.statusCodes);
    }

    /**
     * Enable TLS certificate checking.
     * 
     */
    @Import(name="tls")
    private @Nullable Output<Boolean> tls;

    /**
     * @return Enable TLS certificate checking.
     * 
     */
    public Optional<Output<Boolean>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private LoadBalancerServiceHealthCheckHttpArgs() {}

    private LoadBalancerServiceHealthCheckHttpArgs(LoadBalancerServiceHealthCheckHttpArgs $) {
        this.domain = $.domain;
        this.path = $.path;
        this.response = $.response;
        this.statusCodes = $.statusCodes;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerServiceHealthCheckHttpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerServiceHealthCheckHttpArgs $;

        public Builder() {
            $ = new LoadBalancerServiceHealthCheckHttpArgs();
        }

        public Builder(LoadBalancerServiceHealthCheckHttpArgs defaults) {
            $ = new LoadBalancerServiceHealthCheckHttpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain Domain we try to access when performing the Health Check.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain we try to access when performing the Health Check.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param path Path we try to access when performing the Health Check.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path we try to access when performing the Health Check.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param response Response we expect to be included in the Target response when a Health Check was performed.
         * 
         * @return builder
         * 
         */
        public Builder response(@Nullable Output<String> response) {
            $.response = response;
            return this;
        }

        /**
         * @param response Response we expect to be included in the Target response when a Health Check was performed.
         * 
         * @return builder
         * 
         */
        public Builder response(String response) {
            return response(Output.of(response));
        }

        /**
         * @param statusCodes We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
         * 
         * @return builder
         * 
         */
        public Builder statusCodes(@Nullable Output<List<String>> statusCodes) {
            $.statusCodes = statusCodes;
            return this;
        }

        /**
         * @param statusCodes We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
         * 
         * @return builder
         * 
         */
        public Builder statusCodes(List<String> statusCodes) {
            return statusCodes(Output.of(statusCodes));
        }

        /**
         * @param statusCodes We expect that the target answers with these status codes. If not the target is marked as `unhealthy`.
         * 
         * @return builder
         * 
         */
        public Builder statusCodes(String... statusCodes) {
            return statusCodes(List.of(statusCodes));
        }

        /**
         * @param tls Enable TLS certificate checking.
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<Boolean> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Enable TLS certificate checking.
         * 
         * @return builder
         * 
         */
        public Builder tls(Boolean tls) {
            return tls(Output.of(tls));
        }

        public LoadBalancerServiceHealthCheckHttpArgs build() {
            return $;
        }
    }

}
