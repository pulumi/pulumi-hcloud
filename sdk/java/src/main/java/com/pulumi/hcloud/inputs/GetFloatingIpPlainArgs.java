// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFloatingIpPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFloatingIpPlainArgs Empty = new GetFloatingIpPlainArgs();

    /**
     * ID of the Floating IP.
     * 
     */
    @Import(name="id")
    private @Nullable Integer id;

    /**
     * @return ID of the Floating IP.
     * 
     */
    public Optional<Integer> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * IP address of the Floating IP.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    /**
     * @return IP address of the Floating IP.
     * 
     */
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Name of the Floating IP.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the Floating IP.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * @deprecated
     * Please use the with_selector property instead.
     * 
     */
    @Deprecated /* Please use the with_selector property instead. */
    @Import(name="selector")
    private @Nullable String selector;

    /**
     * @deprecated
     * Please use the with_selector property instead.
     * 
     */
    @Deprecated /* Please use the with_selector property instead. */
    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * [Label selector](https://docs.hetzner.cloud/reference/cloud#label-selector)
     * 
     */
    @Import(name="withSelector")
    private @Nullable String withSelector;

    /**
     * @return [Label selector](https://docs.hetzner.cloud/reference/cloud#label-selector)
     * 
     */
    public Optional<String> withSelector() {
        return Optional.ofNullable(this.withSelector);
    }

    private GetFloatingIpPlainArgs() {}

    private GetFloatingIpPlainArgs(GetFloatingIpPlainArgs $) {
        this.id = $.id;
        this.ipAddress = $.ipAddress;
        this.name = $.name;
        this.selector = $.selector;
        this.withSelector = $.withSelector;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFloatingIpPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFloatingIpPlainArgs $;

        public Builder() {
            $ = new GetFloatingIpPlainArgs();
        }

        public Builder(GetFloatingIpPlainArgs defaults) {
            $ = new GetFloatingIpPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id ID of the Floating IP.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Integer id) {
            $.id = id;
            return this;
        }

        /**
         * @param ipAddress IP address of the Floating IP.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param name Name of the Floating IP.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * Please use the with_selector property instead.
         * 
         */
        @Deprecated /* Please use the with_selector property instead. */
        public Builder selector(@Nullable String selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param withSelector [Label selector](https://docs.hetzner.cloud/reference/cloud#label-selector)
         * 
         * @return builder
         * 
         */
        public Builder withSelector(@Nullable String withSelector) {
            $.withSelector = withSelector;
            return this;
        }

        public GetFloatingIpPlainArgs build() {
            return $;
        }
    }

}
