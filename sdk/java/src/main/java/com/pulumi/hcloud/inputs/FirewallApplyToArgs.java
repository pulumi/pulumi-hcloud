// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FirewallApplyToArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirewallApplyToArgs Empty = new FirewallApplyToArgs();

    /**
     * Label Selector to select servers the firewall should be applied to (only one
     * of `server` and `label_selector`can be applied in one block)
     * 
     */
    @Import(name="labelSelector")
    private @Nullable Output<String> labelSelector;

    /**
     * @return Label Selector to select servers the firewall should be applied to (only one
     * of `server` and `label_selector`can be applied in one block)
     * 
     */
    public Optional<Output<String>> labelSelector() {
        return Optional.ofNullable(this.labelSelector);
    }

    /**
     * ID of the server you want to apply the firewall to (only one of `server`
     * and `label_selector`can be applied in one block)
     * 
     */
    @Import(name="server")
    private @Nullable Output<Integer> server;

    /**
     * @return ID of the server you want to apply the firewall to (only one of `server`
     * and `label_selector`can be applied in one block)
     * 
     */
    public Optional<Output<Integer>> server() {
        return Optional.ofNullable(this.server);
    }

    private FirewallApplyToArgs() {}

    private FirewallApplyToArgs(FirewallApplyToArgs $) {
        this.labelSelector = $.labelSelector;
        this.server = $.server;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallApplyToArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallApplyToArgs $;

        public Builder() {
            $ = new FirewallApplyToArgs();
        }

        public Builder(FirewallApplyToArgs defaults) {
            $ = new FirewallApplyToArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param labelSelector Label Selector to select servers the firewall should be applied to (only one
         * of `server` and `label_selector`can be applied in one block)
         * 
         * @return builder
         * 
         */
        public Builder labelSelector(@Nullable Output<String> labelSelector) {
            $.labelSelector = labelSelector;
            return this;
        }

        /**
         * @param labelSelector Label Selector to select servers the firewall should be applied to (only one
         * of `server` and `label_selector`can be applied in one block)
         * 
         * @return builder
         * 
         */
        public Builder labelSelector(String labelSelector) {
            return labelSelector(Output.of(labelSelector));
        }

        /**
         * @param server ID of the server you want to apply the firewall to (only one of `server`
         * and `label_selector`can be applied in one block)
         * 
         * @return builder
         * 
         */
        public Builder server(@Nullable Output<Integer> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server ID of the server you want to apply the firewall to (only one of `server`
         * and `label_selector`can be applied in one block)
         * 
         * @return builder
         * 
         */
        public Builder server(Integer server) {
            return server(Output.of(server));
        }

        public FirewallApplyToArgs build() {
            return $;
        }
    }

}
