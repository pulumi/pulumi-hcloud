// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImagesArgs Empty = new GetImagesArgs();

    /**
     * Also list images that are marked as deprecated.
     * 
     */
    @Import(name="includeDeprecated")
    private @Nullable Output<Boolean> includeDeprecated;

    /**
     * @return Also list images that are marked as deprecated.
     * 
     */
    public Optional<Output<Boolean>> includeDeprecated() {
        return Optional.ofNullable(this.includeDeprecated);
    }

    /**
     * Sorts list by date.
     * 
     */
    @Import(name="mostRecent")
    private @Nullable Output<Boolean> mostRecent;

    /**
     * @return Sorts list by date.
     * 
     */
    public Optional<Output<Boolean>> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }

    /**
     * List only images with this architecture, could contain `x86` or `arm`.
     * 
     */
    @Import(name="withArchitectures")
    private @Nullable Output<List<String>> withArchitectures;

    /**
     * @return List only images with this architecture, could contain `x86` or `arm`.
     * 
     */
    public Optional<Output<List<String>>> withArchitectures() {
        return Optional.ofNullable(this.withArchitectures);
    }

    /**
     * [Label selector](https://docs.hetzner.cloud/reference/cloud#label-selector)
     * 
     */
    @Import(name="withSelector")
    private @Nullable Output<String> withSelector;

    /**
     * @return [Label selector](https://docs.hetzner.cloud/reference/cloud#label-selector)
     * 
     */
    public Optional<Output<String>> withSelector() {
        return Optional.ofNullable(this.withSelector);
    }

    /**
     * List only images with the specified status, could contain `creating` or `available`.
     * 
     */
    @Import(name="withStatuses")
    private @Nullable Output<List<String>> withStatuses;

    /**
     * @return List only images with the specified status, could contain `creating` or `available`.
     * 
     */
    public Optional<Output<List<String>>> withStatuses() {
        return Optional.ofNullable(this.withStatuses);
    }

    private GetImagesArgs() {}

    private GetImagesArgs(GetImagesArgs $) {
        this.includeDeprecated = $.includeDeprecated;
        this.mostRecent = $.mostRecent;
        this.withArchitectures = $.withArchitectures;
        this.withSelector = $.withSelector;
        this.withStatuses = $.withStatuses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagesArgs $;

        public Builder() {
            $ = new GetImagesArgs();
        }

        public Builder(GetImagesArgs defaults) {
            $ = new GetImagesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param includeDeprecated Also list images that are marked as deprecated.
         * 
         * @return builder
         * 
         */
        public Builder includeDeprecated(@Nullable Output<Boolean> includeDeprecated) {
            $.includeDeprecated = includeDeprecated;
            return this;
        }

        /**
         * @param includeDeprecated Also list images that are marked as deprecated.
         * 
         * @return builder
         * 
         */
        public Builder includeDeprecated(Boolean includeDeprecated) {
            return includeDeprecated(Output.of(includeDeprecated));
        }

        /**
         * @param mostRecent Sorts list by date.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(@Nullable Output<Boolean> mostRecent) {
            $.mostRecent = mostRecent;
            return this;
        }

        /**
         * @param mostRecent Sorts list by date.
         * 
         * @return builder
         * 
         */
        public Builder mostRecent(Boolean mostRecent) {
            return mostRecent(Output.of(mostRecent));
        }

        /**
         * @param withArchitectures List only images with this architecture, could contain `x86` or `arm`.
         * 
         * @return builder
         * 
         */
        public Builder withArchitectures(@Nullable Output<List<String>> withArchitectures) {
            $.withArchitectures = withArchitectures;
            return this;
        }

        /**
         * @param withArchitectures List only images with this architecture, could contain `x86` or `arm`.
         * 
         * @return builder
         * 
         */
        public Builder withArchitectures(List<String> withArchitectures) {
            return withArchitectures(Output.of(withArchitectures));
        }

        /**
         * @param withArchitectures List only images with this architecture, could contain `x86` or `arm`.
         * 
         * @return builder
         * 
         */
        public Builder withArchitectures(String... withArchitectures) {
            return withArchitectures(List.of(withArchitectures));
        }

        /**
         * @param withSelector [Label selector](https://docs.hetzner.cloud/reference/cloud#label-selector)
         * 
         * @return builder
         * 
         */
        public Builder withSelector(@Nullable Output<String> withSelector) {
            $.withSelector = withSelector;
            return this;
        }

        /**
         * @param withSelector [Label selector](https://docs.hetzner.cloud/reference/cloud#label-selector)
         * 
         * @return builder
         * 
         */
        public Builder withSelector(String withSelector) {
            return withSelector(Output.of(withSelector));
        }

        /**
         * @param withStatuses List only images with the specified status, could contain `creating` or `available`.
         * 
         * @return builder
         * 
         */
        public Builder withStatuses(@Nullable Output<List<String>> withStatuses) {
            $.withStatuses = withStatuses;
            return this;
        }

        /**
         * @param withStatuses List only images with the specified status, could contain `creating` or `available`.
         * 
         * @return builder
         * 
         */
        public Builder withStatuses(List<String> withStatuses) {
            return withStatuses(Output.of(withStatuses));
        }

        /**
         * @param withStatuses List only images with the specified status, could contain `creating` or `available`.
         * 
         * @return builder
         * 
         */
        public Builder withStatuses(String... withStatuses) {
            return withStatuses(List.of(withStatuses));
        }

        public GetImagesArgs build() {
            return $;
        }
    }

}
