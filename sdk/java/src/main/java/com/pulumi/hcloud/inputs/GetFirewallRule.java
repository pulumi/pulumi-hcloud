// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFirewallRule extends com.pulumi.resources.InvokeArgs {

    public static final GetFirewallRule Empty = new GetFirewallRule();

    /**
     * (Optional, string) Description of the firewall rule
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return (Optional, string) Description of the firewall rule
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)
     * 
     */
    @Import(name="destinationIps")
    private @Nullable List<String> destinationIps;

    /**
     * @return (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)
     * 
     */
    public Optional<List<String>> destinationIps() {
        return Optional.ofNullable(this.destinationIps);
    }

    /**
     * (Required, string) Direction of the Firewall Rule. `in`, `out`
     * 
     */
    @Import(name="direction", required=true)
    private String direction;

    /**
     * @return (Required, string) Direction of the Firewall Rule. `in`, `out`
     * 
     */
    public String direction() {
        return this.direction;
    }

    /**
     * (Required, string) Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`
     * 
     */
    @Import(name="port")
    private @Nullable String port;

    /**
     * @return (Required, string) Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`
     * 
     */
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (Required, string) Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
     * 
     */
    @Import(name="protocol")
    private @Nullable String protocol;

    /**
     * @return (Required, string) Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)
     * 
     */
    @Import(name="sourceIps")
    private @Nullable List<String> sourceIps;

    /**
     * @return (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)
     * 
     */
    public Optional<List<String>> sourceIps() {
        return Optional.ofNullable(this.sourceIps);
    }

    private GetFirewallRule() {}

    private GetFirewallRule(GetFirewallRule $) {
        this.description = $.description;
        this.destinationIps = $.destinationIps;
        this.direction = $.direction;
        this.port = $.port;
        this.protocol = $.protocol;
        this.sourceIps = $.sourceIps;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFirewallRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFirewallRule $;

        public Builder() {
            $ = new GetFirewallRule();
        }

        public Builder(GetFirewallRule defaults) {
            $ = new GetFirewallRule(Objects.requireNonNull(defaults));
        }

        /**
         * @param description (Optional, string) Description of the firewall rule
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param destinationIps (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)
         * 
         * @return builder
         * 
         */
        public Builder destinationIps(@Nullable List<String> destinationIps) {
            $.destinationIps = destinationIps;
            return this;
        }

        /**
         * @param destinationIps (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `out`)
         * 
         * @return builder
         * 
         */
        public Builder destinationIps(String... destinationIps) {
            return destinationIps(List.of(destinationIps));
        }

        /**
         * @param direction (Required, string) Direction of the Firewall Rule. `in`, `out`
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param port (Required, string) Port of the Firewall Rule. Required when `protocol` is `tcp` or `udp`
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable String port) {
            $.port = port;
            return this;
        }

        /**
         * @param protocol (Required, string) Protocol of the Firewall Rule. `tcp`, `icmp`, `udp`, `gre`, `esp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param sourceIps (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)
         * 
         * @return builder
         * 
         */
        public Builder sourceIps(@Nullable List<String> sourceIps) {
            $.sourceIps = sourceIps;
            return this;
        }

        /**
         * @param sourceIps (Required, List) List of CIDRs that are allowed within this Firewall Rule (when `direction` is `in`)
         * 
         * @return builder
         * 
         */
        public Builder sourceIps(String... sourceIps) {
            return sourceIps(List.of(sourceIps));
        }

        public GetFirewallRule build() {
            if ($.direction == null) {
                throw new MissingRequiredPropertyException("GetFirewallRule", "direction");
            }
            return $;
        }
    }

}
