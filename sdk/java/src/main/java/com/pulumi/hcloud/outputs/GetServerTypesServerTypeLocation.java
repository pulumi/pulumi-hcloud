// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServerTypesServerTypeLocation {
    /**
     * @return Date of the Server Type deprecation announcement.
     * 
     */
    private String deprecationAnnounced;
    /**
     * @return ID of the Location.
     * 
     */
    private Integer id;
    /**
     * @return Whether the Server Type is deprecated.
     * 
     */
    private Boolean isDeprecated;
    /**
     * @return Name of the Location.
     * 
     */
    private String name;
    /**
     * @return Date of the Server Type removal. After this date, the Server Type cannot be used anymore.
     * 
     */
    private String unavailableAfter;

    private GetServerTypesServerTypeLocation() {}
    /**
     * @return Date of the Server Type deprecation announcement.
     * 
     */
    public String deprecationAnnounced() {
        return this.deprecationAnnounced;
    }
    /**
     * @return ID of the Location.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return Whether the Server Type is deprecated.
     * 
     */
    public Boolean isDeprecated() {
        return this.isDeprecated;
    }
    /**
     * @return Name of the Location.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Date of the Server Type removal. After this date, the Server Type cannot be used anymore.
     * 
     */
    public String unavailableAfter() {
        return this.unavailableAfter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerTypesServerTypeLocation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String deprecationAnnounced;
        private Integer id;
        private Boolean isDeprecated;
        private String name;
        private String unavailableAfter;
        public Builder() {}
        public Builder(GetServerTypesServerTypeLocation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deprecationAnnounced = defaults.deprecationAnnounced;
    	      this.id = defaults.id;
    	      this.isDeprecated = defaults.isDeprecated;
    	      this.name = defaults.name;
    	      this.unavailableAfter = defaults.unavailableAfter;
        }

        @CustomType.Setter
        public Builder deprecationAnnounced(String deprecationAnnounced) {
            if (deprecationAnnounced == null) {
              throw new MissingRequiredPropertyException("GetServerTypesServerTypeLocation", "deprecationAnnounced");
            }
            this.deprecationAnnounced = deprecationAnnounced;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerTypesServerTypeLocation", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDeprecated(Boolean isDeprecated) {
            if (isDeprecated == null) {
              throw new MissingRequiredPropertyException("GetServerTypesServerTypeLocation", "isDeprecated");
            }
            this.isDeprecated = isDeprecated;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServerTypesServerTypeLocation", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder unavailableAfter(String unavailableAfter) {
            if (unavailableAfter == null) {
              throw new MissingRequiredPropertyException("GetServerTypesServerTypeLocation", "unavailableAfter");
            }
            this.unavailableAfter = unavailableAfter;
            return this;
        }
        public GetServerTypesServerTypeLocation build() {
            final var _resultValue = new GetServerTypesServerTypeLocation();
            _resultValue.deprecationAnnounced = deprecationAnnounced;
            _resultValue.id = id;
            _resultValue.isDeprecated = isDeprecated;
            _resultValue.name = name;
            _resultValue.unavailableAfter = unavailableAfter;
            return _resultValue;
        }
    }
}
