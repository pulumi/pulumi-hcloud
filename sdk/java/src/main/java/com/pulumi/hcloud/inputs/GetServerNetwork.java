// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetServerNetwork extends com.pulumi.resources.InvokeArgs {

    public static final GetServerNetwork Empty = new GetServerNetwork();

    /**
     * (list) A list of alias IP addresses assigned to the server in the network.
     * 
     */
    @Import(name="aliasIps", required=true)
    private List<String> aliasIps;

    /**
     * @return (list) A list of alias IP addresses assigned to the server in the network.
     * 
     */
    public List<String> aliasIps() {
        return this.aliasIps;
    }

    /**
     * (string) The server&#39;s IP address within the network.
     * 
     */
    @Import(name="ip", required=true)
    private String ip;

    /**
     * @return (string) The server&#39;s IP address within the network.
     * 
     */
    public String ip() {
        return this.ip;
    }

    /**
     * (string) The MAC address associated with the server&#39;s private network interface.
     * 
     */
    @Import(name="macAddress", required=true)
    private String macAddress;

    /**
     * @return (string) The MAC address associated with the server&#39;s private network interface.
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * (int) The unique identifier for the network.
     * 
     */
    @Import(name="networkId", required=true)
    private Integer networkId;

    /**
     * @return (int) The unique identifier for the network.
     * 
     */
    public Integer networkId() {
        return this.networkId;
    }

    private GetServerNetwork() {}

    private GetServerNetwork(GetServerNetwork $) {
        this.aliasIps = $.aliasIps;
        this.ip = $.ip;
        this.macAddress = $.macAddress;
        this.networkId = $.networkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServerNetwork defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServerNetwork $;

        public Builder() {
            $ = new GetServerNetwork();
        }

        public Builder(GetServerNetwork defaults) {
            $ = new GetServerNetwork(Objects.requireNonNull(defaults));
        }

        /**
         * @param aliasIps (list) A list of alias IP addresses assigned to the server in the network.
         * 
         * @return builder
         * 
         */
        public Builder aliasIps(List<String> aliasIps) {
            $.aliasIps = aliasIps;
            return this;
        }

        /**
         * @param aliasIps (list) A list of alias IP addresses assigned to the server in the network.
         * 
         * @return builder
         * 
         */
        public Builder aliasIps(String... aliasIps) {
            return aliasIps(List.of(aliasIps));
        }

        /**
         * @param ip (string) The server&#39;s IP address within the network.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param macAddress (string) The MAC address associated with the server&#39;s private network interface.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param networkId (int) The unique identifier for the network.
         * 
         * @return builder
         * 
         */
        public Builder networkId(Integer networkId) {
            $.networkId = networkId;
            return this;
        }

        public GetServerNetwork build() {
            if ($.aliasIps == null) {
                throw new MissingRequiredPropertyException("GetServerNetwork", "aliasIps");
            }
            if ($.ip == null) {
                throw new MissingRequiredPropertyException("GetServerNetwork", "ip");
            }
            if ($.macAddress == null) {
                throw new MissingRequiredPropertyException("GetServerNetwork", "macAddress");
            }
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GetServerNetwork", "networkId");
            }
            return $;
        }
    }

}
