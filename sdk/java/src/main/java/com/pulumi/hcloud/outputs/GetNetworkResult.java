// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetNetworkResult {
    /**
     * @return (bool) Whether delete protection is enabled.
     * 
     */
    private Boolean deleteProtection;
    /**
     * @return (bool) Indicates if the routes from this network should be exposed to the vSwitch connection. The exposing only takes effect if a vSwitch connection is active.
     * 
     */
    private Boolean exposeRoutesToVswitch;
    /**
     * @return Unique ID of the Network.
     * 
     */
    private Integer id;
    /**
     * @return IPv4 prefix of the Network.
     * 
     */
    private String ipRange;
    private Map<String,String> labels;
    /**
     * @deprecated
     * This attribute has no purpose.
     * 
     */
    @Deprecated /* This attribute has no purpose. */
    private @Nullable Boolean mostRecent;
    /**
     * @return Name of the Network.
     * 
     */
    private String name;
    private @Nullable String withSelector;

    private GetNetworkResult() {}
    /**
     * @return (bool) Whether delete protection is enabled.
     * 
     */
    public Boolean deleteProtection() {
        return this.deleteProtection;
    }
    /**
     * @return (bool) Indicates if the routes from this network should be exposed to the vSwitch connection. The exposing only takes effect if a vSwitch connection is active.
     * 
     */
    public Boolean exposeRoutesToVswitch() {
        return this.exposeRoutesToVswitch;
    }
    /**
     * @return Unique ID of the Network.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return IPv4 prefix of the Network.
     * 
     */
    public String ipRange() {
        return this.ipRange;
    }
    public Map<String,String> labels() {
        return this.labels;
    }
    /**
     * @deprecated
     * This attribute has no purpose.
     * 
     */
    @Deprecated /* This attribute has no purpose. */
    public Optional<Boolean> mostRecent() {
        return Optional.ofNullable(this.mostRecent);
    }
    /**
     * @return Name of the Network.
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<String> withSelector() {
        return Optional.ofNullable(this.withSelector);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean deleteProtection;
        private Boolean exposeRoutesToVswitch;
        private Integer id;
        private String ipRange;
        private Map<String,String> labels;
        private @Nullable Boolean mostRecent;
        private String name;
        private @Nullable String withSelector;
        public Builder() {}
        public Builder(GetNetworkResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteProtection = defaults.deleteProtection;
    	      this.exposeRoutesToVswitch = defaults.exposeRoutesToVswitch;
    	      this.id = defaults.id;
    	      this.ipRange = defaults.ipRange;
    	      this.labels = defaults.labels;
    	      this.mostRecent = defaults.mostRecent;
    	      this.name = defaults.name;
    	      this.withSelector = defaults.withSelector;
        }

        @CustomType.Setter
        public Builder deleteProtection(Boolean deleteProtection) {
            if (deleteProtection == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "deleteProtection");
            }
            this.deleteProtection = deleteProtection;
            return this;
        }
        @CustomType.Setter
        public Builder exposeRoutesToVswitch(Boolean exposeRoutesToVswitch) {
            if (exposeRoutesToVswitch == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "exposeRoutesToVswitch");
            }
            this.exposeRoutesToVswitch = exposeRoutesToVswitch;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipRange(String ipRange) {
            if (ipRange == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "ipRange");
            }
            this.ipRange = ipRange;
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,String> labels) {
            if (labels == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "labels");
            }
            this.labels = labels;
            return this;
        }
        @CustomType.Setter
        public Builder mostRecent(@Nullable Boolean mostRecent) {

            this.mostRecent = mostRecent;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNetworkResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder withSelector(@Nullable String withSelector) {

            this.withSelector = withSelector;
            return this;
        }
        public GetNetworkResult build() {
            final var _resultValue = new GetNetworkResult();
            _resultValue.deleteProtection = deleteProtection;
            _resultValue.exposeRoutesToVswitch = exposeRoutesToVswitch;
            _resultValue.id = id;
            _resultValue.ipRange = ipRange;
            _resultValue.labels = labels;
            _resultValue.mostRecent = mostRecent;
            _resultValue.name = name;
            _resultValue.withSelector = withSelector;
            return _resultValue;
        }
    }
}
