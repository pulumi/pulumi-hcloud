// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerTargetArgs Empty = new LoadBalancerTargetArgs();

    /**
     * IP address for an IP Target. Required if
     * `type` is `ip`.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return IP address for an IP Target. Required if
     * `type` is `ip`.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Label Selector selecting targets
     * for this Load Balancer. Required if `type` is `labelSelector`.
     * 
     */
    @Import(name="labelSelector")
    private @Nullable Output<String> labelSelector;

    /**
     * @return Label Selector selecting targets
     * for this Load Balancer. Required if `type` is `labelSelector`.
     * 
     */
    public Optional<Output<String>> labelSelector() {
        return Optional.ofNullable(this.labelSelector);
    }

    /**
     * ID of the Load Balancer to which
     * the target gets attached.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private Output<Integer> loadBalancerId;

    /**
     * @return ID of the Load Balancer to which
     * the target gets attached.
     * 
     */
    public Output<Integer> loadBalancerId() {
        return this.loadBalancerId;
    }

    /**
     * ID of the server which should be a
     * target for this Load Balancer. Required if `type` is `server`
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<Integer> serverId;

    /**
     * @return ID of the server which should be a
     * target for this Load Balancer. Required if `type` is `server`
     * 
     */
    public Optional<Output<Integer>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    /**
     * Type of the target. Possible values
     * `server`, `labelSelector`, `ip`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the target. Possible values
     * `server`, `labelSelector`, `ip`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * use the private IP to connect to
     * Load Balancer targets. Only allowed if type is `server` or
     * `labelSelector`.
     * 
     */
    @Import(name="usePrivateIp")
    private @Nullable Output<Boolean> usePrivateIp;

    /**
     * @return use the private IP to connect to
     * Load Balancer targets. Only allowed if type is `server` or
     * `labelSelector`.
     * 
     */
    public Optional<Output<Boolean>> usePrivateIp() {
        return Optional.ofNullable(this.usePrivateIp);
    }

    private LoadBalancerTargetArgs() {}

    private LoadBalancerTargetArgs(LoadBalancerTargetArgs $) {
        this.ip = $.ip;
        this.labelSelector = $.labelSelector;
        this.loadBalancerId = $.loadBalancerId;
        this.serverId = $.serverId;
        this.type = $.type;
        this.usePrivateIp = $.usePrivateIp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerTargetArgs $;

        public Builder() {
            $ = new LoadBalancerTargetArgs();
        }

        public Builder(LoadBalancerTargetArgs defaults) {
            $ = new LoadBalancerTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ip IP address for an IP Target. Required if
         * `type` is `ip`.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip IP address for an IP Target. Required if
         * `type` is `ip`.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param labelSelector Label Selector selecting targets
         * for this Load Balancer. Required if `type` is `labelSelector`.
         * 
         * @return builder
         * 
         */
        public Builder labelSelector(@Nullable Output<String> labelSelector) {
            $.labelSelector = labelSelector;
            return this;
        }

        /**
         * @param labelSelector Label Selector selecting targets
         * for this Load Balancer. Required if `type` is `labelSelector`.
         * 
         * @return builder
         * 
         */
        public Builder labelSelector(String labelSelector) {
            return labelSelector(Output.of(labelSelector));
        }

        /**
         * @param loadBalancerId ID of the Load Balancer to which
         * the target gets attached.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Output<Integer> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId ID of the Load Balancer to which
         * the target gets attached.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Integer loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param serverId ID of the server which should be a
         * target for this Load Balancer. Required if `type` is `server`
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<Integer> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId ID of the server which should be a
         * target for this Load Balancer. Required if `type` is `server`
         * 
         * @return builder
         * 
         */
        public Builder serverId(Integer serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param type Type of the target. Possible values
         * `server`, `labelSelector`, `ip`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the target. Possible values
         * `server`, `labelSelector`, `ip`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param usePrivateIp use the private IP to connect to
         * Load Balancer targets. Only allowed if type is `server` or
         * `labelSelector`.
         * 
         * @return builder
         * 
         */
        public Builder usePrivateIp(@Nullable Output<Boolean> usePrivateIp) {
            $.usePrivateIp = usePrivateIp;
            return this;
        }

        /**
         * @param usePrivateIp use the private IP to connect to
         * Load Balancer targets. Only allowed if type is `server` or
         * `labelSelector`.
         * 
         * @return builder
         * 
         */
        public Builder usePrivateIp(Boolean usePrivateIp) {
            return usePrivateIp(Output.of(usePrivateIp));
        }

        public LoadBalancerTargetArgs build() {
            if ($.loadBalancerId == null) {
                throw new MissingRequiredPropertyException("LoadBalancerTargetArgs", "loadBalancerId");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("LoadBalancerTargetArgs", "type");
            }
            return $;
        }
    }

}
