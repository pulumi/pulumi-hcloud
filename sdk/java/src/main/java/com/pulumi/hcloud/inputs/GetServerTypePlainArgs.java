// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetServerTypePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetServerTypePlainArgs Empty = new GetServerTypePlainArgs();

    /**
     * (Optional, string) Date when the deprecation of the server type was announced. Only set when the server type is deprecated.
     * 
     */
    @Import(name="deprecationAnnounced")
    private @Nullable String deprecationAnnounced;

    /**
     * @return (Optional, string) Date when the deprecation of the server type was announced. Only set when the server type is deprecated.
     * 
     */
    public Optional<String> deprecationAnnounced() {
        return Optional.ofNullable(this.deprecationAnnounced);
    }

    /**
     * ID of the server_type.
     * 
     */
    @Import(name="id")
    private @Nullable Integer id;

    /**
     * @return ID of the server_type.
     * 
     */
    public Optional<Integer> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the server_type.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the server_type.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Optional, string) Date when the server type will not be available for new servers. Only set when the server type is deprecated.
     * 
     */
    @Import(name="unavailableAfter")
    private @Nullable String unavailableAfter;

    /**
     * @return (Optional, string) Date when the server type will not be available for new servers. Only set when the server type is deprecated.
     * 
     */
    public Optional<String> unavailableAfter() {
        return Optional.ofNullable(this.unavailableAfter);
    }

    private GetServerTypePlainArgs() {}

    private GetServerTypePlainArgs(GetServerTypePlainArgs $) {
        this.deprecationAnnounced = $.deprecationAnnounced;
        this.id = $.id;
        this.name = $.name;
        this.unavailableAfter = $.unavailableAfter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetServerTypePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetServerTypePlainArgs $;

        public Builder() {
            $ = new GetServerTypePlainArgs();
        }

        public Builder(GetServerTypePlainArgs defaults) {
            $ = new GetServerTypePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deprecationAnnounced (Optional, string) Date when the deprecation of the server type was announced. Only set when the server type is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder deprecationAnnounced(@Nullable String deprecationAnnounced) {
            $.deprecationAnnounced = deprecationAnnounced;
            return this;
        }

        /**
         * @param id ID of the server_type.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Integer id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Name of the server_type.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param unavailableAfter (Optional, string) Date when the server type will not be available for new servers. Only set when the server type is deprecated.
         * 
         * @return builder
         * 
         */
        public Builder unavailableAfter(@Nullable String unavailableAfter) {
            $.unavailableAfter = unavailableAfter;
            return this;
        }

        public GetServerTypePlainArgs build() {
            return $;
        }
    }

}
