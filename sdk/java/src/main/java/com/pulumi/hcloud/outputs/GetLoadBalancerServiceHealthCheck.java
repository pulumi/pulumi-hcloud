// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.hcloud.outputs.GetLoadBalancerServiceHealthCheckHttp;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLoadBalancerServiceHealthCheck {
    /**
     * @return (list) List of http configurations when `protocol` is `http` or `https`.
     * 
     */
    private List<GetLoadBalancerServiceHealthCheckHttp> https;
    /**
     * @return (int) Interval how often the health check will be performed, in seconds.
     * 
     */
    private Integer interval;
    /**
     * @return (int) Port the health check tries to connect to. Can be everything between `1` and `65535`.
     * 
     */
    private Integer port;
    /**
     * @return (string) Protocol the health check uses. `http`, `https` or `tcp`
     * 
     */
    private String protocol;
    /**
     * @return (int) Number of tries a health check will be performed until a target will be listed as `unhealthy`.
     * 
     */
    private Integer retries;
    /**
     * @return (int) Timeout when a health check try will be canceled if there is no response, in seconds.
     * 
     */
    private Integer timeout;

    private GetLoadBalancerServiceHealthCheck() {}
    /**
     * @return (list) List of http configurations when `protocol` is `http` or `https`.
     * 
     */
    public List<GetLoadBalancerServiceHealthCheckHttp> https() {
        return this.https;
    }
    /**
     * @return (int) Interval how often the health check will be performed, in seconds.
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return (int) Port the health check tries to connect to. Can be everything between `1` and `65535`.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return (string) Protocol the health check uses. `http`, `https` or `tcp`
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return (int) Number of tries a health check will be performed until a target will be listed as `unhealthy`.
     * 
     */
    public Integer retries() {
        return this.retries;
    }
    /**
     * @return (int) Timeout when a health check try will be canceled if there is no response, in seconds.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerServiceHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetLoadBalancerServiceHealthCheckHttp> https;
        private Integer interval;
        private Integer port;
        private String protocol;
        private Integer retries;
        private Integer timeout;
        public Builder() {}
        public Builder(GetLoadBalancerServiceHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.https = defaults.https;
    	      this.interval = defaults.interval;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.retries = defaults.retries;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder https(List<GetLoadBalancerServiceHealthCheckHttp> https) {
            if (https == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerServiceHealthCheck", "https");
            }
            this.https = https;
            return this;
        }
        public Builder https(GetLoadBalancerServiceHealthCheckHttp... https) {
            return https(List.of(https));
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerServiceHealthCheck", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerServiceHealthCheck", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerServiceHealthCheck", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder retries(Integer retries) {
            if (retries == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerServiceHealthCheck", "retries");
            }
            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerServiceHealthCheck", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        public GetLoadBalancerServiceHealthCheck build() {
            final var _resultValue = new GetLoadBalancerServiceHealthCheck();
            _resultValue.https = https;
            _resultValue.interval = interval;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.retries = retries;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
