// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.hcloud.inputs.LoadBalancerServiceHealthCheckArgs;
import com.pulumi.hcloud.inputs.LoadBalancerServiceHttpArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerServiceArgs Empty = new LoadBalancerServiceArgs();

    /**
     * Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Integer> destinationPort;

    /**
     * @return Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.
     * 
     */
    public Optional<Output<Integer>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * Health Check configuration when `protocol` is `http` or `https`.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<LoadBalancerServiceHealthCheckArgs> healthCheck;

    /**
     * @return Health Check configuration when `protocol` is `http` or `https`.
     * 
     */
    public Optional<Output<LoadBalancerServiceHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * HTTP configuration when `protocol` is `http` or `https`.
     * 
     */
    @Import(name="http")
    private @Nullable Output<LoadBalancerServiceHttpArgs> http;

    /**
     * @return HTTP configuration when `protocol` is `http` or `https`.
     * 
     */
    public Optional<Output<LoadBalancerServiceHttpArgs>> http() {
        return Optional.ofNullable(this.http);
    }

    /**
     * Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
     * 
     */
    @Import(name="listenPort")
    private @Nullable Output<Integer> listenPort;

    /**
     * @return Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
     * 
     */
    public Optional<Output<Integer>> listenPort() {
        return Optional.ofNullable(this.listenPort);
    }

    /**
     * Id of the load balancer this service belongs to.
     * 
     */
    @Import(name="loadBalancerId", required=true)
    private Output<String> loadBalancerId;

    /**
     * @return Id of the load balancer this service belongs to.
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }

    /**
     * Protocol of the service. `http`, `https` or `tcp`
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return Protocol of the service. `http`, `https` or `tcp`
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Enable proxyprotocol.
     * 
     */
    @Import(name="proxyprotocol")
    private @Nullable Output<Boolean> proxyprotocol;

    /**
     * @return Enable proxyprotocol.
     * 
     */
    public Optional<Output<Boolean>> proxyprotocol() {
        return Optional.ofNullable(this.proxyprotocol);
    }

    private LoadBalancerServiceArgs() {}

    private LoadBalancerServiceArgs(LoadBalancerServiceArgs $) {
        this.destinationPort = $.destinationPort;
        this.healthCheck = $.healthCheck;
        this.http = $.http;
        this.listenPort = $.listenPort;
        this.loadBalancerId = $.loadBalancerId;
        this.protocol = $.protocol;
        this.proxyprotocol = $.proxyprotocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerServiceArgs $;

        public Builder() {
            $ = new LoadBalancerServiceArgs();
        }

        public Builder(LoadBalancerServiceArgs defaults) {
            $ = new LoadBalancerServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPort Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort Port the service connects to the targets on, required if protocol is `tcp`. Can be everything between `1` and `65535`.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(Integer destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param healthCheck Health Check configuration when `protocol` is `http` or `https`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<LoadBalancerServiceHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck Health Check configuration when `protocol` is `http` or `https`.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(LoadBalancerServiceHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param http HTTP configuration when `protocol` is `http` or `https`.
         * 
         * @return builder
         * 
         */
        public Builder http(@Nullable Output<LoadBalancerServiceHttpArgs> http) {
            $.http = http;
            return this;
        }

        /**
         * @param http HTTP configuration when `protocol` is `http` or `https`.
         * 
         * @return builder
         * 
         */
        public Builder http(LoadBalancerServiceHttpArgs http) {
            return http(Output.of(http));
        }

        /**
         * @param listenPort Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder listenPort(@Nullable Output<Integer> listenPort) {
            $.listenPort = listenPort;
            return this;
        }

        /**
         * @param listenPort Port the service listen on, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder listenPort(Integer listenPort) {
            return listenPort(Output.of(listenPort));
        }

        /**
         * @param loadBalancerId Id of the load balancer this service belongs to.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId Id of the load balancer this service belongs to.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param protocol Protocol of the service. `http`, `https` or `tcp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol of the service. `http`, `https` or `tcp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param proxyprotocol Enable proxyprotocol.
         * 
         * @return builder
         * 
         */
        public Builder proxyprotocol(@Nullable Output<Boolean> proxyprotocol) {
            $.proxyprotocol = proxyprotocol;
            return this;
        }

        /**
         * @param proxyprotocol Enable proxyprotocol.
         * 
         * @return builder
         * 
         */
        public Builder proxyprotocol(Boolean proxyprotocol) {
            return proxyprotocol(Output.of(proxyprotocol));
        }

        public LoadBalancerServiceArgs build() {
            if ($.loadBalancerId == null) {
                throw new MissingRequiredPropertyException("LoadBalancerServiceArgs", "loadBalancerId");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("LoadBalancerServiceArgs", "protocol");
            }
            return $;
        }
    }

}
