// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.hcloud.outputs.GetLocationsLocation;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLocationsResult {
    /**
     * @deprecated
     * Use locations list instead
     * 
     */
    @Deprecated /* Use locations list instead */
    private List<String> descriptions;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @deprecated
     * Use locations list instead
     * 
     */
    @Deprecated /* Use locations list instead */
    private List<String> locationIds;
    private List<GetLocationsLocation> locations;
    /**
     * @deprecated
     * Use locations list instead
     * 
     */
    @Deprecated /* Use locations list instead */
    private List<String> names;

    private GetLocationsResult() {}
    /**
     * @deprecated
     * Use locations list instead
     * 
     */
    @Deprecated /* Use locations list instead */
    public List<String> descriptions() {
        return this.descriptions;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @deprecated
     * Use locations list instead
     * 
     */
    @Deprecated /* Use locations list instead */
    public List<String> locationIds() {
        return this.locationIds;
    }
    public List<GetLocationsLocation> locations() {
        return this.locations;
    }
    /**
     * @deprecated
     * Use locations list instead
     * 
     */
    @Deprecated /* Use locations list instead */
    public List<String> names() {
        return this.names;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLocationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> descriptions;
        private String id;
        private List<String> locationIds;
        private List<GetLocationsLocation> locations;
        private List<String> names;
        public Builder() {}
        public Builder(GetLocationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.descriptions = defaults.descriptions;
    	      this.id = defaults.id;
    	      this.locationIds = defaults.locationIds;
    	      this.locations = defaults.locations;
    	      this.names = defaults.names;
        }

        @CustomType.Setter
        public Builder descriptions(List<String> descriptions) {
            if (descriptions == null) {
              throw new MissingRequiredPropertyException("GetLocationsResult", "descriptions");
            }
            this.descriptions = descriptions;
            return this;
        }
        public Builder descriptions(String... descriptions) {
            return descriptions(List.of(descriptions));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLocationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder locationIds(List<String> locationIds) {
            if (locationIds == null) {
              throw new MissingRequiredPropertyException("GetLocationsResult", "locationIds");
            }
            this.locationIds = locationIds;
            return this;
        }
        public Builder locationIds(String... locationIds) {
            return locationIds(List.of(locationIds));
        }
        @CustomType.Setter
        public Builder locations(List<GetLocationsLocation> locations) {
            if (locations == null) {
              throw new MissingRequiredPropertyException("GetLocationsResult", "locations");
            }
            this.locations = locations;
            return this;
        }
        public Builder locations(GetLocationsLocation... locations) {
            return locations(List.of(locations));
        }
        @CustomType.Setter
        public Builder names(List<String> names) {
            if (names == null) {
              throw new MissingRequiredPropertyException("GetLocationsResult", "names");
            }
            this.names = names;
            return this;
        }
        public Builder names(String... names) {
            return names(List.of(names));
        }
        public GetLocationsResult build() {
            final var _resultValue = new GetLocationsResult();
            _resultValue.descriptions = descriptions;
            _resultValue.id = id;
            _resultValue.locationIds = locationIds;
            _resultValue.locations = locations;
            _resultValue.names = names;
            return _resultValue;
        }
    }
}
