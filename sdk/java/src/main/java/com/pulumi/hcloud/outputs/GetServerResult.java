// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetServerResult {
    /**
     * @return (string) The backup window of the server, if enabled.
     * 
     */
    private String backupWindow;
    /**
     * @return (bool) Whether backups are enabled.
     * 
     */
    private Boolean backups;
    /**
     * @return (string) The datacenter name.
     * 
     */
    private String datacenter;
    /**
     * @return (bool) Whether delete protection is enabled.
     * 
     */
    private Boolean deleteProtection;
    /**
     * @return (Optional, list) Firewall IDs the server is attached to.
     * 
     */
    private List<Integer> firewallIds;
    /**
     * @return (int) Unique ID of the server.
     * 
     */
    private Integer id;
    /**
     * @return (string) Name or ID of the image the server was created from.
     * 
     */
    private String image;
    /**
     * @return (string) The IPv4 address.
     * 
     */
    private String ipv4Address;
    /**
     * @return (string) The first IPv6 address of the assigned network.
     * 
     */
    private String ipv6Address;
    /**
     * @return (string) The IPv6 network.
     * 
     */
    private String ipv6Network;
    /**
     * @return (string) ID or Name of the mounted ISO image.
     * 
     */
    private String iso;
    /**
     * @return (map) User-defined labels (key-value pairs)
     * 
     */
    private Map<String,Object> labels;
    /**
     * @return (string) The location name.
     * 
     */
    private String location;
    /**
     * @return (string) Name of the server.
     * 
     */
    private String name;
    /**
     * @return (Optional, string) Placement Group ID the server is assigned to.
     * 
     */
    private @Nullable Integer placementGroupId;
    /**
     * @return (bool) Whether rebuild protection is enabled.
     * 
     */
    private Boolean rebuildProtection;
    private String rescue;
    /**
     * @deprecated
     * Please use the with_selector property instead.
     * 
     */
    @Deprecated /* Please use the with_selector property instead. */
    private @Nullable String selector;
    /**
     * @return (string) Name of the server type.
     * 
     */
    private String serverType;
    /**
     * @return (string) The status of the server.
     * 
     */
    private String status;
    private @Nullable String withSelector;
    private @Nullable List<String> withStatuses;

    private GetServerResult() {}
    /**
     * @return (string) The backup window of the server, if enabled.
     * 
     */
    public String backupWindow() {
        return this.backupWindow;
    }
    /**
     * @return (bool) Whether backups are enabled.
     * 
     */
    public Boolean backups() {
        return this.backups;
    }
    /**
     * @return (string) The datacenter name.
     * 
     */
    public String datacenter() {
        return this.datacenter;
    }
    /**
     * @return (bool) Whether delete protection is enabled.
     * 
     */
    public Boolean deleteProtection() {
        return this.deleteProtection;
    }
    /**
     * @return (Optional, list) Firewall IDs the server is attached to.
     * 
     */
    public List<Integer> firewallIds() {
        return this.firewallIds;
    }
    /**
     * @return (int) Unique ID of the server.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return (string) Name or ID of the image the server was created from.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return (string) The IPv4 address.
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return (string) The first IPv6 address of the assigned network.
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return (string) The IPv6 network.
     * 
     */
    public String ipv6Network() {
        return this.ipv6Network;
    }
    /**
     * @return (string) ID or Name of the mounted ISO image.
     * 
     */
    public String iso() {
        return this.iso;
    }
    /**
     * @return (map) User-defined labels (key-value pairs)
     * 
     */
    public Map<String,Object> labels() {
        return this.labels;
    }
    /**
     * @return (string) The location name.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return (string) Name of the server.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return (Optional, string) Placement Group ID the server is assigned to.
     * 
     */
    public Optional<Integer> placementGroupId() {
        return Optional.ofNullable(this.placementGroupId);
    }
    /**
     * @return (bool) Whether rebuild protection is enabled.
     * 
     */
    public Boolean rebuildProtection() {
        return this.rebuildProtection;
    }
    public String rescue() {
        return this.rescue;
    }
    /**
     * @deprecated
     * Please use the with_selector property instead.
     * 
     */
    @Deprecated /* Please use the with_selector property instead. */
    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }
    /**
     * @return (string) Name of the server type.
     * 
     */
    public String serverType() {
        return this.serverType;
    }
    /**
     * @return (string) The status of the server.
     * 
     */
    public String status() {
        return this.status;
    }
    public Optional<String> withSelector() {
        return Optional.ofNullable(this.withSelector);
    }
    public List<String> withStatuses() {
        return this.withStatuses == null ? List.of() : this.withStatuses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String backupWindow;
        private Boolean backups;
        private String datacenter;
        private Boolean deleteProtection;
        private List<Integer> firewallIds;
        private Integer id;
        private String image;
        private String ipv4Address;
        private String ipv6Address;
        private String ipv6Network;
        private String iso;
        private Map<String,Object> labels;
        private String location;
        private String name;
        private @Nullable Integer placementGroupId;
        private Boolean rebuildProtection;
        private String rescue;
        private @Nullable String selector;
        private String serverType;
        private String status;
        private @Nullable String withSelector;
        private @Nullable List<String> withStatuses;
        public Builder() {}
        public Builder(GetServerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupWindow = defaults.backupWindow;
    	      this.backups = defaults.backups;
    	      this.datacenter = defaults.datacenter;
    	      this.deleteProtection = defaults.deleteProtection;
    	      this.firewallIds = defaults.firewallIds;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6Network = defaults.ipv6Network;
    	      this.iso = defaults.iso;
    	      this.labels = defaults.labels;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.placementGroupId = defaults.placementGroupId;
    	      this.rebuildProtection = defaults.rebuildProtection;
    	      this.rescue = defaults.rescue;
    	      this.selector = defaults.selector;
    	      this.serverType = defaults.serverType;
    	      this.status = defaults.status;
    	      this.withSelector = defaults.withSelector;
    	      this.withStatuses = defaults.withStatuses;
        }

        @CustomType.Setter
        public Builder backupWindow(String backupWindow) {
            this.backupWindow = Objects.requireNonNull(backupWindow);
            return this;
        }
        @CustomType.Setter
        public Builder backups(Boolean backups) {
            this.backups = Objects.requireNonNull(backups);
            return this;
        }
        @CustomType.Setter
        public Builder datacenter(String datacenter) {
            this.datacenter = Objects.requireNonNull(datacenter);
            return this;
        }
        @CustomType.Setter
        public Builder deleteProtection(Boolean deleteProtection) {
            this.deleteProtection = Objects.requireNonNull(deleteProtection);
            return this;
        }
        @CustomType.Setter
        public Builder firewallIds(List<Integer> firewallIds) {
            this.firewallIds = Objects.requireNonNull(firewallIds);
            return this;
        }
        public Builder firewallIds(Integer... firewallIds) {
            return firewallIds(List.of(firewallIds));
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            this.ipv4Address = Objects.requireNonNull(ipv4Address);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            this.ipv6Address = Objects.requireNonNull(ipv6Address);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Network(String ipv6Network) {
            this.ipv6Network = Objects.requireNonNull(ipv6Network);
            return this;
        }
        @CustomType.Setter
        public Builder iso(String iso) {
            this.iso = Objects.requireNonNull(iso);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,Object> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder placementGroupId(@Nullable Integer placementGroupId) {
            this.placementGroupId = placementGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder rebuildProtection(Boolean rebuildProtection) {
            this.rebuildProtection = Objects.requireNonNull(rebuildProtection);
            return this;
        }
        @CustomType.Setter
        public Builder rescue(String rescue) {
            this.rescue = Objects.requireNonNull(rescue);
            return this;
        }
        @CustomType.Setter
        public Builder selector(@Nullable String selector) {
            this.selector = selector;
            return this;
        }
        @CustomType.Setter
        public Builder serverType(String serverType) {
            this.serverType = Objects.requireNonNull(serverType);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder withSelector(@Nullable String withSelector) {
            this.withSelector = withSelector;
            return this;
        }
        @CustomType.Setter
        public Builder withStatuses(@Nullable List<String> withStatuses) {
            this.withStatuses = withStatuses;
            return this;
        }
        public Builder withStatuses(String... withStatuses) {
            return withStatuses(List.of(withStatuses));
        }
        public GetServerResult build() {
            final var o = new GetServerResult();
            o.backupWindow = backupWindow;
            o.backups = backups;
            o.datacenter = datacenter;
            o.deleteProtection = deleteProtection;
            o.firewallIds = firewallIds;
            o.id = id;
            o.image = image;
            o.ipv4Address = ipv4Address;
            o.ipv6Address = ipv6Address;
            o.ipv6Network = ipv6Network;
            o.iso = iso;
            o.labels = labels;
            o.location = location;
            o.name = name;
            o.placementGroupId = placementGroupId;
            o.rebuildProtection = rebuildProtection;
            o.rescue = rescue;
            o.selector = selector;
            o.serverType = serverType;
            o.status = status;
            o.withSelector = withSelector;
            o.withStatuses = withStatuses;
            return o;
        }
    }
}
