// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeAttachmentState extends com.pulumi.resources.ResourceArgs {

    public static final VolumeAttachmentState Empty = new VolumeAttachmentState();

    /**
     * Automount the volume upon attaching it.
     * 
     */
    @Import(name="automount")
    private @Nullable Output<Boolean> automount;

    /**
     * @return Automount the volume upon attaching it.
     * 
     */
    public Optional<Output<Boolean>> automount() {
        return Optional.ofNullable(this.automount);
    }

    /**
     * Server to attach the Volume to.
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<Integer> serverId;

    /**
     * @return Server to attach the Volume to.
     * 
     */
    public Optional<Output<Integer>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    /**
     * ID of the Volume.
     * 
     */
    @Import(name="volumeId")
    private @Nullable Output<Integer> volumeId;

    /**
     * @return ID of the Volume.
     * 
     */
    public Optional<Output<Integer>> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    private VolumeAttachmentState() {}

    private VolumeAttachmentState(VolumeAttachmentState $) {
        this.automount = $.automount;
        this.serverId = $.serverId;
        this.volumeId = $.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeAttachmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeAttachmentState $;

        public Builder() {
            $ = new VolumeAttachmentState();
        }

        public Builder(VolumeAttachmentState defaults) {
            $ = new VolumeAttachmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param automount Automount the volume upon attaching it.
         * 
         * @return builder
         * 
         */
        public Builder automount(@Nullable Output<Boolean> automount) {
            $.automount = automount;
            return this;
        }

        /**
         * @param automount Automount the volume upon attaching it.
         * 
         * @return builder
         * 
         */
        public Builder automount(Boolean automount) {
            return automount(Output.of(automount));
        }

        /**
         * @param serverId Server to attach the Volume to.
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<Integer> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId Server to attach the Volume to.
         * 
         * @return builder
         * 
         */
        public Builder serverId(Integer serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param volumeId ID of the Volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(@Nullable Output<Integer> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId ID of the Volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(Integer volumeId) {
            return volumeId(Output.of(volumeId));
        }

        public VolumeAttachmentState build() {
            return $;
        }
    }

}
