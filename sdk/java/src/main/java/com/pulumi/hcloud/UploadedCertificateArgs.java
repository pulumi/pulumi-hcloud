// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UploadedCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final UploadedCertificateArgs Empty = new UploadedCertificateArgs();

    /**
     * PEM encoded TLS certificate.
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    /**
     * @return PEM encoded TLS certificate.
     * 
     */
    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * User-defined labels (key-value pairs) the
     * certificate should be created with.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,Object>> labels;

    /**
     * @return User-defined labels (key-value pairs) the
     * certificate should be created with.
     * 
     */
    public Optional<Output<Map<String,Object>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Name of the Certificate.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Certificate.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * PEM encoded private key belonging to the certificate.
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    /**
     * @return PEM encoded private key belonging to the certificate.
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }

    private UploadedCertificateArgs() {}

    private UploadedCertificateArgs(UploadedCertificateArgs $) {
        this.certificate = $.certificate;
        this.labels = $.labels;
        this.name = $.name;
        this.privateKey = $.privateKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UploadedCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UploadedCertificateArgs $;

        public Builder() {
            $ = new UploadedCertificateArgs();
        }

        public Builder(UploadedCertificateArgs defaults) {
            $ = new UploadedCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate PEM encoded TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate PEM encoded TLS certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param labels User-defined labels (key-value pairs) the
         * certificate should be created with.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,Object>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels User-defined labels (key-value pairs) the
         * certificate should be created with.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,Object> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name Name of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Certificate.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateKey PEM encoded private key belonging to the certificate.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey PEM encoded private key belonging to the certificate.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public UploadedCertificateArgs build() {
            $.certificate = Objects.requireNonNull($.certificate, "expected parameter 'certificate' to be non-null");
            $.privateKey = Objects.requireNonNull($.privateKey, "expected parameter 'privateKey' to be non-null");
            return $;
        }
    }

}
