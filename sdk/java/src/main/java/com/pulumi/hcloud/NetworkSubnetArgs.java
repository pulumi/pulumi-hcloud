// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkSubnetArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkSubnetArgs Empty = new NetworkSubnetArgs();

    /**
     * Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.
     * 
     */
    @Import(name="ipRange", required=true)
    private Output<String> ipRange;

    /**
     * @return Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.
     * 
     */
    public Output<String> ipRange() {
        return this.ipRange;
    }

    /**
     * ID of the Network the subnet should be added to.
     * 
     */
    @Import(name="networkId", required=true)
    private Output<Integer> networkId;

    /**
     * @return ID of the Network the subnet should be added to.
     * 
     */
    public Output<Integer> networkId() {
        return this.networkId;
    }

    /**
     * Name of network zone.
     * 
     */
    @Import(name="networkZone", required=true)
    private Output<String> networkZone;

    /**
     * @return Name of network zone.
     * 
     */
    public Output<String> networkZone() {
        return this.networkZone;
    }

    /**
     * Type of subnet. `server`, `cloud` or `vswitch`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of subnet. `server`, `cloud` or `vswitch`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * ID of the vswitch, Required if type is `vswitch`
     * 
     */
    @Import(name="vswitchId")
    private @Nullable Output<Integer> vswitchId;

    /**
     * @return ID of the vswitch, Required if type is `vswitch`
     * 
     */
    public Optional<Output<Integer>> vswitchId() {
        return Optional.ofNullable(this.vswitchId);
    }

    private NetworkSubnetArgs() {}

    private NetworkSubnetArgs(NetworkSubnetArgs $) {
        this.ipRange = $.ipRange;
        this.networkId = $.networkId;
        this.networkZone = $.networkZone;
        this.type = $.type;
        this.vswitchId = $.vswitchId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkSubnetArgs $;

        public Builder() {
            $ = new NetworkSubnetArgs();
        }

        public Builder(NetworkSubnetArgs defaults) {
            $ = new NetworkSubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipRange Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(Output<String> ipRange) {
            $.ipRange = ipRange;
            return this;
        }

        /**
         * @param ipRange Range to allocate IPs from. Must be a subnet of the ip_range of the Network and must not overlap with any other subnets or with any destinations in routes.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(String ipRange) {
            return ipRange(Output.of(ipRange));
        }

        /**
         * @param networkId ID of the Network the subnet should be added to.
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<Integer> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId ID of the Network the subnet should be added to.
         * 
         * @return builder
         * 
         */
        public Builder networkId(Integer networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param networkZone Name of network zone.
         * 
         * @return builder
         * 
         */
        public Builder networkZone(Output<String> networkZone) {
            $.networkZone = networkZone;
            return this;
        }

        /**
         * @param networkZone Name of network zone.
         * 
         * @return builder
         * 
         */
        public Builder networkZone(String networkZone) {
            return networkZone(Output.of(networkZone));
        }

        /**
         * @param type Type of subnet. `server`, `cloud` or `vswitch`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of subnet. `server`, `cloud` or `vswitch`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vswitchId ID of the vswitch, Required if type is `vswitch`
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(@Nullable Output<Integer> vswitchId) {
            $.vswitchId = vswitchId;
            return this;
        }

        /**
         * @param vswitchId ID of the vswitch, Required if type is `vswitch`
         * 
         * @return builder
         * 
         */
        public Builder vswitchId(Integer vswitchId) {
            return vswitchId(Output.of(vswitchId));
        }

        public NetworkSubnetArgs build() {
            if ($.ipRange == null) {
                throw new MissingRequiredPropertyException("NetworkSubnetArgs", "ipRange");
            }
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("NetworkSubnetArgs", "networkId");
            }
            if ($.networkZone == null) {
                throw new MissingRequiredPropertyException("NetworkSubnetArgs", "networkZone");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NetworkSubnetArgs", "type");
            }
            return $;
        }
    }

}
