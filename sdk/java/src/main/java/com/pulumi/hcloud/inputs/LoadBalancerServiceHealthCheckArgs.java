// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.hcloud.inputs.LoadBalancerServiceHealthCheckHttpArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerServiceHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerServiceHealthCheckArgs Empty = new LoadBalancerServiceHealthCheckArgs();

    /**
     * HTTP configuration. Required if `protocol` is `http`.
     * 
     */
    @Import(name="http")
    private @Nullable Output<LoadBalancerServiceHealthCheckHttpArgs> http;

    /**
     * @return HTTP configuration. Required if `protocol` is `http`.
     * 
     */
    public Optional<Output<LoadBalancerServiceHealthCheckHttpArgs>> http() {
        return Optional.ofNullable(this.http);
    }

    /**
     * Interval how often the health check will be performed, in seconds.
     * 
     */
    @Import(name="interval", required=true)
    private Output<Integer> interval;

    /**
     * @return Interval how often the health check will be performed, in seconds.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }

    /**
     * Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * Protocol the health check uses. `http` or `tcp`
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return Protocol the health check uses. `http` or `tcp`
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Number of tries a health check will be performed until a target will be listed as `unhealthy`.
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return Number of tries a health check will be performed until a target will be listed as `unhealthy`.
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * Timeout when a health check try will be canceled if there is no response, in seconds.
     * 
     */
    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    /**
     * @return Timeout when a health check try will be canceled if there is no response, in seconds.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    private LoadBalancerServiceHealthCheckArgs() {}

    private LoadBalancerServiceHealthCheckArgs(LoadBalancerServiceHealthCheckArgs $) {
        this.http = $.http;
        this.interval = $.interval;
        this.port = $.port;
        this.protocol = $.protocol;
        this.retries = $.retries;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerServiceHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerServiceHealthCheckArgs $;

        public Builder() {
            $ = new LoadBalancerServiceHealthCheckArgs();
        }

        public Builder(LoadBalancerServiceHealthCheckArgs defaults) {
            $ = new LoadBalancerServiceHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param http HTTP configuration. Required if `protocol` is `http`.
         * 
         * @return builder
         * 
         */
        public Builder http(@Nullable Output<LoadBalancerServiceHealthCheckHttpArgs> http) {
            $.http = http;
            return this;
        }

        /**
         * @param http HTTP configuration. Required if `protocol` is `http`.
         * 
         * @return builder
         * 
         */
        public Builder http(LoadBalancerServiceHealthCheckHttpArgs http) {
            return http(Output.of(http));
        }

        /**
         * @param interval Interval how often the health check will be performed, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Interval how often the health check will be performed, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param port Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port the health check tries to connect to, required if protocol is `tcp`. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol Protocol the health check uses. `http` or `tcp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol the health check uses. `http` or `tcp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param retries Number of tries a health check will be performed until a target will be listed as `unhealthy`.
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries Number of tries a health check will be performed until a target will be listed as `unhealthy`.
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param timeout Timeout when a health check try will be canceled if there is no response, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Timeout when a health check try will be canceled if there is no response, in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public LoadBalancerServiceHealthCheckArgs build() {
            if ($.interval == null) {
                throw new MissingRequiredPropertyException("LoadBalancerServiceHealthCheckArgs", "interval");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("LoadBalancerServiceHealthCheckArgs", "port");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("LoadBalancerServiceHealthCheckArgs", "protocol");
            }
            if ($.timeout == null) {
                throw new MissingRequiredPropertyException("LoadBalancerServiceHealthCheckArgs", "timeout");
            }
            return $;
        }
    }

}
