// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerServiceHttpArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerServiceHttpArgs Empty = new LoadBalancerServiceHttpArgs();

    /**
     * List of IDs from certificates which the Load Balancer has.
     * 
     */
    @Import(name="certificates")
    private @Nullable Output<List<Integer>> certificates;

    /**
     * @return List of IDs from certificates which the Load Balancer has.
     * 
     */
    public Optional<Output<List<Integer>>> certificates() {
        return Optional.ofNullable(this.certificates);
    }

    /**
     * Lifetime of the cookie for sticky session (in seconds). Default: `300`
     * 
     */
    @Import(name="cookieLifetime")
    private @Nullable Output<Integer> cookieLifetime;

    /**
     * @return Lifetime of the cookie for sticky session (in seconds). Default: `300`
     * 
     */
    public Optional<Output<Integer>> cookieLifetime() {
        return Optional.ofNullable(this.cookieLifetime);
    }

    /**
     * Name of the cookie for sticky session. Default: `HCLBSTICKY`
     * 
     */
    @Import(name="cookieName")
    private @Nullable Output<String> cookieName;

    /**
     * @return Name of the cookie for sticky session. Default: `HCLBSTICKY`
     * 
     */
    public Optional<Output<String>> cookieName() {
        return Optional.ofNullable(this.cookieName);
    }

    /**
     * Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.
     * 
     */
    @Import(name="redirectHttp")
    private @Nullable Output<Boolean> redirectHttp;

    /**
     * @return Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.
     * 
     */
    public Optional<Output<Boolean>> redirectHttp() {
        return Optional.ofNullable(this.redirectHttp);
    }

    /**
     * Enable sticky sessions
     * 
     */
    @Import(name="stickySessions")
    private @Nullable Output<Boolean> stickySessions;

    /**
     * @return Enable sticky sessions
     * 
     */
    public Optional<Output<Boolean>> stickySessions() {
        return Optional.ofNullable(this.stickySessions);
    }

    private LoadBalancerServiceHttpArgs() {}

    private LoadBalancerServiceHttpArgs(LoadBalancerServiceHttpArgs $) {
        this.certificates = $.certificates;
        this.cookieLifetime = $.cookieLifetime;
        this.cookieName = $.cookieName;
        this.redirectHttp = $.redirectHttp;
        this.stickySessions = $.stickySessions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerServiceHttpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerServiceHttpArgs $;

        public Builder() {
            $ = new LoadBalancerServiceHttpArgs();
        }

        public Builder(LoadBalancerServiceHttpArgs defaults) {
            $ = new LoadBalancerServiceHttpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificates List of IDs from certificates which the Load Balancer has.
         * 
         * @return builder
         * 
         */
        public Builder certificates(@Nullable Output<List<Integer>> certificates) {
            $.certificates = certificates;
            return this;
        }

        /**
         * @param certificates List of IDs from certificates which the Load Balancer has.
         * 
         * @return builder
         * 
         */
        public Builder certificates(List<Integer> certificates) {
            return certificates(Output.of(certificates));
        }

        /**
         * @param certificates List of IDs from certificates which the Load Balancer has.
         * 
         * @return builder
         * 
         */
        public Builder certificates(Integer... certificates) {
            return certificates(List.of(certificates));
        }

        /**
         * @param cookieLifetime Lifetime of the cookie for sticky session (in seconds). Default: `300`
         * 
         * @return builder
         * 
         */
        public Builder cookieLifetime(@Nullable Output<Integer> cookieLifetime) {
            $.cookieLifetime = cookieLifetime;
            return this;
        }

        /**
         * @param cookieLifetime Lifetime of the cookie for sticky session (in seconds). Default: `300`
         * 
         * @return builder
         * 
         */
        public Builder cookieLifetime(Integer cookieLifetime) {
            return cookieLifetime(Output.of(cookieLifetime));
        }

        /**
         * @param cookieName Name of the cookie for sticky session. Default: `HCLBSTICKY`
         * 
         * @return builder
         * 
         */
        public Builder cookieName(@Nullable Output<String> cookieName) {
            $.cookieName = cookieName;
            return this;
        }

        /**
         * @param cookieName Name of the cookie for sticky session. Default: `HCLBSTICKY`
         * 
         * @return builder
         * 
         */
        public Builder cookieName(String cookieName) {
            return cookieName(Output.of(cookieName));
        }

        /**
         * @param redirectHttp Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.
         * 
         * @return builder
         * 
         */
        public Builder redirectHttp(@Nullable Output<Boolean> redirectHttp) {
            $.redirectHttp = redirectHttp;
            return this;
        }

        /**
         * @param redirectHttp Redirect HTTP to HTTPS traffic. Only supported for services with `protocol` `https` using the default HTTP port `80`.
         * 
         * @return builder
         * 
         */
        public Builder redirectHttp(Boolean redirectHttp) {
            return redirectHttp(Output.of(redirectHttp));
        }

        /**
         * @param stickySessions Enable sticky sessions
         * 
         * @return builder
         * 
         */
        public Builder stickySessions(@Nullable Output<Boolean> stickySessions) {
            $.stickySessions = stickySessions;
            return this;
        }

        /**
         * @param stickySessions Enable sticky sessions
         * 
         * @return builder
         * 
         */
        public Builder stickySessions(Boolean stickySessions) {
            return stickySessions(Output.of(stickySessions));
        }

        public LoadBalancerServiceHttpArgs build() {
            return $;
        }
    }

}
