// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.hcloud.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServerTypeResult {
    /**
     * @return (string) Architecture of the server_type.
     * 
     */
    private String architecture;
    /**
     * @return (int) Number of cpu cores a Server of this type will have.
     * 
     */
    private Integer cores;
    private String cpuType;
    /**
     * @return (Optional, string) Date when the deprecation of the server type was announced. Only set when the server type is deprecated.
     * 
     */
    private String deprecationAnnounced;
    /**
     * @return (string) Description of the server_type.
     * 
     */
    private String description;
    /**
     * @return (int) Disk size a Server of this type will have in GB.
     * 
     */
    private Integer disk;
    /**
     * @return (int) Unique ID of the server_type.
     * 
     */
    private Integer id;
    /**
     * @return (int) Free traffic per month in bytes. **Warning**: This field is deprecated and will report `0` after 2024-08-05.
     * 
     * @deprecated
     * The field is deprecated and will always report 0 after 2024-08-05.
     * 
     */
    @Deprecated /* The field is deprecated and will always report 0 after 2024-08-05. */
    private Integer includedTraffic;
    /**
     * @return (bool) Deprecation status of server type.
     * 
     */
    private Boolean isDeprecated;
    /**
     * @return (int) Memory a Server of this type will have in GB.
     * 
     */
    private Integer memory;
    /**
     * @return (string) Name of the server_type.
     * 
     */
    private String name;
    private String storageType;
    /**
     * @return (Optional, string) Date when the server type will not be available for new servers. Only set when the server type is deprecated.
     * 
     */
    private String unavailableAfter;

    private GetServerTypeResult() {}
    /**
     * @return (string) Architecture of the server_type.
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return (int) Number of cpu cores a Server of this type will have.
     * 
     */
    public Integer cores() {
        return this.cores;
    }
    public String cpuType() {
        return this.cpuType;
    }
    /**
     * @return (Optional, string) Date when the deprecation of the server type was announced. Only set when the server type is deprecated.
     * 
     */
    public String deprecationAnnounced() {
        return this.deprecationAnnounced;
    }
    /**
     * @return (string) Description of the server_type.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return (int) Disk size a Server of this type will have in GB.
     * 
     */
    public Integer disk() {
        return this.disk;
    }
    /**
     * @return (int) Unique ID of the server_type.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return (int) Free traffic per month in bytes. **Warning**: This field is deprecated and will report `0` after 2024-08-05.
     * 
     * @deprecated
     * The field is deprecated and will always report 0 after 2024-08-05.
     * 
     */
    @Deprecated /* The field is deprecated and will always report 0 after 2024-08-05. */
    public Integer includedTraffic() {
        return this.includedTraffic;
    }
    /**
     * @return (bool) Deprecation status of server type.
     * 
     */
    public Boolean isDeprecated() {
        return this.isDeprecated;
    }
    /**
     * @return (int) Memory a Server of this type will have in GB.
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return (string) Name of the server_type.
     * 
     */
    public String name() {
        return this.name;
    }
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return (Optional, string) Date when the server type will not be available for new servers. Only set when the server type is deprecated.
     * 
     */
    public String unavailableAfter() {
        return this.unavailableAfter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerTypeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private Integer cores;
        private String cpuType;
        private String deprecationAnnounced;
        private String description;
        private Integer disk;
        private Integer id;
        private Integer includedTraffic;
        private Boolean isDeprecated;
        private Integer memory;
        private String name;
        private String storageType;
        private String unavailableAfter;
        public Builder() {}
        public Builder(GetServerTypeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.cores = defaults.cores;
    	      this.cpuType = defaults.cpuType;
    	      this.deprecationAnnounced = defaults.deprecationAnnounced;
    	      this.description = defaults.description;
    	      this.disk = defaults.disk;
    	      this.id = defaults.id;
    	      this.includedTraffic = defaults.includedTraffic;
    	      this.isDeprecated = defaults.isDeprecated;
    	      this.memory = defaults.memory;
    	      this.name = defaults.name;
    	      this.storageType = defaults.storageType;
    	      this.unavailableAfter = defaults.unavailableAfter;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder cores(Integer cores) {
            if (cores == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "cores");
            }
            this.cores = cores;
            return this;
        }
        @CustomType.Setter
        public Builder cpuType(String cpuType) {
            if (cpuType == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "cpuType");
            }
            this.cpuType = cpuType;
            return this;
        }
        @CustomType.Setter
        public Builder deprecationAnnounced(String deprecationAnnounced) {
            if (deprecationAnnounced == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "deprecationAnnounced");
            }
            this.deprecationAnnounced = deprecationAnnounced;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disk(Integer disk) {
            if (disk == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "disk");
            }
            this.disk = disk;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includedTraffic(Integer includedTraffic) {
            if (includedTraffic == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "includedTraffic");
            }
            this.includedTraffic = includedTraffic;
            return this;
        }
        @CustomType.Setter
        public Builder isDeprecated(Boolean isDeprecated) {
            if (isDeprecated == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "isDeprecated");
            }
            this.isDeprecated = isDeprecated;
            return this;
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "memory");
            }
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder unavailableAfter(String unavailableAfter) {
            if (unavailableAfter == null) {
              throw new MissingRequiredPropertyException("GetServerTypeResult", "unavailableAfter");
            }
            this.unavailableAfter = unavailableAfter;
            return this;
        }
        public GetServerTypeResult build() {
            final var _resultValue = new GetServerTypeResult();
            _resultValue.architecture = architecture;
            _resultValue.cores = cores;
            _resultValue.cpuType = cpuType;
            _resultValue.deprecationAnnounced = deprecationAnnounced;
            _resultValue.description = description;
            _resultValue.disk = disk;
            _resultValue.id = id;
            _resultValue.includedTraffic = includedTraffic;
            _resultValue.isDeprecated = isDeprecated;
            _resultValue.memory = memory;
            _resultValue.name = name;
            _resultValue.storageType = storageType;
            _resultValue.unavailableAfter = unavailableAfter;
            return _resultValue;
        }
    }
}
