// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud.Outputs
{

    [OutputType]
    public sealed class GetLoadBalancerServiceResult
    {
        /// <summary>
        /// (int) Port the service connects to the targets on. Can be everything between `1` and `65535`.
        /// </summary>
        public readonly int DestinationPort;
        /// <summary>
        /// (list) List of http configurations when `Protocol` is `Http` or `Https`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerServiceHealthCheckResult> HealthChecks;
        /// <summary>
        /// (list) List of http configurations when `Protocol` is `Http` or `Https`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerServiceHttpResult> Https;
        /// <summary>
        /// (int) Port the service listen on. Can be everything between `1` and `65535`. Must be unique per Load Balancer.
        /// </summary>
        public readonly int ListenPort;
        /// <summary>
        /// (string) Protocol the health check uses. `Http`, `Https` or `Tcp`
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// (bool) Enable proxyprotocol.
        /// </summary>
        public readonly bool Proxyprotocol;

        [OutputConstructor]
        private GetLoadBalancerServiceResult(
            int destinationPort,

            ImmutableArray<Outputs.GetLoadBalancerServiceHealthCheckResult> healthChecks,

            ImmutableArray<Outputs.GetLoadBalancerServiceHttpResult> https,

            int listenPort,

            string protocol,

            bool proxyprotocol)
        {
            DestinationPort = destinationPort;
            HealthChecks = healthChecks;
            Https = https;
            ListenPort = listenPort;
            Protocol = protocol;
            Proxyprotocol = proxyprotocol;
        }
    }
}
