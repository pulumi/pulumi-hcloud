// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetLocation
    {
        /// <summary>
        /// Provides details about a specific Hetzner Cloud Location.
        /// 
        /// Use this resource to get detailed information about a specific Location.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byId = HCloud.GetLocation.Invoke(new()
        ///     {
        ///         Id = 1,
        ///     });
        /// 
        ///     var byName = HCloud.GetLocation.Invoke(new()
        ///     {
        ///         Name = "fsn1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLocationResult> InvokeAsync(GetLocationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocationResult>("hcloud:index/getLocation:getLocation", args ?? new GetLocationArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Hetzner Cloud Location.
        /// 
        /// Use this resource to get detailed information about a specific Location.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byId = HCloud.GetLocation.Invoke(new()
        ///     {
        ///         Id = 1,
        ///     });
        /// 
        ///     var byName = HCloud.GetLocation.Invoke(new()
        ///     {
        ///         Name = "fsn1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLocationResult> Invoke(GetLocationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationResult>("hcloud:index/getLocation:getLocation", args ?? new GetLocationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Hetzner Cloud Location.
        /// 
        /// Use this resource to get detailed information about a specific Location.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byId = HCloud.GetLocation.Invoke(new()
        ///     {
        ///         Id = 1,
        ///     });
        /// 
        ///     var byName = HCloud.GetLocation.Invoke(new()
        ///     {
        ///         Name = "fsn1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLocationResult> Invoke(GetLocationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationResult>("hcloud:index/getLocation:getLocation", args ?? new GetLocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Location.
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the Location.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetLocationArgs()
        {
        }
        public static new GetLocationArgs Empty => new GetLocationArgs();
    }

    public sealed class GetLocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Location.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Name of the Location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetLocationInvokeArgs()
        {
        }
        public static new GetLocationInvokeArgs Empty => new GetLocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocationResult
    {
        /// <summary>
        /// Name of the closest city to the Location. City name and optionally state in short form.
        /// </summary>
        public readonly string City;
        /// <summary>
        /// Country the Location resides in. ISO 3166-1 alpha-2 code of the country.
        /// </summary>
        public readonly string Country;
        /// <summary>
        /// Description of the Location.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ID of the Location.
        /// </summary>
        public readonly int? Id;
        /// <summary>
        /// Latitude of the city closest to the Location.
        /// </summary>
        public readonly double Latitude;
        /// <summary>
        /// Longitude of the city closest to the Location.
        /// </summary>
        public readonly double Longitude;
        /// <summary>
        /// Name of the Location.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Name of the Network Zone this Location resides in.
        /// </summary>
        public readonly string NetworkZone;

        [OutputConstructor]
        private GetLocationResult(
            string city,

            string country,

            string description,

            int? id,

            double latitude,

            double longitude,

            string? name,

            string networkZone)
        {
            City = city;
            Country = country;
            Description = description;
            Id = id;
            Latitude = latitude;
            Longitude = longitude;
            Name = name;
            NetworkZone = networkZone;
        }
    }
}
