// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    /// <summary>
    /// ## Import
    /// 
    /// Servers can be imported using the server `id`
    /// 
    /// ```sh
    ///  $ pulumi import hcloud:index/server:Server myserver &lt;id&gt;
    /// ```
    /// </summary>
    [HCloudResourceType("hcloud:index/server:Server")]
    public partial class Server : Pulumi.CustomResource
    {
        /// <summary>
        /// (string) The backup window of the server, if enabled.
        /// </summary>
        [Output("backupWindow")]
        public Output<string> BackupWindow { get; private set; } = null!;

        /// <summary>
        /// Enable or disable backups.
        /// </summary>
        [Output("backups")]
        public Output<bool?> Backups { get; private set; } = null!;

        /// <summary>
        /// The datacenter name to create the server in.
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        /// <summary>
        /// Enable or disable delete protection (Needs to be the same as `rebuild_protection`).
        /// </summary>
        [Output("deleteProtection")]
        public Output<bool?> DeleteProtection { get; private set; } = null!;

        /// <summary>
        /// Firewall IDs the server should be attached to on creation.
        /// </summary>
        [Output("firewallIds")]
        public Output<ImmutableArray<int>> FirewallIds { get; private set; } = null!;

        /// <summary>
        /// Ingores any updates
        /// to the `firewall_ids` argument which were received from the server.
        /// This should not be used in normal cases. See the documentation of the
        /// `hcloud.FirewallAttachment` resouce for a reason to use this
        /// argument.
        /// </summary>
        [Output("ignoreRemoteFirewallIds")]
        public Output<bool?> IgnoreRemoteFirewallIds { get; private set; } = null!;

        /// <summary>
        /// (string) Name or ID of the image the server was created from.
        /// </summary>
        [Output("image")]
        public Output<string?> Image { get; private set; } = null!;

        /// <summary>
        /// (string) The IPv4 address.
        /// </summary>
        [Output("ipv4Address")]
        public Output<string> Ipv4Address { get; private set; } = null!;

        /// <summary>
        /// (string) The first IPv6 address of the assigned network.
        /// </summary>
        [Output("ipv6Address")]
        public Output<string> Ipv6Address { get; private set; } = null!;

        /// <summary>
        /// (string) The IPv6 network.
        /// </summary>
        [Output("ipv6Network")]
        public Output<string> Ipv6Network { get; private set; } = null!;

        /// <summary>
        /// ID or Name of an ISO image to mount.
        /// </summary>
        [Output("iso")]
        public Output<string?> Iso { get; private set; } = null!;

        /// <summary>
        /// If true, do not upgrade the disk. This allows downgrading the server type later.
        /// </summary>
        [Output("keepDisk")]
        public Output<bool?> KeepDisk { get; private set; } = null!;

        /// <summary>
        /// User-defined labels (key-value pairs) should be created with.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, object>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The location name to create the server in. `nbg1`, `fsn1`, `hel1` or `ash`
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network the server should be attached to on creation. (Can be specified multiple times)
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.ServerNetwork>> Networks { get; private set; } = null!;

        /// <summary>
        /// Placement Group ID the server added to on creation.
        /// </summary>
        [Output("placementGroupId")]
        public Output<int?> PlacementGroupId { get; private set; } = null!;

        /// <summary>
        /// Enable or disable rebuild protection (Needs to be the same as `delete_protection`).
        /// </summary>
        [Output("rebuildProtection")]
        public Output<bool?> RebuildProtection { get; private set; } = null!;

        /// <summary>
        /// Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`
        /// </summary>
        [Output("rescue")]
        public Output<string?> Rescue { get; private set; } = null!;

        /// <summary>
        /// Name of the server type this server should be created with.
        /// </summary>
        [Output("serverType")]
        public Output<string> ServerType { get; private set; } = null!;

        /// <summary>
        /// SSH key IDs or names which should be injected into the server at creation time
        /// </summary>
        [Output("sshKeys")]
        public Output<ImmutableArray<string>> SshKeys { get; private set; } = null!;

        /// <summary>
        /// (string) The status of the server.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Cloud-Init user data to use during server creation
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs args, CustomResourceOptions? options = null)
            : base("hcloud:index/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("hcloud:index/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable or disable backups.
        /// </summary>
        [Input("backups")]
        public Input<bool>? Backups { get; set; }

        /// <summary>
        /// The datacenter name to create the server in.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Enable or disable delete protection (Needs to be the same as `rebuild_protection`).
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        [Input("firewallIds")]
        private InputList<int>? _firewallIds;

        /// <summary>
        /// Firewall IDs the server should be attached to on creation.
        /// </summary>
        public InputList<int> FirewallIds
        {
            get => _firewallIds ?? (_firewallIds = new InputList<int>());
            set => _firewallIds = value;
        }

        /// <summary>
        /// Ingores any updates
        /// to the `firewall_ids` argument which were received from the server.
        /// This should not be used in normal cases. See the documentation of the
        /// `hcloud.FirewallAttachment` resouce for a reason to use this
        /// argument.
        /// </summary>
        [Input("ignoreRemoteFirewallIds")]
        public Input<bool>? IgnoreRemoteFirewallIds { get; set; }

        /// <summary>
        /// (string) Name or ID of the image the server was created from.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// ID or Name of an ISO image to mount.
        /// </summary>
        [Input("iso")]
        public Input<string>? Iso { get; set; }

        /// <summary>
        /// If true, do not upgrade the disk. This allows downgrading the server type later.
        /// </summary>
        [Input("keepDisk")]
        public Input<bool>? KeepDisk { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// User-defined labels (key-value pairs) should be created with.
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The location name to create the server in. `nbg1`, `fsn1`, `hel1` or `ash`
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.ServerNetworkArgs>? _networks;

        /// <summary>
        /// Network the server should be attached to on creation. (Can be specified multiple times)
        /// </summary>
        public InputList<Inputs.ServerNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ServerNetworkArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Placement Group ID the server added to on creation.
        /// </summary>
        [Input("placementGroupId")]
        public Input<int>? PlacementGroupId { get; set; }

        /// <summary>
        /// Enable or disable rebuild protection (Needs to be the same as `delete_protection`).
        /// </summary>
        [Input("rebuildProtection")]
        public Input<bool>? RebuildProtection { get; set; }

        /// <summary>
        /// Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`
        /// </summary>
        [Input("rescue")]
        public Input<string>? Rescue { get; set; }

        /// <summary>
        /// Name of the server type this server should be created with.
        /// </summary>
        [Input("serverType", required: true)]
        public Input<string> ServerType { get; set; } = null!;

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// SSH key IDs or names which should be injected into the server at creation time
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// Cloud-Init user data to use during server creation
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public ServerArgs()
        {
        }
    }

    public sealed class ServerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (string) The backup window of the server, if enabled.
        /// </summary>
        [Input("backupWindow")]
        public Input<string>? BackupWindow { get; set; }

        /// <summary>
        /// Enable or disable backups.
        /// </summary>
        [Input("backups")]
        public Input<bool>? Backups { get; set; }

        /// <summary>
        /// The datacenter name to create the server in.
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Enable or disable delete protection (Needs to be the same as `rebuild_protection`).
        /// </summary>
        [Input("deleteProtection")]
        public Input<bool>? DeleteProtection { get; set; }

        [Input("firewallIds")]
        private InputList<int>? _firewallIds;

        /// <summary>
        /// Firewall IDs the server should be attached to on creation.
        /// </summary>
        public InputList<int> FirewallIds
        {
            get => _firewallIds ?? (_firewallIds = new InputList<int>());
            set => _firewallIds = value;
        }

        /// <summary>
        /// Ingores any updates
        /// to the `firewall_ids` argument which were received from the server.
        /// This should not be used in normal cases. See the documentation of the
        /// `hcloud.FirewallAttachment` resouce for a reason to use this
        /// argument.
        /// </summary>
        [Input("ignoreRemoteFirewallIds")]
        public Input<bool>? IgnoreRemoteFirewallIds { get; set; }

        /// <summary>
        /// (string) Name or ID of the image the server was created from.
        /// </summary>
        [Input("image")]
        public Input<string>? Image { get; set; }

        /// <summary>
        /// (string) The IPv4 address.
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// (string) The first IPv6 address of the assigned network.
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// (string) The IPv6 network.
        /// </summary>
        [Input("ipv6Network")]
        public Input<string>? Ipv6Network { get; set; }

        /// <summary>
        /// ID or Name of an ISO image to mount.
        /// </summary>
        [Input("iso")]
        public Input<string>? Iso { get; set; }

        /// <summary>
        /// If true, do not upgrade the disk. This allows downgrading the server type later.
        /// </summary>
        [Input("keepDisk")]
        public Input<bool>? KeepDisk { get; set; }

        [Input("labels")]
        private InputMap<object>? _labels;

        /// <summary>
        /// User-defined labels (key-value pairs) should be created with.
        /// </summary>
        public InputMap<object> Labels
        {
            get => _labels ?? (_labels = new InputMap<object>());
            set => _labels = value;
        }

        /// <summary>
        /// The location name to create the server in. `nbg1`, `fsn1`, `hel1` or `ash`
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Name of the server to create (must be unique per project and a valid hostname as per RFC 1123).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.ServerNetworkGetArgs>? _networks;

        /// <summary>
        /// Network the server should be attached to on creation. (Can be specified multiple times)
        /// </summary>
        public InputList<Inputs.ServerNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.ServerNetworkGetArgs>());
            set => _networks = value;
        }

        /// <summary>
        /// Placement Group ID the server added to on creation.
        /// </summary>
        [Input("placementGroupId")]
        public Input<int>? PlacementGroupId { get; set; }

        /// <summary>
        /// Enable or disable rebuild protection (Needs to be the same as `delete_protection`).
        /// </summary>
        [Input("rebuildProtection")]
        public Input<bool>? RebuildProtection { get; set; }

        /// <summary>
        /// Enable and boot in to the specified rescue system. This enables simple installation of custom operating systems. `linux64` `linux32` or `freebsd64`
        /// </summary>
        [Input("rescue")]
        public Input<string>? Rescue { get; set; }

        /// <summary>
        /// Name of the server type this server should be created with.
        /// </summary>
        [Input("serverType")]
        public Input<string>? ServerType { get; set; }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;

        /// <summary>
        /// SSH key IDs or names which should be injected into the server at creation time
        /// </summary>
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        /// <summary>
        /// (string) The status of the server.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Cloud-Init user data to use during server creation
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public ServerState()
        {
        }
    }
}
