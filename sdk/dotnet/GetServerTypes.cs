// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetServerTypes
    {
        /// <summary>
        /// Provides a list of available Hetzner Cloud Server Types.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = HCloud.GetServerTypes.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerTypesResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerTypesResult>("hcloud:index/getServerTypes:getServerTypes", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Provides a list of available Hetzner Cloud Server Types.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = HCloud.GetServerTypes.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerTypesResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerTypesResult>("hcloud:index/getServerTypes:getServerTypes", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetServerTypesResult
    {
        public readonly ImmutableArray<string> Descriptions;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Names;
        public readonly ImmutableArray<string> ServerTypeIds;
        public readonly ImmutableArray<Outputs.GetServerTypesServerTypeResult> ServerTypes;

        [OutputConstructor]
        private GetServerTypesResult(
            ImmutableArray<string> descriptions,

            string id,

            ImmutableArray<string> names,

            ImmutableArray<string> serverTypeIds,

            ImmutableArray<Outputs.GetServerTypesServerTypeResult> serverTypes)
        {
            Descriptions = descriptions;
            Id = id;
            Names = names;
            ServerTypeIds = serverTypeIds;
            ServerTypes = serverTypes;
        }
    }
}
