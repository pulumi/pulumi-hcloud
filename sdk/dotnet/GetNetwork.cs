// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetNetwork
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var network1 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         Id = 1234,
        ///     });
        /// 
        ///     var network2 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         Name = "my-network",
        ///     });
        /// 
        ///     var network3 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         WithSelector = "key=value",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNetworkResult> InvokeAsync(GetNetworkArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkResult>("hcloud:index/getNetwork:getNetwork", args ?? new GetNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var network1 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         Id = 1234,
        ///     });
        /// 
        ///     var network2 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         Name = "my-network",
        ///     });
        /// 
        ///     var network3 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         WithSelector = "key=value",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("hcloud:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var network1 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         Id = 1234,
        ///     });
        /// 
        ///     var network2 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         Name = "my-network",
        ///     });
        /// 
        ///     var network3 = HCloud.GetNetwork.Invoke(new()
        ///     {
        ///         WithSelector = "key=value",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNetworkResult> Invoke(GetNetworkInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkResult>("hcloud:index/getNetwork:getNetwork", args ?? new GetNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Network.
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// IPv4 prefix of the Network.
        /// </summary>
        [Input("ipRange")]
        public string? IpRange { get; set; }

        [Input("labels")]
        private Dictionary<string, string>? _labels;
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        /// <summary>
        /// Name of the Network.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/reference/cloud#label-selector).
        /// </summary>
        [Input("withSelector")]
        public string? WithSelector { get; set; }

        public GetNetworkArgs()
        {
        }
        public static new GetNetworkArgs Empty => new GetNetworkArgs();
    }

    public sealed class GetNetworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Network.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// IPv4 prefix of the Network.
        /// </summary>
        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        /// <summary>
        /// Name of the Network.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Label Selector. For more information about possible values, visit the [Hetzner Cloud Documentation](https://docs.hetzner.cloud/reference/cloud#label-selector).
        /// </summary>
        [Input("withSelector")]
        public Input<string>? WithSelector { get; set; }

        public GetNetworkInvokeArgs()
        {
        }
        public static new GetNetworkInvokeArgs Empty => new GetNetworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkResult
    {
        /// <summary>
        /// (bool) Whether delete protection is enabled.
        /// </summary>
        public readonly bool DeleteProtection;
        /// <summary>
        /// (bool) Indicates if the routes from this network should be exposed to the vSwitch connection. The exposing only takes effect if a vSwitch connection is active.
        /// </summary>
        public readonly bool ExposeRoutesToVswitch;
        /// <summary>
        /// Unique ID of the Network.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// IPv4 prefix of the Network.
        /// </summary>
        public readonly string IpRange;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly bool? MostRecent;
        /// <summary>
        /// Name of the Network.
        /// </summary>
        public readonly string Name;
        public readonly string? WithSelector;

        [OutputConstructor]
        private GetNetworkResult(
            bool deleteProtection,

            bool exposeRoutesToVswitch,

            int id,

            string ipRange,

            ImmutableDictionary<string, string> labels,

            bool? mostRecent,

            string name,

            string? withSelector)
        {
            DeleteProtection = deleteProtection;
            ExposeRoutesToVswitch = exposeRoutesToVswitch;
            Id = id;
            IpRange = ipRange;
            Labels = labels;
            MostRecent = mostRecent;
            Name = name;
            WithSelector = withSelector;
        }
    }
}
