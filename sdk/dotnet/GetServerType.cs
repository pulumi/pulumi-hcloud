// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.HCloud
{
    public static class GetServerType
    {
        /// <summary>
        /// Provides details about a specific Hetzner Cloud Server Type.
        /// 
        /// Use this resource to get detailed information about specific Server Type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byId = HCloud.GetServerType.Invoke(new()
        ///     {
        ///         Id = 22,
        ///     });
        /// 
        ///     var byName = HCloud.GetServerType.Invoke(new()
        ///     {
        ///         Name = "cx22",
        ///     });
        /// 
        ///     var main = new HCloud.Server("main", new()
        ///     {
        ///         Name = "my-server",
        ///         Location = "fsn1",
        ///         Image = "debian-12",
        ///         ServerType = byName.Apply(getServerTypeResult =&gt; getServerTypeResult.Name),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerTypeResult> InvokeAsync(GetServerTypeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerTypeResult>("hcloud:index/getServerType:getServerType", args ?? new GetServerTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Hetzner Cloud Server Type.
        /// 
        /// Use this resource to get detailed information about specific Server Type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byId = HCloud.GetServerType.Invoke(new()
        ///     {
        ///         Id = 22,
        ///     });
        /// 
        ///     var byName = HCloud.GetServerType.Invoke(new()
        ///     {
        ///         Name = "cx22",
        ///     });
        /// 
        ///     var main = new HCloud.Server("main", new()
        ///     {
        ///         Name = "my-server",
        ///         Location = "fsn1",
        ///         Image = "debian-12",
        ///         ServerType = byName.Apply(getServerTypeResult =&gt; getServerTypeResult.Name),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerTypeResult> Invoke(GetServerTypeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerTypeResult>("hcloud:index/getServerType:getServerType", args ?? new GetServerTypeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Hetzner Cloud Server Type.
        /// 
        /// Use this resource to get detailed information about specific Server Type.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using HCloud = Pulumi.HCloud;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byId = HCloud.GetServerType.Invoke(new()
        ///     {
        ///         Id = 22,
        ///     });
        /// 
        ///     var byName = HCloud.GetServerType.Invoke(new()
        ///     {
        ///         Name = "cx22",
        ///     });
        /// 
        ///     var main = new HCloud.Server("main", new()
        ///     {
        ///         Name = "my-server",
        ///         Location = "fsn1",
        ///         Image = "debian-12",
        ///         ServerType = byName.Apply(getServerTypeResult =&gt; getServerTypeResult.Name),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerTypeResult> Invoke(GetServerTypeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerTypeResult>("hcloud:index/getServerType:getServerType", args ?? new GetServerTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Server Type.
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the Server Type.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetServerTypeArgs()
        {
        }
        public static new GetServerTypeArgs Empty => new GetServerTypeArgs();
    }

    public sealed class GetServerTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the Server Type.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Name of the Server Type.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetServerTypeInvokeArgs()
        {
        }
        public static new GetServerTypeInvokeArgs Empty => new GetServerTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerTypeResult
    {
        /// <summary>
        /// Architecture of the cpu for a Server of this type.
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// Number of cpu cores for a Server of this type.
        /// </summary>
        public readonly int Cores;
        /// <summary>
        /// Type of cpu for a Server of this type.
        /// </summary>
        public readonly string CpuType;
        /// <summary>
        /// Date of the Server Type deprecation announcement.
        /// </summary>
        public readonly string DeprecationAnnounced;
        /// <summary>
        /// Description of the Server Type.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Disk size in GB for a Server of this type.
        /// </summary>
        public readonly int Disk;
        /// <summary>
        /// ID of the Server Type.
        /// </summary>
        public readonly int? Id;
        public readonly int IncludedTraffic;
        /// <summary>
        /// Whether the Server Type is deprecated.
        /// </summary>
        public readonly bool IsDeprecated;
        /// <summary>
        /// Memory in GB for a Server of this type.
        /// </summary>
        public readonly int Memory;
        /// <summary>
        /// Name of the Server Type.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Type of boot drive for a Server of this type.
        /// </summary>
        public readonly string StorageType;
        /// <summary>
        /// Date of the Server Type removal. After this date, the Server Type cannot be used anymore.
        /// </summary>
        public readonly string UnavailableAfter;

        [OutputConstructor]
        private GetServerTypeResult(
            string architecture,

            int cores,

            string cpuType,

            string deprecationAnnounced,

            string description,

            int disk,

            int? id,

            int includedTraffic,

            bool isDeprecated,

            int memory,

            string? name,

            string storageType,

            string unavailableAfter)
        {
            Architecture = architecture;
            Cores = cores;
            CpuType = cpuType;
            DeprecationAnnounced = deprecationAnnounced;
            Description = description;
            Disk = disk;
            Id = id;
            IncludedTraffic = includedTraffic;
            IsDeprecated = isDeprecated;
            Memory = memory;
            Name = name;
            StorageType = storageType;
            UnavailableAfter = unavailableAfter;
        }
    }
}
